# -------------- BASIC IMPORTS --------------
import asyncio
import hashlib
import json
import math
import os
import threading
from pathlib import Path
import random
import sqlite3
import time
from datetime import datetime, timedelta, timezone
from decimal import Decimal, getcontext
import uuid
import tempfile
import shutil
from functools import wraps
from zoneinfo import ZoneInfo

import re
from typing import Optional, Tuple, List, Dict, Any
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, F, types, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import (
    TelegramBadRequest as BadRequest,
    TelegramUnauthorizedError as Unauthorized,
    TelegramNotFound as ChatNotFound,
    TelegramRetryAfter as RetryAfter, TelegramBadRequest,
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove
from aiogram.types import InputMediaPhoto, SuccessfulPayment
from aiogram.types import LabeledPrice, PreCheckoutQuery, ContentType
from aiogram.types import Message, CallbackQuery, KeyboardButton, KeyboardButtonRequestChat, ChatAdministratorRights
from aiogram.utils.keyboard import InlineKeyboardBuilder

getcontext().prec = 50

# -------------- FILES IMPORTS -------------- #

GOLD_MULTIPLIERS = [2, 4, 8, 16, 32, 64,
                    128, 256, 512, 1024, 2048, 4096
                    ]
TOWER_MULTIPLIERS = [1.19, 1.48, 1.86, 2.32, 2.9, 3.62, 4.53, 5.66, 7.08]

API_TOKEN = "8257726098:AAHWUAtUqvzUas_UbqxkdUdOnlEGXROEVD0"

SPECIAL_ADMINS = [5143424934, 8493326566]

DB_PATH = "data.db"
ADMINS = json.load(open("admins_data.json", encoding="utf-8"))["admins"]
BANNED = json.load(open("banned.json", encoding="utf-8"))["banned"]

STATUSES = ["ü´∂ –ò–≥—Ä–æ–∫", "üîß –ß–∏—Ç–µ—Ä", "ü§£ –ù–µ–≤–µ–∑—É–Ω—á–∏–∫", "‚öúÔ∏è –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π", "üíä –ß—Ç–æ —Å –Ω–∏–º?", "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å", "üé∞ –õ—É–¥–æ–º–∞–Ω",
            "üíé –ú–∏–ª–ª–∏–æ–Ω–µ—Ä", "üèÖ –í–µ—Ç–µ—Ä–∞–Ω", "ü•á –¢–æ–ø 1", "üíé –¢–æ–ø –î–æ–Ω–∞—Ç–µ—Ä", "ü§ô –ê–¥–º–∏–Ω", "üí£ –í–ª–∞–¥–µ–ª–µ—Ü", "üí∏ –ì–∏–≤–∞–≤–µ–π—â–∏–∫", "ü•á –≠–ª–∏—Ç–∞",
            "üì¢ –ò–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å", "üîÆ –∫–∞–∫...", "ü™¨ –§–∞–Ω—Ç–æ–º", "üîë –õ–µ–≥–µ–Ω–¥–∞", "üíé –ë–∞–≥–∞—á", "üé≠ –ü—Ä–∞–Ω–∫–µ—Ä", "‚ôæÔ∏è –•–•–•", "‚ô†Ô∏è –ú–∞—Å—Ç—å", "‚ö°Ô∏è –ó–µ–ø"]
BUYABLE_STATUSES = ["ü™¨ –§–∞–Ω—Ç–æ–º", "üîë –õ–µ–≥–µ–Ω–¥–∞", "üíé –ë–∞–≥–∞—á", "üé≠ –ü—Ä–∞–Ω–∫–µ—Ä", "‚ôæÔ∏è –•–•–•", "‚ô†Ô∏è –ú–∞—Å—Ç—å", "‚ö°Ô∏è –ó–µ–ø"]
BUYABLE_STATUSES_PRICES = ["m50000", "m100000", "m250000", "l500000", "m1000000", "s100", "m5000000"]
DEFAULT_UNIQUE_STATUSES = ["üçÇ lsqnz", "üíé –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "üëª Ferzister"]

QS_PATH = Path("qs.json")

BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

# -------------- BOT AND DISPATCHER -------------- #

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# -------------- FLOOD CONTROL -------------- #

_last_action_time = {}


def flood_protect(min_delay: float = 0.5):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è callback-—ñ–≤.
    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª–∞—Ü–∞—î —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ min_delay —Å–µ–∫—É–Ω–¥ ‚Äî
    –π–æ–º—É –ø–∏—à–µ—Ç—å—Å—è "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...".
    –Ø–∫—â–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ handler-–∞ –≤–∏–Ω–∏–∫–∞—î –ø–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    —á–µ—Ä–µ–∑ —Å–ø–∞–º/–ª—ñ–º—ñ—Ç–∏/–Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î "–ó–∞—á–µ–∫–∞–π".
    """

    def decorator(handler):
        @wraps(handler)
        async def wrapper(callback, *args, **kwargs):
            user_id = str(callback.from_user.id)
            now = time.time()
            last = _last_action_time.get(user_id, 0)

            if now - last < min_delay:
                texts = [
                    "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...", "‚è≥ –î–∞ –∫—É–¥–∞ —Ç—ã —Å–ø–µ—à–∏—à?", "‚è≥ –©–∞ —Å–µ–∫, –æ–±—Ä–∞–±–æ—Ç–∫–∞...",
                    "‚è≥ –ù—É –ø–æ–≥–æ–¥–∏ –∂–µ —Ç—ã...", "‚è≥ –ù–µ —Å–ø–µ—à–∏...", "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é—Å—å...",
                    "‚è≥ –î–∞ –ø–æ–≥–æ–¥–∏ –π–æ–º–∞–π–æ...", "‚è≥ –•–æ—á–µ—à—å –æ—à–∏–±–∫—É —á—Ç–æ–ª–∏?", "‚è≥ –ü–æ–º–µ–¥–ª–µ–Ω–Ω–µ–π..."
                ]
                return await callback.answer(f"{random.choice(texts)}", show_alert=False)

            _last_action_time[user_id] = now

            try:
                return await handler(callback, *args, **kwargs)
            except Exception as e:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
                msg = str(e).lower()

                # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑–∏, —è–∫—ñ –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –ø–æ–º–∏–ª–∫—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–ø–∞–º/–ª—ñ–º—ñ—Ç–∏/–Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
                spam_or_edit_errors = (
                    "spam", "slow_down", "too many requests", "retry after",
                    "message to edit not found", "message is not modified",
                    "can't edit message", "can't delete message", "cant edit",
                    "edit_message", "edit_text", "message can't be edited", "editmessagetext",
                )

                if any(k in msg for k in spam_or_edit_errors):
                    # –í–≤—ñ—á–ª–∏–≤–∞ –∫—Ä–∞—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏
                    try:
                        await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...", show_alert=False)
                    except Exception as inner:
                        pass
                    return None
                raise

        return wrapper

    return decorator


# -------------- DB -------------- #

def get_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn


async def handle_error(username, error, error_user_id, error_code):
    await bot.send_message("-1002554074011", f"–û—à–∏–±–∫–∞ —É @{username}\n\nError: {error}")
    await bot.send_message(error_user_id,
                           f"üõë –£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ú—ã —É–∂–µ —Ä–µ—à–∞–µ–º –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É!\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")


async def load_data(key) -> Any:
    key = str(key)
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS json_data (key TEXT PRIMARY KEY, value TEXT)")
        cursor.execute("SELECT value FROM json_data WHERE key = ?", (str(key),))
        row = cursor.fetchone()
        return json.loads(row["value"]) if row else None


async def save_data(key, data: Any):
    key = str(key)
    json_str = json.dumps(data, ensure_ascii=False)
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS json_data (key TEXT PRIMARY KEY, value TEXT)")
        cursor.execute("""
            INSERT INTO json_data (key, value)
            VALUES (?, ?)
            ON CONFLICT(key) DO UPDATE SET value = excluded.value
        """, (key, json_str))
        conn.commit()


def load_check(code: str) -> dict:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —á–µ–∫ –∑–∞ –∫–æ–¥–æ–º, –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∞–±–æ {} —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"""
    code = str(code)
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS checks (
                code TEXT PRIMARY KEY,
                creator_id TEXT NOT NULL,
                per_user REAL NOT NULL,
                remaining INTEGER NOT NULL,
                claimed TEXT DEFAULT '[]'
            )
        """)
        cursor.execute("SELECT * FROM checks WHERE code = ?", (code,))
        row = cursor.fetchone()
        if not row:
            return {}
        data = dict(row)
        # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON —Å–ø–∏—Å–æ–∫ claimed –Ω–∞ Python list
        try:
            data["claimed"] = json.loads(data.get("claimed", "[]"))
        except json.JSONDecodeError:
            data["claimed"] = []
        return data


def save_check(code: str, data: dict):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î —á–µ–∫ —É —Ç–∞–±–ª–∏—Ü—ñ checks"""
    code = str(code)
    claimed_json = json.dumps(data.get("claimed", []), ensure_ascii=False)
    creator_id = data["creator_id"]
    per_user = data["per_user"]
    remaining = data["remaining"]

    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO checks (code, creator_id, per_user, remaining, claimed)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(code) DO UPDATE SET
                creator_id = excluded.creator_id,
                per_user = excluded.per_user,
                remaining = excluded.remaining,
                claimed = excluded.claimed
        """, (code, creator_id, per_user, remaining, claimed_json))
        conn.commit()


async def create_user_data(user_id):
    data = {
        "coins": 0,
        "GGs": 0,
        "lost_coins": 0,
        "won_coins": 0,
        "status": 0
    }
    await anbskjfa(user_id)
    await save_data(str(user_id), data)


async def anbskjfa(uid):
    chat = await bot.get_chat(int(uid))
    username = chat.username
    await send_log(f"–ò–≥—Ä–æ–∫ @{username} –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–µ–ª –≤ –ú–µ–≥–∞–î—Ä–æ–ø! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")


async def gsname(name, id=None):
    try:
        new_name = ""
        if len(name) < 13:
            if not id:
                return name
            data = await load_data(str(id))
            clan_name = data.get("clan", None)
            if clan_name:
                so = f"[üõ° {clan_name}] " + name
                return so
            else:
                return name
        else:
            new_name = name[:12] + "..."

        if not id:
            return new_name
        data = await load_data(str(id))
        clan_name = data.get("clan", None)

        if clan_name:
            so = f"[üõ° {clan_name}] " + new_name
            return so
        else:
            return new_name
    except:
        if len(name) < 13:
            return name
        else:
            return name[:12] + "..."


def gline():
    line = "‚Ä¢ " * 13
    return html.code(line)


def format_balance(balance):
    balance = float(balance)
    if balance == 0:
        return "0"
    exponent = int(math.log10(abs(balance)))
    group = exponent // 3
    scaled_balance = balance / (10 ** (group * 3))
    formatted_balance = f"{scaled_balance:.2f}"
    suffix = "–∫" * group
    return formatted_balance.rstrip('0').rstrip('.') + suffix


def parse_bet_input(arg: str) -> int:
    if arg is None:
        return -1

    s = str(arg).strip().lower()
    s = s.replace(" ", "").replace("_", "")
    m = re.fullmatch(r'([0-9]+(?:[.,][0-9]+)?)([k–∫]*)', s)
    if not m:
        return -1

    num_str, k_suffix = m.groups()
    num_str = num_str.replace(',', '.')
    try:
        num = Decimal(num_str)
    except Exception:
        return -1

    multiplier = Decimal(1000) ** len(k_suffix)
    result = num * multiplier

    try:
        return int(result)
    except Exception:
        return -1


LOG_PATH = Path("log.json")
DEFAULT_LOG = {"events": []}


def ensure_log_file(path: Path = LOG_PATH, default: dict = DEFAULT_LOG):
    """
    –ü–µ—Ä–µ–∫–æ–Ω—É—î—Ç—å—Å—è, —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î. –Ø–∫—â–æ –Ω—ñ ‚Äî —Å—Ç–≤–æ—Ä—é—î –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é.
    –ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö (Path).
    """
    path = Path(path)
    if not path.parent.exists():
        path.parent.mkdir(parents=True, exist_ok=True)
    if not path.exists():
        # —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
        with path.open("w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
    return path


def load_log(path: Path = LOG_PATH) -> dict:
    """
    –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è log.json.
    –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä—é—î –∑ –¥–µ—Ñ–æ–ª—Ç–æ–º —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ñ–æ–ª—Ç.
    –Ø–∫—â–æ JSON –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π ‚Äî —Ä–æ–±–∏—Ç—å –±–µ–∫–∞–ø (log.json.bak_<timestamp>) —ñ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —á–∏—Å—Ç–∏–π —Ñ–∞–π–ª.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É (dict).
    """
    path = ensure_log_file(Path(path))
    try:
        with path.open("r", encoding="utf-8") as f:
            data = json.load(f)
            # —è–∫—â–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ —Ç–æ–π —Ç–∏–ø ‚Äî –≤–∏–ø—Ä–∞–≤–∏–º–æ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç
            if not isinstance(data, dict):
                return DEFAULT_LOG.copy()
            return data
    except json.JSONDecodeError:
        # JSON –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π ‚Äî —Ä–æ–±–∏–º–æ –±–µ–∫–∞–ø —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ —á–∏—Å—Ç–∏–π —Ñ–∞–π–ª
        ts = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
        bak_name = path.with_name(f"{path.name}.bak_{ts}")
        try:
            shutil.copy2(path, bak_name)
        except Exception:
            # —è–∫—â–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—å ‚Äî –Ω–∞–º–∞–≥–∞–π—Å—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏
            try:
                path.replace(bak_name)
            except Exception:
                pass
        # —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —á–∏—Å—Ç–∏–π —Ñ–∞–π–ª
        with path.open("w", encoding="utf-8") as f:
            json.dump(DEFAULT_LOG, f, ensure_ascii=False, indent=2)
        return DEFAULT_LOG.copy()
    except FileNotFoundError:
        # –Ω–µ—Ö–∞–π ensure_log_file —Å—Ç–≤–æ—Ä–∏—Ç—å –π–æ–≥–æ
        ensure_log_file(path)
        return DEFAULT_LOG.copy()


def save_log(data: dict, path: Path = LOG_PATH):
    """
    –ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è log.json —á–µ—Ä–µ–∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª —ñ os.replace (atomic).
    data –º–∞—î –±—É—Ç–∏ —Å–µ—Ä—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º –≤ JSON (dict).
    """
    path = Path(path)
    # –∑–∞–ø–∏—Å—É—î–º–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤ —Ç—ñ–π –∂–µ —Ç–µ—Ü—ñ
    dirpath = path.parent or Path(".")
    fd, tmp = tempfile.mkstemp(prefix=path.name, dir=str(dirpath))
    try:
        with os.fdopen(fd, "w", encoding="utf-8") as tmpf:
            json.dump(data, tmpf, ensure_ascii=False, indent=2)
            tmpf.flush()
            os.fsync(tmpf.fileno())
        # –∞—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º—ñ–Ω—é—î–º–æ
        os.replace(tmp, str(path))
    except Exception:
        # —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        try:
            os.remove(tmp)
        except Exception:
            pass
        raise


def append_log(entry: dict | str, path: Path = LOG_PATH, add_timestamp: bool = False) -> dict:
    """
    –î–æ–¥–∞—î –≤ log.json *—Ç–µ–∫—Å—Ç–æ–≤–∏–π* –µ–ª–µ–º–µ–Ω—Ç —É log['events'].
    - –Ø–∫—â–æ entry –Ω–µ —Ä—è–¥–æ–∫, –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ json.dumps(entry).
    - –Ø–∫—â–æ add_timestamp=True, –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º –¥–æ–¥–∞—î—Ç—å—Å—è –º—ñ—Ç–∫–∞ —á–∞—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "%d.%m.%Y %H:%M".
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–∏–π –ª–æ–≥ (dict).
    """
    log = load_log(path)

    # –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏: –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ —î –∫–ª—é—á 'events' —è–∫ —Å–ø–∏—Å–æ–∫
    if "events" not in log or not isinstance(log["events"], list):
        log["events"] = []

    # –ü—Ä–∏–≤–æ–¥–∏–º–æ entry –¥–æ —Ä—è–¥–∫–∞
    if isinstance(entry, str):
        text = entry
    else:
        # —Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫/—ñ–Ω—à—ñ —Ç–∏–ø–∏ —É –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π JSON-—Ä—è–¥–æ–∫ (—á–∏—Ç–∞—î—Ç—å—Å—è —è–∫ —Ç–µ–∫—Å—Ç)
        try:
            text = json.dumps(entry, ensure_ascii=False, separators=(",", ":"))
        except Exception:
            text = str(entry)

    if add_timestamp:
        ts = datetime.now().strftime("%d.%m.%Y %H:%M")
        text = f"{ts} {text}"

    # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–æ–∫ —É —Å–ø–∏—Å–æ–∫ events
    log["events"].append(text)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ
    save_log(log, path)
    return log


async def send_log(log):
    dt = datetime.now(ZoneInfo("Europe/Kyiv"))
    s = dt.strftime("%d.%m.%Y %H:%M")
    append_log(f"–î–∞—Ç–∞: {s} | {log}")


def ckb(user_id):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_i:{user_id}")]])
    return kb


@dp.callback_query(F.data.startswith("cancel_i:"))
async def handle_normal_cancel(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    data = query.data
    query_id = data.split(":")[1]

    if int(user_id) != int(query_id):
        return query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()


def get_status(status_id) -> str:
    status_id = int(status_id)
    if str(status_id)[:3] == "999":
        return get_unique_statuses()[int(str(status_id)[3:])]
    else:
        return STATUSES[status_id]


def gadmins():
    return json.load(open("admins_data.json", encoding="utf-8"))["admins"]


# -------------- HANDLERS -------------- #

@dp.message(lambda message: message.from_user.id in json.load(open("banned.json", encoding="utf-8"))["banned"])
async def handle_banned(message: Message):
    info = json.load(open("banned.json", encoding="utf-8"))["banned"]
    if message.chat.type != "private":
        return

    text = (
        f"{await gsname(message.from_user.first_name, message.from_user.id)}, –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã!"
        f"\n"
        f"–¶–µ–Ω–∞ —Ä–∞–∑–±–∞–Ω–∞: 50 ‚≠êÔ∏è"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω", url="https://t.me/sollamon")]
    ])
    await message.reply(text, reply_markup=kb)


# -------------- EVENT -------------- #

@dp.message(F.text.startswith("/event"))
async def handle_event(message: Message):
    user_id = message.from_user.id
    name = message.from_user.first_name

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üéÉ –ó–∞–≤–æ–¥ –¢—ã–∫–≤", callback_data=f"event_halloween:{user_id}")]])

    await message.answer(
        f"üéüÔ∏è {await gsname(name, user_id)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∏–≤–µ–Ω—Ç–∞!\n{gline()}\n\nüéÉ {html.bold("–¢–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ")}: <i>–•–µ–ª–ª–æ—É–∏–Ω</i>\n<b>‚ùì –û–ø–∏—Å–∞–Ω–∏–µ:</b> {html.italic("–°—Ç—Ä–æ–π—Ç–µ –∏ —É–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–π –∑–∞–≤–æ–¥ —Ç—ã–∫–≤! –ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–∑—ã –∑–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç—ã–∫–≤!")}",
        reply_markup=kb)


@dp.callback_query(F.data.startswith("event_halloween:"))
async def handle_event_halloween(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    if int(user_id) != int(callback.data.split(":")[1]):
        return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if not data.get("event_halloween_factory"):
        await callback.message.edit_text("üòÖ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç—É –∑–∞–≤–æ–¥–∞ —Ç—ã–∫–≤!", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üî• –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–æ–¥", callback_data=f"create_pumpkin_factory:{user_id}")]]))

    factory = data["event_halloween_factory"]
    level = factory["level"]
    pumpkins = factory["pumpkins"]
    last_claim = factory["last_claim"]

    now = datetime.now(timezone.utc)

    last_claim_iso = factory.get("last_claim")
    parsed_time = None

    if last_claim_iso:
        try:
            parsed_time = datetime.fromisoformat(last_claim_iso)
            if parsed_time.tzinfo is None:
                parsed_time = parsed_time.replace(tzinfo=timezone.utc)
        except Exception:
            # —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ‚Äî —Å–∫–∏–¥–∞—Ç–∏ –≤ now (—â–æ–± –Ω–µ –≤–∏–¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫–æ–≤—ñ —Ç–∏–∫—É)
            parsed_time = now
    else:
        # —è–∫—â–æ last_claim –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ created_at (—è–∫—â–æ –≤–∏ –∑–±–µ—Ä—ñ–≥–∞—î—Ç–µ)
        created_iso = factory.get("created_at")
        if created_iso:
            try:
                parsed_time = datetime.fromisoformat(created_iso)
                if parsed_time.tzinfo is None:
                    parsed_time = parsed_time.replace(tzinfo=timezone.utc)
            except Exception:
                parsed_time = now
        else:
            # –Ω–µ–º–∞—î –Ω—ñ last_claim, –Ω—ñ created_at ‚Äî –∑–∞–≤–æ–¥ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –¥–∞–Ω—ñ —Å—Ç–∞—Ä—ñ
            # –∑–±–µ—Ä–µ–∂–µ–º–æ last_claim = now —ñ –¥–∞–º–æ 0 pending
            factory["last_claim"] = now.isoformat()
            await save_data(user_id, data)
            pumpkins_pending = 0

    # —è–∫—â–æ parsed_time —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ‚Äî –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è
    if 'pumpkins_pending' not in locals():
        if parsed_time:
            seconds = (now - parsed_time).total_seconds()
            if seconds < 0:
                seconds = 0

            # –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 7 –¥–Ω—ñ–≤) ‚Äî –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            # max_seconds = 3600 * 24 * 7
            # if seconds > max_seconds:
            #     seconds = max_seconds

            pumpkins_per_hour = level * 100  # –≤–∞—à–∞ —Ñ–æ—Ä–º—É–ª–∞
            pumpkins_pending = int(seconds * (pumpkins_per_hour / 3600.0))

            # —è–∫—â–æ —Ö–æ—á–µ—Ç–µ ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ last_claim –ª–∏—à–µ –ø—ñ—Å–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–±–æ—Ä—É,
            # —Ç–æ–º—É —Ç—É—Ç –∑–∞–ª–∏—à–∞—î–º–æ last_claim –Ω–µ–∑–º—ñ–Ω–Ω–∏–º (–º–∏ –æ–Ω–æ–≤–∏–º–æ –π–æ–≥–æ –Ω–∏–∂—á–µ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è)
        else:
            pumpkins_pending = 0

    cost = level * 100000
    creating_pumpkins_per_hour = level * 100
    text = f"üî• –ó–∞–≤–æ–¥ —Ç—ã–∫–≤\n{gline()}\nüåü –£—Ä–æ–≤–µ–Ω—å: {level}\nüéÉ –¢—ã–∫–≤: {pumpkins}\nüéÉ –ù–∞ –∑–∞–≤–æ–¥–µ: {pumpkins_pending}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {format_balance(cost)} mDrops / {creating_pumpkins_per_hour} —Ç—ã–∫–≤ –≤ —á–∞—Å"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –°–æ–±—Ä–∞—Ç—å —Ç—ã–∫–≤—ã", callback_data=f"claim_pumpkins:{user_id}"),
         InlineKeyboardButton(text=f"üî• –£–ª—É—á—à–∏—Ç—å –∑–∞–≤–æ–¥ [{format_balance(cost)} mDrops]",
                              callback_data=f"upgrade_pumpkin_factory:{user_id}")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data=f"pumpkins_shop:{user_id}")]])
    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query(F.data.startswith("create_pumpkin_factory:"))
async def handle_create_pumpkin_factory(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if int(user_id) != int(callback.data.split(":")[1]):
        return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    if data.get("event_halloween_factory"):
        return await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–≤–æ–¥ —Ç—ã–∫–≤!")

    data["event_halloween_factory"] = {
        "level": 1,
        "pumpkins": 0,
        "last_claim": None,
    }
    await save_data(user_id, data)
    await callback.message.edit_text("üî• –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∑–∞–≤–æ–¥ —Ç—ã–∫–≤!", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üî• –ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–≤–æ–¥", callback_data=f"pumpkin_factory_menu:{user_id}")]]))


@dp.callback_query(F.data.startswith("pumpkin_factory_menu:"))
async def handle_pumpkin_factory_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    if int(user_id) != int(callback.data.split(":")[1]):
        return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if not data.get("event_halloween_factory"):
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–æ–¥–∞ —Ç—ã–∫–≤!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî• –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–æ–¥", callback_data=f"create_pumpkin_factory:{user_id}")]]))

    factory = data["event_halloween_factory"]
    level = factory["level"]
    pumpkins = factory["pumpkins"]
    last_claim = factory["last_claim"]

    now = datetime.now(timezone.utc)

    last_claim_iso = factory.get("last_claim")
    parsed_time = None

    if last_claim_iso:
        try:
            parsed_time = datetime.fromisoformat(last_claim_iso)
            if parsed_time.tzinfo is None:
                parsed_time = parsed_time.replace(tzinfo=timezone.utc)
        except Exception:
            # —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ‚Äî —Å–∫–∏–¥–∞—Ç–∏ –≤ now (—â–æ–± –Ω–µ –≤–∏–¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫–æ–≤—ñ —Ç–∏–∫—É)
            parsed_time = now
    else:
        # —è–∫—â–æ last_claim –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ created_at (—è–∫—â–æ –≤–∏ –∑–±–µ—Ä—ñ–≥–∞—î—Ç–µ)
        created_iso = factory.get("created_at")
        if created_iso:
            try:
                parsed_time = datetime.fromisoformat(created_iso)
                if parsed_time.tzinfo is None:
                    parsed_time = parsed_time.replace(tzinfo=timezone.utc)
            except Exception:
                parsed_time = now
        else:
            # –Ω–µ–º–∞—î –Ω—ñ last_claim, –Ω—ñ created_at ‚Äî –∑–∞–≤–æ–¥ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –¥–∞–Ω—ñ —Å—Ç–∞—Ä—ñ
            # –∑–±–µ—Ä–µ–∂–µ–º–æ last_claim = now —ñ –¥–∞–º–æ 0 pending
            factory["last_claim"] = now.isoformat()
            await save_data(user_id, data)
            pumpkins_pending = 0

    # —è–∫—â–æ parsed_time —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ‚Äî –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è
    if 'pumpkins_pending' not in locals():
        if parsed_time:
            seconds = (now - parsed_time).total_seconds()
            if seconds < 0:
                seconds = 0

            # –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 7 –¥–Ω—ñ–≤) ‚Äî –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            # max_seconds = 3600 * 24 * 7
            # if seconds > max_seconds:
            #     seconds = max_seconds

            pumpkins_per_hour = level * 100  # –≤–∞—à–∞ —Ñ–æ—Ä–º—É–ª–∞
            pumpkins_pending = int(seconds * (pumpkins_per_hour / 3600.0))

            # —è–∫—â–æ —Ö–æ—á–µ—Ç–µ ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ last_claim –ª–∏—à–µ –ø—ñ—Å–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–±–æ—Ä—É,
            # —Ç–æ–º—É —Ç—É—Ç –∑–∞–ª–∏—à–∞—î–º–æ last_claim –Ω–µ–∑–º—ñ–Ω–Ω–∏–º (–º–∏ –æ–Ω–æ–≤–∏–º–æ –π–æ–≥–æ –Ω–∏–∂—á–µ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è)
        else:
            pumpkins_pending = 0

    cost = level * 100000
    creating_pumpkins_per_hour = level * 100
    text = f"üî• –ó–∞–≤–æ–¥ —Ç—ã–∫–≤\n{gline()}\nüåü –£—Ä–æ–≤–µ–Ω—å: {level}\nüéÉ –¢—ã–∫–≤: {pumpkins}\nüéÉ –ù–∞ –∑–∞–≤–æ–¥–µ: {pumpkins_pending}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: {format_balance(cost)} mDrops / {creating_pumpkins_per_hour} —Ç—ã–∫–≤ –≤ —á–∞—Å"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –°–æ–±—Ä–∞—Ç—å —Ç—ã–∫–≤—ã", callback_data=f"claim_pumpkins:{user_id}"),
         InlineKeyboardButton(text=f"üî• –£–ª—É—á—à–∏—Ç—å –∑–∞–≤–æ–¥ [{format_balance(cost)} mDrops]",
                              callback_data=f"upgrade_pumpkin_factory:{user_id}")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data=f"pumpkins_shop:{user_id}")]])
    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query(F.data.startswith("upgrade_pumpkin_factory:"))
async def handle_upgrade_pumpkin_factory(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    if int(user_id) != int(callback.data.split(":")[1]):
        return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    data = await load_data(user_id)

    if not data.get("event_halloween_factory"):
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–æ–¥–∞ —Ç—ã–∫–≤!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî• –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–æ–¥", callback_data=f"create_pumpkin_factory:{user_id}")]]))

    factory = data["event_halloween_factory"]
    level = factory["level"]
    pumpkins = factory["pumpkins"]

    if level >= 10:
        return await callback.answer("–£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–æ–¥–∞ —Ç—ã–∫–≤!")

    cost = level * 100000

    if data.get("coins", 0) < cost:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–≤–æ–¥–∞ —Ç—ã–∫–≤!")

    data["coins"] -= cost
    factory["level"] += 1

    await save_data(user_id, data)
    await callback.message.edit_text(f"üî• –í—ã —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–∏–ª–∏ –∑–∞–≤–æ–¥ —Ç—ã–∫–≤ –Ω–∞ {level} —É—Ä–æ–≤–µ–Ω—å!",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="üî• –ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–≤–æ–¥",
                                                               callback_data=f"pumpkin_factory_menu:{user_id}")]]))


@dp.callback_query(F.data.startswith("claim_pumpkins:"))
async def handle_claim_pumpkins(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    if int(user_id) != int(callback.data.split(":")[1]):
        return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if not data.get("event_halloween_factory"):
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–æ–¥–∞ —Ç—ã–∫–≤!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî• –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–æ–¥", callback_data=f"create_pumpkin_factory:{user_id}")]]))

    factory = data["event_halloween_factory"]
    level = factory["level"]
    pumpkins = factory["pumpkins"]
    last_claim = factory["last_claim"]

    now = datetime.now(timezone.utc)

    last_claim_iso = factory.get("last_claim")
    parsed_time = None

    if last_claim_iso:
        try:
            parsed_time = datetime.fromisoformat(last_claim_iso)
            if parsed_time.tzinfo is None:
                parsed_time = parsed_time.replace(tzinfo=timezone.utc)
        except Exception:
            # —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ‚Äî —Å–∫–∏–¥–∞—Ç–∏ –≤ now (—â–æ–± –Ω–µ –≤–∏–¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫–æ–≤—ñ —Ç–∏–∫—É)
            parsed_time = now
    else:
        # —è–∫—â–æ last_claim –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ created_at (—è–∫—â–æ –≤–∏ –∑–±–µ—Ä—ñ–≥–∞—î—Ç–µ)
        created_iso = factory.get("created_at")
        if created_iso:
            try:
                parsed_time = datetime.fromisoformat(created_iso)
                if parsed_time.tzinfo is None:
                    parsed_time = parsed_time.replace(tzinfo=timezone.utc)
            except Exception:
                parsed_time = now
        else:
            # –Ω–µ–º–∞—î –Ω—ñ last_claim, –Ω—ñ created_at ‚Äî –∑–∞–≤–æ–¥ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –¥–∞–Ω—ñ —Å—Ç–∞—Ä—ñ
            # –∑–±–µ—Ä–µ–∂–µ–º–æ last_claim = now —ñ –¥–∞–º–æ 0 pending
            factory["last_claim"] = now.isoformat()
            await save_data(user_id, data)
            pumpkins_pending = 0

    # —è–∫—â–æ parsed_time —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ ‚Äî –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è
    if 'pumpkins_pending' not in locals():
        if parsed_time:
            seconds = (now - parsed_time).total_seconds()
            if seconds < 0:
                seconds = 0

            # –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 7 –¥–Ω—ñ–≤) ‚Äî –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            # max_seconds = 3600 * 24 * 7
            # if seconds > max_seconds:
            #     seconds = max_seconds

            pumpkins_per_hour = level * 100  # –≤–∞—à–∞ —Ñ–æ—Ä–º—É–ª–∞
            pumpkins_pending = int(seconds * (pumpkins_per_hour / 3600.0))

            # —è–∫—â–æ —Ö–æ—á–µ—Ç–µ ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ last_claim –ª–∏—à–µ –ø—ñ—Å–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–±–æ—Ä—É,
            # —Ç–æ–º—É —Ç—É—Ç –∑–∞–ª–∏—à–∞—î–º–æ last_claim –Ω–µ–∑–º—ñ–Ω–Ω–∏–º (–º–∏ –æ–Ω–æ–≤–∏–º–æ –π–æ–≥–æ –Ω–∏–∂—á–µ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è)
        else:
            pumpkins_pending = 0

    if pumpkins_pending <= 0:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—ã–∫–≤ –¥–ª—è —Å–±–æ—Ä–∞!")

    factory["pumpkins"] += pumpkins_pending
    factory["pumpkins_pending"] = 0
    factory["last_claim"] = datetime.now().isoformat()
    await save_data(user_id, data)

    await callback.message.edit_text(f"üî• –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ {pumpkins_pending} —Ç—ã–∫–≤!",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton(text="üî• –ü–µ—Ä–µ–π—Ç–∏ –≤ –∑–∞–≤–æ–¥",
                                                               callback_data=f"pumpkin_factory_menu:{user_id}")]]))


UUH = "üòí"


@dp.callback_query(F.data.startswith("pumpkins_shop"))
async def pumpkins_shop(cb: CallbackQuery):
    user_id = cb.from_user.id
    name = cb.from_user.first_name

    if int(cb.data.split(":")[1]) != int(user_id):
        return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ mDrops", callback_data=f"buy_with_pumpkins:mdrops:{user_id}"),
         InlineKeyboardButton(text="üîÑ GGs", callback_data=f"buy_with_pumpkins:ggs:{user_id}")],
        [InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=f"buy_with_pumpkins:1:{user_id}"),
         InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=f"buy_with_pumpkins:2:{user_id}"),
         InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=f"buy_with_pumpkins:3:{user_id}")],
        [InlineKeyboardButton(text="4Ô∏è‚É£", callback_data=f"buy_with_pumpkins:4:{user_id}"),
         InlineKeyboardButton(text="5Ô∏è‚É£", callback_data=f"buy_with_pumpkins:5:{user_id}"),
         InlineKeyboardButton(text="6Ô∏è‚É£", callback_data=f"buy_with_pumpkins:6:{user_id}")],
        [InlineKeyboardButton(text="7Ô∏è‚É£", callback_data=f"buy_with_pumpkins:7:{user_id}"),
         InlineKeyboardButton(text="8Ô∏è‚É£", callback_data=f"buy_with_pumpkins:8:{user_id}")],
        [InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{user_id}")]])
    await cb.message.edit_text(f"""üõç <b>{await gsname(name, user_id)}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!
{gline()}
üîÑ –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤ mDrops:
 ‚Ä¢ 1 —Ç—ã–∫–≤–∞ = 7 mDrops
üîÑ –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤ GGs:
 ‚Ä¢ 400 —Ç—ã–∫–≤ = 1 GG

{gline()}
üõí –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤:
1Ô∏è‚É£ 150 üéÉ ‚û° 1 –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å
2Ô∏è‚É£ 750 üéÉ ‚û° 1 —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–µ–π—Å
3Ô∏è‚É£ 3000 üéÉ ‚û° 1 –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å
4Ô∏è‚É£ 15000 üéÉ ‚û° 1 –∞–ª–º–∞–∑–Ω—ã–π –∫–µ–π—Å

5Ô∏è‚É£ 7500 üéÉ ‚û° —Å—Ç–∞—Ç—É—Å "ü™¨ –§–∞–Ω—Ç–æ–º"
6Ô∏è‚É£ 15000 üéÉ ‚û° —Å—Ç–∞—Ç—É—Å "üîë –õ–µ–≥–µ–Ω–¥–∞"
7Ô∏è‚É£ 45000 üéÉ ‚û° —Å—Ç–∞—Ç—É—Å "üíé –ë–∞–≥–∞—á"
8Ô∏è‚É£ <s>100000</s> 75000 üéÉ ‚û° —Å—Ç–∞—Ç—É—Å "üé≠ –ü—Ä–∞–Ω–∫–µ—Ä" üíé  <tg-spoiler>(–£–ñ–ï –ù–ï –î–û–°–¢–£–ü–ï–ù –í /shop)</tg-spoiler>
""", reply_markup=kb)


hw_prizes = {
    1: ["1 –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å", 150],
    2: ["1 —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–µ–π—Å", 750],
    3: ["1 –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å", 3000],
    4: ["1 –∞–ª–º–∞–∑–Ω—ã–π –∫–µ–π—Å", 15000],
    5: ["—Å—Ç–∞—Ç—É—Å \"ü™¨ –§–∞–Ω—Ç–æ–º\"", 7500],
    6: ["—Å—Ç–∞—Ç—É—Å \"üîë –õ–µ–≥–µ–Ω–¥–∞\"", 15000],
    7: ["—Å—Ç–∞—Ç—É—Å \"üíé –ë–∞–≥–∞—á\"", 45000],
    8: ["—Å—Ç–∞—Ç—É—Å \"üé≠ –ü—Ä–∞–Ω–∫–µ—Ä\"", 75000]
}


class TradePumpkinsStates(StatesGroup):
    waiting_in_mdrops = State()
    waiting_in_ggs = State()


@dp.callback_query(F.data.startswith("buy_with_pumpkins"))
async def buy_with_pumpkins(cb: CallbackQuery, state: FSMContext):
    uid = cb.from_user.id
    name = cb.from_user.first_name

    if int(cb.data.split(":")[2]) != int(uid):
        return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    choose = cb.data.split(":")[1]

    data = await load_data(uid)

    if not choose.isdigit():
        if choose == "mdrops":
            pumpkins = data["event_halloween_factory"]["pumpkins"]
            if pumpkins < 7:
                return await cb.message.edit_text(
                    f"{UUH} {await gsname(name, uid)}, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç—ã–∫–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!\n\nüéÉ –¢–≤–æ–∏ —Ç—ã–∫–≤—ã: {pumpkins}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]]))

            await cb.message.edit_text(
                f"üì≤ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Ç—Å–æ–≤ —Ç—ã–∫–≤ –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \"–≤—Å–µ\" –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –≤—Å–µ!\n\nüéÉ –¢–≤–æ–∏ —Ç—ã–∫–≤—ã: {pumpkins}")
            return await state.set_state(TradePumpkinsStates.waiting_in_mdrops)

        elif choose == "ggs":
            pumpkins = data["event_halloween_factory"]["pumpkins"]
            if pumpkins < 400:
                return await cb.message.edit_text(
                    f"{UUH} {await gsname(name, uid)}, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç—ã–∫–≤ –¥–ª—è –æ–±–º–µ–Ω–∞!\n\nüéÉ –¢–≤–æ–∏ —Ç—ã–∫–≤—ã: {pumpkins}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]]))

            await cb.message.edit_text(
                f"üì≤ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Ç—Å–æ–≤ —Ç—ã–∫–≤ –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ \"–≤—Å–µ\" –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å –≤—Å–µ!\n\nüéÉ –¢–≤–æ–∏ —Ç—ã–∫–≤—ã: {pumpkins}")
            return await state.set_state(TradePumpkinsStates.waiting_in_ggs)

    else:
        pumpkins = data["event_halloween_factory"]["pumpkins"]
        if pumpkins >= hw_prizes[int(choose)][1]:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_trade_pumpkins:{choose}:{uid}")],
                [InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]])
            await cb.message.edit_text(
                f"‚úÖ {await gsname(name, uid)}, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–æ–∫—É–ø–∫—É.\n\nüîó –¢–æ–≤–∞—Ä: {hw_prizes[int(choose)][0]}\nüí∞ –¶–µ–Ω–∞: {hw_prizes[int(choose)][1]}\nüéÉ –¢–≤–æ–∏ —Ç—ã–∫–≤—ã: {pumpkins}",
                reply_markup=kb)
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]])
            await cb.message.edit_text(
                f"‚ùå {await gsname(name, uid)}, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {abs(int(hw_prizes[int(choose)][1]) - int(pumpkins))} —Ç—ã–∫–≤.\n\nüîó –¢–æ–≤–∞—Ä: {hw_prizes[int(choose)][0]}\nüí∞ –¶–µ–Ω–∞: {hw_prizes[int(choose)][1]}\nüéÉ –¢–≤–æ–∏ —Ç—ã–∫–≤—ã: {pumpkins}",
                reply_markup=kb)


@dp.callback_query(F.data.startswith("confirm_trade_pumpkins"))
async def confirm_trade_pumpkins(cb: CallbackQuery):
    uid = cb.from_user.id
    name = cb.from_user.first_name

    # –∑–∞—â–∏—Ç–∞ –∫–Ω–æ–ø–∫–∏
    parts = cb.data.split(":")
    if int(parts[2]) != int(uid):
        return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    choose = int(parts[1])

    data = await load_data(uid)
    if not data:
        await create_user_data(uid)
        data = await load_data(uid)

    pumpkins = int(data.get("event_halloween_factory", {}).get("pumpkins", 0))
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –±–µ—Ä–µ–º —Ü–µ–Ω—É –∏–∑ hw_prizes
    try:
        price = int(hw_prizes[choose][1])
    except Exception:
        return await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞.",
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                              [InlineKeyboardButton(text=BACK,
                                                                    callback_data=f"pumpkin_factory_menu:{uid}")]
                                          ]))

    if pumpkins < price:
        return await cb.message.edit_text(
            f"{UUH} {await gsname(name, uid)}, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {price - pumpkins} —Ç—ã–∫–≤!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]
            ])
        )

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç—ã–∫–≤—ã
    data.setdefault("event_halloween_factory", {})["pumpkins"] = pumpkins - price

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç 1..4 ‚Äî –≤—ã–¥–∞—ë–º –∫–µ–π—Å
    if choose <= 4:
        # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—É–Ω–∫—Ç–æ–≤ -> –∫–ª—é—á–∏ –∫–µ–π—Å–æ–≤
        choose_to_case = {
            1: "bronze",
            2: "silver",
            3: "gold",
            4: "diamond"
        }
        case_key = choose_to_case.get(choose)
        if not case_key:
            return await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–µ–π—Å–∞.",
                                              reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                  [InlineKeyboardButton(text=BACK,
                                                                        callback_data=f"pumpkin_factory_menu:{uid}")]
                                              ]))

        inventory = data.setdefault("cases", {})
        inventory[case_key] = inventory.get(case_key, 0) + 1
        await save_data(uid, data)

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]])
        return await cb.message.edit_text(
            f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {CASES[case_key]['emoji']} <b>{CASES[case_key]['name']}</b>!\n\n"
            f"üéÉ –û—Å—Ç–∞–ª–æ—Å—å —Ç—ã–∫–≤: {data['event_halloween_factory']['pumpkins']}",
            reply_markup=kb,
            parse_mode="HTML"
        )

    # –ò–Ω–∞—á–µ ‚Äî –≤—ã–¥–∞—ë–º —Å—Ç–∞—Ç—É—Å (–ø—É–Ω–∫—Ç—ã 5..8)
    else:
        # hw_prizes[choose][0] –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ '—Å—Ç–∞—Ç—É—Å \"ü™¨ –§–∞–Ω—Ç–æ–º\"'
        raw = hw_prizes.get(choose, [None, None])[0]
        # –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–≤—ã—á–∫–∞–º–∏
        status_name = None
        if raw:
            parts_raw = raw.split('"')
            if len(parts_raw) >= 2:
                status_name = parts_raw[1]
            else:
                # fallback ‚Äî –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                status_name = raw

        if not status_name:
            return await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ç–∞—Ç—É—Å–∞.",
                                              reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                  [InlineKeyboardButton(text=BACK,
                                                                        callback_data=f"pumpkin_factory_menu:{uid}")]
                                              ]))

        statuses = data.setdefault("statuses", [])
        if status_name in statuses:
            msg = f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å {status_name}."
        else:
            statuses.append(status_name)
            await save_data(uid, data)
            msg = f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å {status_name}!"

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]])
        return await cb.message.edit_text(
            f"{msg}\n\nüéÉ –û—Å—Ç–∞–ª–æ—Å—å —Ç—ã–∫–≤: {data['event_halloween_factory']['pumpkins']}",
            reply_markup=kb
        )


@dp.message(TradePumpkinsStates.waiting_in_mdrops)
async def process_mdrops_exchange(message: Message, state: FSMContext):
    uid = message.from_user.id
    text = message.text.strip().lower()

    data = await load_data(uid)
    if not data:
        await create_user_data(uid)
        data = await load_data(uid)

    pumpkins = int(data.get("event_halloween_factory", {}).get("pumpkins", 0))

    # "–≤—Å–µ" –∏–ª–∏ —á–∏—Å–ª–æ
    if text in ("–≤—Å–µ", "–≤—Å—ñ", "all"):
        amount = pumpkins
    else:
        if not text.isdigit():
            return await message.answer("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—ã–∫–≤ –¥–ª—è –æ–±–º–µ–Ω–∞) –∏–ª–∏ ¬´–≤—Å–µ¬ª.")
        amount = int(text)

    if amount <= 0:
        return await message.answer("‚ùó –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    if amount > pumpkins:
        return await message.answer(f"‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ç—ã–∫–≤. –£ —Ç–µ–±—è: {pumpkins} üéÉ")

    # –∫—É—Ä—Å 1 üéÉ -> 7 mDrops
    mdrops_amount = amount * 7

    data.setdefault("event_halloween_factory", {})["pumpkins"] = pumpkins - amount
    data["coins"] = data.get("coins", 0) + mdrops_amount
    await save_data(uid, data)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]
    ])

    await message.answer(
        f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–µ–Ω!\n\nüéÉ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {amount} üéÉ ‚Üí {mdrops_amount} mDrops\n"
        f"üéÉ –û—Å—Ç–∞–ª–æ—Å—å: {data['event_halloween_factory']['pumpkins']} üéÉ\n"
        f"üí∞ –¢–≤–æ–∏ mDrops: {format_balance(data['coins'])}",
        reply_markup=kb
    )

    await state.clear()


@dp.message(TradePumpkinsStates.waiting_in_ggs)
async def process_ggs_exchange(message: Message, state: FSMContext):
    uid = message.from_user.id
    text = message.text.strip().lower()

    data = await load_data(uid)
    if not data:
        await create_user_data(uid)
        data = await load_data(uid)

    pumpkins = int(data.get("event_halloween_factory", {}).get("pumpkins", 0))

    # "–≤—Å–µ" –∏–ª–∏ —á–∏—Å–ª–æ
    if text in ("–≤—Å–µ", "–≤—Å—ñ", "all"):
        amount = pumpkins
    else:
        if not text.isdigit():
            return await message.answer("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—ã–∫–≤ –¥–ª—è –æ–±–º–µ–Ω–∞) –∏–ª–∏ ¬´–≤—Å–µ¬ª.")
        amount = int(text)

    if amount <= 0:
        return await message.answer("‚ùó –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    if amount > pumpkins:
        return await message.answer(f"‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ç—ã–∫–≤. –£ —Ç–µ–±—è: {pumpkins} üéÉ")

    # 400 üéÉ = 1 GG
    possible_ggs = amount // 400
    used_pumpkins = possible_ggs * 400
    leftover = amount - used_pumpkins

    if possible_ggs <= 0:
        return await message.answer("‚ùå –î–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ GG –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 400 üéÉ (–∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫—Ä–∞—Ç–Ω–æ–µ 400).")

    data["ggs"] = data.get("ggs", 0) + possible_ggs
    data.setdefault("event_halloween_factory", {})["pumpkins"] = pumpkins - used_pumpkins
    await save_data(uid, data)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=BACK, callback_data=f"pumpkin_factory_menu:{uid}")]
    ])

    msg = (
        f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–µ–Ω!\n\n"
        f"üéÉ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {used_pumpkins} üéÉ ‚Üí {possible_ggs} GG(–æ–≤)\n"
        f"üéÉ –û—Å—Ç–∞–ª–æ—Å—å: {data['event_halloween_factory']['pumpkins']} üéÉ\n"
        f"üè∑Ô∏è –¢–≤–æ–∏ GGs: {int(data['ggs'])}"
    )
    if leftover > 0:
        msg += f"\n\n‚ÑπÔ∏è –ß–∞—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ç—ã–∫–≤ ({leftover} üéÉ) –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±–º–µ–Ω –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç 400 üéÉ –∑–∞ 1 GG."

    await message.answer(msg, reply_markup=kb)
    await state.clear()


# -------------- MAIN -------------- #

@dp.message(F.text.startswith("/start"))
async def start_command(message: Message):
    try:
        user_id = str(message.from_user.id)
        parts = message.text.split()
        arg = parts[1] if len(parts) > 1 else None

        data = await load_data(user_id)
        if not data:
            await create_user_data(message.from_user.id)
            data = await load_data(str(message.from_user.id))

        if arg and arg.startswith("check_"):
            code = arg.split("check_")[1]
            check = load_check(code)

            if not check:
                return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —á–µ–∫–∞.")
            if user_id in check.get("claimed", []):
                return await message.answer("‚ùó –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫.")
            if check["remaining"] <= 0:
                return await message.answer("‚ùó –≠—Ç–æ—Ç —á–µ–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")

            data["coins"] += check["per_user"]
            check.setdefault("claimed", []).append(user_id)
            check["remaining"] -= 1
            await save_data(user_id, data)
            save_check(code, check)

            creator_id = check.get("creator_id")
            if creator_id:
                try:
                    await bot.send_message(
                        creator_id,
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {await gsname(message.from_user.first_name, message.from_user.id)} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à —á–µ–∫ {code} –∏ –ø–æ–ª—É—á–∏–ª {format_balance(check['per_user'])} mDrops"
                    )
                    await send_log(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {await gsname(message.from_user.first_name, message.from_user.id)} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —á–µ–∫ {html.spoiler(code)} –∏ –ø–æ–ª—É—á–∏–ª {format_balance(check['per_user'])} mDrop\n–ê–∫—Ç–∏–≤–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {check["remaining"]}")
                except:
                    pass

            return await message.answer(f"ü§ë –í—ã –ø–æ–ª—É—á–∏–ª–∏ {check['per_user']} mDrops –ø–æ —á–µ–∫—É!")

        referral = arg if arg and not arg.startswith("check_") else None
        if referral and referral != user_id:
            if data.get("ref_activated", False) is False:
                ref_data = await load_data(referral)
                if ref_data:
                    ref_data["coins"] = ref_data.get("coins", 0) + 2500
                    ref_data["referrals"] = ref_data.get("referrals", 0) + 1
                    await save_data(referral, ref_data)
                    try:
                        await bot.send_message(referral, "üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +2500 mDrops.")
                    except:
                        pass

                data["ref_activated"] = True
                await save_data(user_id, data)

        if await load_data(user_id) != data:
            await save_data(user_id, data)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≠ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", url="https://t.me/gmegadbot?startgroup=start")],
            [InlineKeyboardButton(text="üì£ –ù–æ–≤–æ—Å—Ç–∏", url="t.me/saycursed"),
             InlineKeyboardButton(text="üü¢ –ù–∞—à —á–∞—Ç", url="t.me/saycurse")],
            [InlineKeyboardButton(text="üì± WebApp", url="https://t.me/gmegadbot/gmegadapp")]])

        try:
            await message.answer_photo(
                photo="AgACAgIAAxkBAAEBnDlowCt4Vsk7wAijNaDceFUeUFahcwAC9PYxG1syAAFK6A-SJs4QhsYBAAMCAAN5AAM2BA",
                caption=f"""üëã –ü—Ä–∏–≤–µ—Ç {await gsname(message.from_user.first_name, message.from_user.id)}, —ç—Ç–æ –ú–µ–≥–∞–î—Ä–æ–ø! üì¶

üíé –ò–≥—Ä–∞–π, –≤–µ—Å–µ–ª–∏—Å—å –∏ –ø–æ–ª—É—á–∞–π –ø–æ–ª—å–∑—É –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —á–∞—Ç–∞. –û–¥–∏–Ω, —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –≤—Å–µ–π —Å–µ–º—å—ë–π ‚Äî –≤—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π! üî•

ü§î –ì–æ—Ç–æ–≤? –í–≤–æ–¥–∏ /game –∏ –Ω–∞—á–∏–Ω–∞–µ–º!

‚ùì–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –¢–æ–≥–¥–∞ üëâ /help""",
                parse_mode="HTML",
                reply_markup=kb
            )
        except BadRequest:
            try:
                await message.answer_photo(
                    photo="AgACAgIAAxkBAAIi5WjCkEk9vfYzV8RKbtogtJ4zmIWpAALh_jEb3HAZSk0ubUug8KNNAQADAgADeQADNgQ",
                    caption=f"""üëã –ü—Ä–∏–≤–µ—Ç {await gsname(message.from_user.first_name, message.from_user.id)}, —ç—Ç–æ –ú–µ–≥–∞–î—Ä–æ–ø! üì¶

üíé –ò–≥—Ä–∞–π, –≤–µ—Å–µ–ª–∏—Å—å –∏ –ø–æ–ª—É—á–∞–π –ø–æ–ª—å–∑—É –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —á–∞—Ç–∞. –û–¥–∏–Ω, —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –≤—Å–µ–π —Å–µ–º—å—ë–π ‚Äî –≤—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π! üî•

ü§î –ì–æ—Ç–æ–≤? –í–≤–æ–¥–∏ /game –∏ –Ω–∞—á–∏–Ω–∞–µ–º!

‚ùì–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –¢–æ–≥–¥–∞ üëâ /help""",
                    parse_mode="HTML",
                    reply_markup=kb
                )
            except:
                await message.answer(f"""üëã –ü—Ä–∏–≤–µ—Ç {await gsname(message.from_user.first_name, message.from_user.id)}, —ç—Ç–æ –ú–µ–≥–∞–î—Ä–æ–ø! üì¶

üíé –ò–≥—Ä–∞–π, –≤–µ—Å–µ–ª–∏—Å—å –∏ –ø–æ–ª—É—á–∞–π –ø–æ–ª—å–∑—É –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —á–∞—Ç–∞. –û–¥–∏–Ω, —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –≤—Å–µ–π —Å–µ–º—å—ë–π ‚Äî –≤—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π! üî•

ü§î –ì–æ—Ç–æ–≤? –í–≤–æ–¥–∏ /game –∏ –Ω–∞—á–∏–Ω–∞–µ–º!

‚ùì–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –¢–æ–≥–¥–∞ üëâ /help""")

    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 102)


@dp.message(F.text.lower().in_(["–±", "–±–∞–ª–∞–Ω—Å", "/balance", "/balance@gmegadbot"]))
async def handle_balance(message: Message):
    try:
        user_id = str(message.from_user.id)
        name = message.from_user.first_name

        data = await load_data(user_id)
        if not data:
            await create_user_data(user_id)
            data = await load_data(user_id)

        coins = data.get("coins", 0)
        lost = data.get("lost_coins", 0)

        # —Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å == 0
        kb_rows = []

        if int(coins) == 0:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ–Ω—É—Å–∞ (–ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç hourly_bonus)
            now = datetime.now(timezone.utc)
            last_bonus = data.get("last_hourly_bonus")

            # —Å—Ç–∞—Ç—É—Å
            try:
                status = int(data.get("status", 0))
            except Exception:
                status = 0

            if status == 22:
                cooldown = timedelta(minutes=30)
            else:
                cooldown = timedelta(hours=1)

            bonus_available = False
            if not last_bonus:
                bonus_available = True
            else:
                try:
                    last_time = datetime.fromisoformat(last_bonus)
                    if now - last_time >= cooldown:
                        bonus_available = True
                except Exception:
                    bonus_available = True  # –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º

            if bonus_available:
                kb_rows.append([InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data=f"claim_bonus:{user_id}")])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞—Ä–∞–±–∞–Ω–∞ (–ª–æ–≥–∏–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ baraban_handler)
            baraban_ready = False
            now_ts = time.time()
            try:
                # –∫—É–ª–¥–∞—É–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º)
                bd = data.get("baraban_cooldown")
                if not bd or now_ts >= float(bd):
                    # –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                    try:
                        member = await bot.get_chat_member(CHANNEL_ID, int(user_id))
                        if member.status not in ("left", "kicked"):
                            baraban_ready = True
                    except Exception:
                        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
                        baraban_ready = False
            except Exception:
                baraban_ready = False

            if baraban_ready:
                kb_rows.append([InlineKeyboardButton(text="üç• –ë–∞—Ä–∞–±–∞–Ω", callback_data=f"open_baraban:{user_id}")])

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º markup, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
        reply_kb = None
        if kb_rows:
            reply_kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.reply(
            f"{html.italic(f'üí∞ {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {format_balance(coins)} mDrops')}\n"
            f"{gline()}\n\nüé∞ –°–ª–∏—Ç–æ: {format_balance(lost)} mDrops",
            reply_markup=reply_kb
        )
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 103)


@dp.callback_query(F.data.startswith("claim_bonus:"))
async def claim_bonus_cb(cb: CallbackQuery):
    try:
        parts = cb.data.split(":")
        if len(parts) < 2:
            return await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        uid = parts[1]
        if int(cb.from_user.id) != int(uid):
            return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

        data = await load_data(uid)
        if not data:
            await create_user_data(uid)
            data = await load_data(uid)

        # —Å—Ç–∞—Ç—É—Å
        try:
            status = int(data.get("status", 0))
        except Exception:
            status = 0

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º cooldown –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –±–æ–Ω—É—Å–∞
        if status == 22:
            bonus_min, bonus_max = 3000, 4500
            cooldown = timedelta(minutes=30)
            range_desc = "3000‚Äì4500 mDrops (—Å—Ç–∞—Ç—É—Å 22). –ö–î 30 –º–∏–Ω."
        elif 17 <= status <= 21:
            step = status - 17
            bonus_min = 500 + step * 250
            bonus_max = 750 + step * 250
            bonus_min = min(bonus_min, 3000)
            bonus_max = min(bonus_max, 3000)
            cooldown = timedelta(hours=1)
            range_desc = f"{bonus_min}‚Äì{bonus_max} mDrops (—Å—Ç–∞—Ç—É—Å {status}). –ö–î 60 –º–∏–Ω."
        else:
            bonus_min, bonus_max = 50, 250
            cooldown = timedelta(hours=1)
            range_desc = f"{bonus_min}‚Äì{bonus_max} mDrops (–æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å). –ö–î 60 –º–∏–Ω."

        now = datetime.now(timezone.utc)
        last_bonus = data.get("last_hourly_bonus")
        if last_bonus:
            try:
                last_time = datetime.fromisoformat(last_bonus)
                if now - last_time < cooldown:
                    remaining = cooldown - (now - last_time)
                    minutes = math.ceil(remaining.total_seconds() / 60)
                    return await cb.answer(f"–ë–æ–Ω—É—Å –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω.", show_alert=True)
            except Exception:
                pass  # –ø–æ–∑–≤–æ–ª–∏–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —á–∞—Ç (–∫–∞–∫ –≤ hourly_bonus)
        try:
            member = await bot.get_chat_member(chat_id="@saycurse", user_id=int(uid))
            if member.status in ["left", "kicked"]:
                return await cb.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, –≤—Å—Ç—É–ø–∏ –≤ –Ω–∞—à —á–∞—Ç.", show_alert=True)
        except Exception:
            return await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)

        # –≤—ã–¥–∞—ë–º –±–æ–Ω—É—Å
        bonus = random.randint(bonus_min, bonus_max)
        if status not in (22,) and bonus > 3000:
            bonus = 3000

        data["coins"] = data.get("coins", 0) + bonus
        data["last_hourly_bonus"] = now.isoformat()
        await save_data(uid, data)

        await cb.message.answer(
            f"üéÅ {await gsname(cb.from_user.first_name, int(uid))}, —Ç—ã –ø–æ–ª—É—á–∏–ª {bonus} mDrops!\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {range_desc}\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {int(cooldown.total_seconds() // 60)} –º–∏–Ω—É—Ç."
        )
        await cb.answer()  # —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É" —É –∫–Ω–æ–ø–∫–∏
    except Exception as e:
        await handle_error(cb.from_user.username, e, cb.from_user.id, 104)


@dp.callback_query(F.data.startswith("open_baraban:"))
async def open_baraban_cb(cb: CallbackQuery):
    try:
        parts = cb.data.split(":")
        if len(parts) < 2:
            return await cb.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        uid = parts[1]
        if int(cb.from_user.id) != int(uid):
            return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

        # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not await load_data(uid):
            await create_user_data(uid)
        data = await load_data(uid)

        now = time.time()
        # —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            status = int(data.get("status", 0))
        except Exception:
            status = 0

        # –≤—ã—á–∏—Å–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        base_cd_seconds = 12 * 3600
        reduction_per_status = 5 * 60
        min_cd_seconds = 40 * 60

        if status == 22:
            final_cd_seconds = 30 * 60
            spins = 2
        else:
            reduction = status * reduction_per_status
            final_cd_seconds = max(min_cd_seconds, base_cd_seconds - reduction)
            spins = 1

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if "baraban_cooldown" in data and now < data["baraban_cooldown"]:
            remaining = int(data["baraban_cooldown"] - now)
            hrs = remaining // 3600
            mins = (remaining % 3600) // 60
            return await cb.answer(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–∞—Ä–∞–±–∞–Ω —á–µ—Ä–µ–∑ {hrs}—á {mins}–º.", show_alert=True)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        try:
            member = await bot.get_chat_member(CHANNEL_ID, int(uid))
            if member.status in ("left", "kicked"):
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öúÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/saycursed")]
                ])
                return await cb.message.answer(
                    f'‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {html.link("–∫–∞–Ω–∞–ª", "https://t.me/saycursed")}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ üéÅ',
                    disable_web_page_preview=True,
                    reply_markup=kb
                )
        except Exception as e:
            return await cb.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: {e}", show_alert=True)

        # –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑(—ã)
        ptype, amount, filename = choose_prize()
        prizes = [(ptype, amount)]

        if spins == 2:
            p2, a2, f2 = choose_prize()
            prizes.append((p2, a2))

        total_coins = sum(a for t, a in prizes if t == "coins")
        total_ggs = sum(a for t, a in prizes if t != "coins")

        if total_coins:
            data["coins"] = data.get("coins", 0) + total_coins
        if total_ggs:
            data["GGs"] = data.get("GGs", 0) + total_ggs

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω
        data["baraban_cooldown"] = now + final_cd_seconds
        await save_data(uid, data)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–≤–∏–¥–µ–æ" / —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç–≤–æ–µ–º—É handler'—É
        loading_msg = await cb.message.answer("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ, –æ–∂–∏–¥–∞–π—Ç–µ...")
        try:
            prize_video = FSInputFile(f"baraban_videos/{filename}.mp4")
            initial_caption = "üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω..."
            if spins == 2:
                initial_caption += " (2 —Å–ø–∏–Ω–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å \"‚ô†Ô∏è –ú–∞—Å—Ç—å\"!)"

            sent = await cb.message.answer_video(prize_video, caption=initial_caption)
            await loading_msg.delete()
        except Exception as e:
            await loading_msg.delete()
            await handle_error(cb.from_user.username, e, cb.from_user.id, 122)
            return

        # –∂–¥—ë–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        await asyncio.sleep(5)

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        prize_lines = []
        for idx, (p, a) in enumerate(prizes, start=1):
            if p == "coins":
                prize_lines.append(f"–°–ø–∏–Ω #{idx}: {format_balance(a)} mDrops")
            else:
                prize_lines.append(f"–°–ø–∏–Ω #{idx}: {a} GG")
        prize_text = "\n".join(prize_lines)

        summary_parts = []
        if total_coins:
            summary_parts.append(f"{format_balance(total_coins)} mDrops")
        if total_ggs:
            summary_parts.append(f"{total_ggs} GG")
        summary = " –∏ ".join(summary_parts) if summary_parts else "–Ω–∏—á–µ–≥–æ"

        # –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –≤–∏–¥–µ–æ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        try:
            await bot.edit_message_caption(
                chat_id=cb.message.chat.id,
                message_id=sent.message_id,
                caption=(
                        f"üéâ {await gsname(cb.from_user.first_name, int(uid))}, —Ç–≤–æ–π –ø—Ä–∏–∑:\n{prize_text}\n\n"
                        f"–ò—Ç–æ–≥–æ: {summary}\n\n"
                        f"–ö–î –±–∞—Ä–∞–±–∞–Ω–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ ({get_status(status)}): {int(final_cd_seconds // 3600)}—á {int((final_cd_seconds % 3600) // 60)}–º."
                        + (f"\n(–°—Ç–∞—Ç—É—Å \"‚ô†Ô∏è –ú–∞—Å—Ç—å\" –¥–∞—ë—Ç 2 —Å–ø–∏–Ω–∞.)" if status == 22 else "")
                )
            )
        except Exception:
            await cb.message.answer(
                f"üéâ {await gsname(cb.from_user.first_name, int(uid))}, —Ç–≤–æ–π –ø—Ä–∏–∑:\n{prize_text}\n\n"
                f"–ò—Ç–æ–≥–æ: {summary}\n\n"
                f"–ö–î –±–∞—Ä–∞–±–∞–Ω–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ ({get_status(status)}): {int(final_cd_seconds // 3600)}—á {int((final_cd_seconds % 3600) // 60)}–º."
                + (f"\n(–°—Ç–∞—Ç—É—Å \"‚ô†Ô∏è –ú–∞—Å—Ç—å\" –¥–∞—ë—Ç 2 —Å–ø–∏–Ω–∞.)" if status == 22 else "")
            )

        await cb.answer()
    except Exception as e:
        await handle_error(cb.from_user.username, e, cb.from_user.id, 122)


@dp.message(F.text.lower().in_(["–ø", "–ø—Ä–æ—Ñ–∏–ª—å", "/profile", "/profile@gmegadbot"]))
async def handle_balance(message: Message):
    try:
        user_id = message.from_user.id
        name = message.from_user.first_name

        data = await load_data(user_id)
        if not data:
            await create_user_data(user_id)
            data = await load_data(str(message.from_user.id))

        clan = data.get("clan", "–Ω–µ—Ç—É")
        await message.reply(
            f"üÜî –ü—Ä–æ—Ñ–∏–ª—å: {html.code(message.from_user.id)}\n{gline()}\n‚îú üë§ {html.italic(html.link(await gsname(message.from_user.first_name, message.from_user.id), f't.me/{message.from_user.username}'))}\n‚îú ‚ö°Ô∏è {html.italic('–°—Ç–∞—Ç—É—Å:')} {get_status(data['status'])}\n‚îú üõ° {html.italic(f'–ö–ª–∞–Ω: {clan}')}\n‚îú üü¢ {html.italic('–í—ã–∏–≥—Ä–∞–Ω–æ:')} {format_balance(data['won_coins'])} mDrops\n‚îú üóø {html.italic('–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ:')} {format_balance(data['lost_coins'])} mDrops\n{gline()}\nüí∞ {html.italic('–ë–∞–ª–∞–Ω—Å:')} {format_balance(data['coins'])} mDrops\nüíé {html.italic('–ë–∞–ª–∞–Ω—Å:')} {int(data['GGs'])} GGs",
            disable_web_page_preview=True)
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 104)


@dp.message(F.text.lower().in_(["–±–æ–Ω—É—Å", "/bonus", "bonus", "/bonus@gmegadbot"]))
async def hourly_bonus(message: Message):
    try:
        user_id = str(message.from_user.id)
        data = await load_data(user_id)
        if not data:
            await create_user_data(user_id)
            data = await load_data(str(message.from_user.id))

        now = datetime.now(timezone.utc)
        last_bonus = data.get("last_hourly_bonus")

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ int)
        try:
            status = int(data.get("status", 0))
        except Exception:
            status = 0

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –±–æ–Ω—É—Å–∞ –∏ –∫—É–ª–¥–∞—É–Ω –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if status == 22:
            bonus_min, bonus_max = 3000, 4500
            cooldown = timedelta(minutes=30)
            range_desc = "3000‚Äì4500 mDrops (—Å—Ç–∞—Ç—É—Å 22). –ö–î 30 –º–∏–Ω."
        elif 17 <= status <= 21:
            # –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è: 17 -> 500-750, 18 -> 750-1000, –∏ —Ç.–¥. (+250 –∫ –º–∏–Ω/–º–∞–∫—Å)
            step = status - 17
            bonus_min = 500 + step * 250
            bonus_max = 750 + step * 250
            # –±–æ–Ω—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ 3000
            bonus_min = min(bonus_min, 3000)
            bonus_max = min(bonus_max, 3000)
            cooldown = timedelta(hours=1)
            range_desc = f"{bonus_min}‚Äì{bonus_max} mDrops (—Å—Ç–∞—Ç—É—Å {status}). –ö–î 60 –º–∏–Ω."
        else:
            bonus_min, bonus_max = 50, 250
            cooldown = timedelta(hours=1)
            range_desc = f"{bonus_min}‚Äì{bonus_max} mDrops (–æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å). –ö–î 60 –º–∏–Ω."

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
        if last_bonus:
            last_time = datetime.fromisoformat(last_bonus)
            if now - last_time < cooldown:
                remaining = cooldown - (now - last_time)
                minutes = math.ceil(remaining.total_seconds() / 60)
                return await message.answer(
                    f"üòâ {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å. –í–µ—Ä–Ω–∏—Å—å –∑–∞ —Å–ª–µ–¥—É—é—â–∏–º —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç."
                )

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —á–∞—Ç
        try:
            member = await bot.get_chat_member(chat_id="@saycurse", user_id=message.from_user.id)
            if member.status in ["left", "kicked"]:
                return await message.answer(
                    '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, –≤—Å—Ç—É–ø–∏ –≤ <a href="https://t.me/saycurse">–Ω–∞—à —á–∞—Ç</a>.',
                    disable_web_page_preview=True
                )
        except Exception as e:
            return await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n{e}")

        # —Ä–∞—Å—á—ë—Ç –±–æ–Ω—É—Å–∞
        bonus = random.randint(bonus_min, bonus_max)

        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è: –Ω–µ –±–æ–ª–µ–µ 3000 (–¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 17‚Äì21)
        if status not in (22,) and bonus > 3000:
            bonus = 3000

        # –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        data["coins"] = data.get("coins", 0) + bonus
        data["last_hourly_bonus"] = now.isoformat()
        await save_data(user_id, data)

        # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        cd_minutes = int(cooldown.total_seconds() // 60)
        await message.answer(
            f"üéÅ {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –ø–æ–ª—É—á–∏–ª {bonus} mDrops!\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {range_desc}\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {cd_minutes} –º–∏–Ω—É—Ç."
        )
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 104)


@dp.message(F.text.in_(
    ["–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π", "/daily", "daily", "bonus2", "–±–æ–Ω—É—Å2", "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π", "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "/daily@gmegadbot"]))
async def daily_bonus(message: Message):
    try:
        user_id = str(message.from_user.id)
        data = await load_data(user_id)
        if not data:
            await create_user_data(user_id)
            data = await load_data(str(message.from_user.id))

        now = datetime.now(timezone.utc)
        last_daily = data.get("last_daily_bonus")
        streak = data.get("daily_streak", 0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
        if last_daily:
            last_time = datetime.fromisoformat(last_daily)
            if now - last_time < timedelta(hours=24):
                remaining = timedelta(hours=24) - (now - last_time)
                hours = remaining.seconds // 3600
                minutes = (remaining.seconds % 3600) // 60
                await message.answer(
                    f"üôÉ {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, –ø—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {hours}—á. {minutes}–º.")
                return

            # –°–±—Ä–æ—Å —Å—Ç—Ä–∏–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 48 —á–∞—Å–æ–≤
            if now - last_time > timedelta(hours=48):
                streak = 0

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ int)
        try:
            status = int(data.get("status", 0))
        except Exception:
            status = 0

        try:
            user_profile = await bot.get_chat(user_id)
            if "@gmegadbot" not in (user_profile.bio or ""):
                await message.answer(
                    f"üòâ {await gsname(message.from_user.first_name, message.from_user.id)}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, –≤—Å—Ç–∞–≤—å {html.code('@gmegadbot')} –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–±–∏–æ)!\n\n‚òùÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ (–ª–∏–º–∏—Ç –¢–µ–ª–µ–≥—Ä–∞–º)."
                )
                return
        except Exception as e:
            await handle_error(message.from_user.username, e, message.from_user.id, 101)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –±–æ–Ω—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == 22:
            base_min, base_max = 3000, 4500
            range_desc = "3000‚Äì4500 mDrops (—Å—Ç–∞—Ç—É—Å 22)."
        elif 17 <= status <= 21:
            # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è: –¥–ª—è status=17 –Ω–∞—á–∏–Ω–∞–µ–º —Å 1500‚Äì2250, –∑–∞—Ç–µ–º –ø—Ä–∏–±–∞–≤–ª—è–µ–º –ø–æ 500 –∫ –∫–∞–∂–¥–æ–º—É –∫—Ä–∞—é –∑–∞ —à–∞–≥
            step = status - 17
            base_min = 1500 + step * 500
            base_max = 2250 + step * 500
            # –û–±—Ä–µ–∑–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å–≤–µ—Ä—Ö—É –¥–æ 3000
            base_min = min(base_min, 3000)
            base_max = min(base_max, 3000)
            range_desc = f"{base_min}‚Äì{base_max} mDrops (—Å—Ç–∞—Ç—É—Å {status}). –ò—Ç–æ–≥ –Ω–µ –±–æ–ª—å—à–µ 3000."
        else:
            base_min, base_max = 500, 1000
            range_desc = f"{base_min}‚Äì{base_max} mDrops (–æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å)."

        # –†–æ–∑—ã–≥—Ä—ã—à –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏ —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∏–∫
        bonus_base = random.randint(base_min, base_max)
        streak = min(streak + 1, 7)
        bonus_total = bonus_base * streak

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞
        if 17 <= status <= 21:
            bonus_total = min(bonus_total, 3000)
        elif status == 22:
            bonus_total = min(bonus_total, 4500)
        # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

        # –ù–∞—á–∏—Å–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data["coins"] = data.get("coins", 0) + bonus_total
        data["last_daily_bonus"] = now.isoformat()
        data["daily_streak"] = streak
        await save_data(user_id, data)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"üòé {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ‚Äî <b>{bonus_total} mDrops</b>!\n\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω –±–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {range_desc}\n"
            f"‚úä –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {bonus_base} √ó {streak} (–º–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç—Ä–∏–∫–∞)\n"
            f"‚è≥ –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–º! \nüî• –¢–≤–æ–π —Å—Ç—Ä–∏–∫: {streak}/7",
            disable_web_page_preview=True
        )
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 101)


CHANNEL_ID = -1002773120685  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ –∞–π–¥—ñ —Ç–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É

PRIZES = [
    ("coins", 1000, "1k"),
    ("coins", 1000, "1k"),
    ("coins", 1000, "1k"),
    ("coins", 1000, "1k"),
    ("coins", 1000, "1k"),
    ("coins", 1000, "1k"),
    ("coins", 1000, "1k"),
    ("coins", 1000, "1k"),
    ("coins", 2500, "2.5k"),
    ("coins", 2500, "2.5k"),
    ("coins", 2500, "2.5k"),
    ("coins", 5000, "5k"),
    ("coins", 5000, "5k"),
    ("coins", 10000, "10k"),
    ("GGs", 1, "1gg"),
    ("GGs", 1, "1gg"),
    ("GGs", 1, "1gg"),
    ("GGs", 2, "2gg"),
    ("GGs", 2, "2gg"),
    ("GGs", 3, "3gg"),
    ("GGs", 25, "25gg"),
]


def choose_prize():
    return random.choice(PRIZES)


@dp.message(F.text.lower().in_(["/baraban", "–±–∞—Ä–∞–±–∞–Ω", "/baraban@gmegadbot"]))
async def baraban_handler(message: types.Message):
    user_id = str(message.from_user.id)
    name = message.from_user.first_name

    if not await load_data(user_id):
        await create_user_data(user_id)
    data = await load_data(user_id)

    now = time.time()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ int)
    try:
        status = int(data.get("status", 0))
    except Exception:
        status = 0

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—É–ª–¥–∞—É–Ω–∞
    base_cd_seconds = 12 * 3600  # –±–∞–∑–æ–≤—ã–π –ö–î ‚Äî 12 —á–∞—Å–æ–≤
    reduction_per_status = 5 * 60  # —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ö–î –Ω–∞ –∫–∞–∂–¥—ã–π —Å—Ç–∞—Ç—É—Å ‚Äî 5 –º–∏–Ω—É—Ç
    min_cd_seconds = 40 * 60  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ö–î ‚Äî 40 –º–∏–Ω—É—Ç

    # –°—Ç–∞—Ç—É—Å 22 ‚Äî –æ—Å–æ–±—ã–π: –ö–î 30 –º–∏–Ω—É—Ç –∏ 2 —Å–ø–∏–Ω–∞
    if status == 22:
        final_cd_seconds = 30 * 60
        spins = 2
    else:
        reduction = status * reduction_per_status
        final_cd_seconds = max(min_cd_seconds, base_cd_seconds - reduction)
        spins = 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É–ª–¥–∞—É–Ω–∞
    if "baraban_cooldown" in data and now < data["baraban_cooldown"]:
        remaining = int(data["baraban_cooldown"] - now)
        hrs = remaining // 3600
        mins = (remaining % 3600) // 60
        return await message.reply(
            f"‚è≥ {name}, —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ä–∞–±–∞–Ω –º–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å —á–µ—Ä–µ–∑ {hrs}—á {mins}–º."
        )

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        member = await bot.get_chat_member(CHANNEL_ID, int(user_id))
        if member.status in ("left", "kicked"):
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öúÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/saycursed")]
            ])
            return await message.reply(
                f'‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {html.link("–∫–∞–Ω–∞–ª", "https://t.me/saycursed")}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ üéÅ',
                disable_web_page_preview=True,
                reply_markup=kb
            )
    except Exception as e:
        return await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: {e}")

    # –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–∑–∞ (–±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Ñ–∞–π–ª –¥–ª—è –≤–∏–¥–µ–æ/–ø—Ä–µ–≤—å—é)
    ptype, amount, filename = choose_prize()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–∑–∞–≥—Ä—É–∑–∫—É" –∏ –≤–∏–¥–µ–æ –±–∞—Ä–∞–±–∞–Ω–∞ (—É–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ 2 —Å–ø–∏–Ω–∞)
    msg = await message.reply("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ, –æ–∂–∏–¥–∞–π—Ç–µ...")
    try:
        prize_video = FSInputFile(f"baraban_videos/{filename}.mp4")
        initial_caption = "üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω..."
        if spins == 2:
            initial_caption += " (2 —Å–ø–∏–Ω–∞ –∑–∞ —Å—Ç–∞—Ç—É—Å \"‚ô†Ô∏è –ú–∞—Å—Ç—å\"!)"

        sent = await message.reply_video(prize_video, caption=initial_caption)
        await msg.delete()
    except Exception as e:
        await msg.delete()
        await handle_error(message.from_user.username, e, message.from_user.id, 122)
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏–Ω—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑—ã
    prizes = []  # —Å–ø–∏—Å–æ–∫ (—Ç–∏–ø, —Å—É–º–º–∞)
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑ (–º—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –µ–≥–æ –≤—ã—à–µ)
    prizes.append((ptype, amount))

    # –µ—Å–ª–∏ 2 —Å–ø–∏–Ω–∞ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä–æ–π
    if spins == 2:
        p2, a2, f2 = choose_prize()
        prizes.append((p2, a2))

    total_coins = 0
    total_ggs = 0
    for p, a in prizes:
        if p == "coins":
            total_coins += a
        else:
            total_ggs += a

    # –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑—ã
    if total_coins:
        data["coins"] = data.get("coins", 0) + total_coins
    if total_ggs:
        data["GGs"] = data.get("GGs", 0) + total_ggs

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ö–î (—Å–µ–∫—É–Ω–¥—ã –æ—Ç now)
    data["baraban_cooldown"] = now + final_cd_seconds
    await save_data(user_id, data)

    # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await asyncio.sleep(5)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Ç–æ–≥–æ–≤
    prize_lines = []
    for idx, (p, a) in enumerate(prizes, start=1):
        if p == "coins":
            prize_lines.append(f"–°–ø–∏–Ω #{idx}: {format_balance(a)} mDrops")
        else:
            prize_lines.append(f"–°–ø–∏–Ω #{idx}: {a} GG")
    prize_text = "\n".join(prize_lines)

    summary_parts = []
    if total_coins:
        summary_parts.append(f"{format_balance(total_coins)} mDrops")
    if total_ggs:
        summary_parts.append(f"{total_ggs} GG")
    summary = " –∏ ".join(summary_parts) if summary_parts else "–Ω–∏—á–µ–≥–æ"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –≤–∏–¥–µ–æ —Å –∏—Ç–æ–≥–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ö–î/—Å–ø–∏–Ω–∞—Ö
    try:
        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=sent.message_id,
            caption=(
                    f"üéâ {await gsname(name, message.from_user.id)}, —Ç–≤–æ–π –ø—Ä–∏–∑:\n{prize_text}\n\n"
                    f"–ò—Ç–æ–≥–æ: {summary}\n\n"
                    f"–ö–î –±–∞—Ä–∞–±–∞–Ω–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ ({get_status(status)}): {int(final_cd_seconds // 3600)}—á {int((final_cd_seconds % 3600) // 60)}–º."
                    + (f"\n(–°—Ç–∞—Ç—É—Å \"‚ô†Ô∏è –ú–∞—Å—Ç—å\" –¥–∞—ë—Ç 2 —Å–ø–∏–Ω–∞.)" if status == 22 else "")
            )
        )
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        await message.reply(
            f"üéâ {await gsname(name, message.from_user.id)}, —Ç–≤–æ–π –ø—Ä–∏–∑:\n{prize_text}\n\n"
            f"–ò—Ç–æ–≥–æ: {summary}\n\n"
            f"–ö–î –±–∞—Ä–∞–±–∞–Ω–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ ({get_status(status)}): {int(final_cd_seconds // 3600)}—á {int((final_cd_seconds % 3600) // 60)}–º."
            + (f"\n(–°—Ç–∞—Ç—É—Å \"‚ô†Ô∏è –ú–∞—Å—Ç—å\" –¥–∞—ë—Ç 2 —Å–ø–∏–Ω–∞.)" if status == 22 else "")
        )


class DonateState(StatesGroup):
    waiting_for_amount = State()


@dp.message(F.text.lower().in_(["/donate", "/donation", "–¥–æ–Ω–∞—Ç"]))
async def donate_menu(message: Message):
    if message.chat.type != "private":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üçì –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url="t.me/gmegadbot")]]
        )
        return await message.reply(
            f"üçì {await gsname(message.from_user.first_name, message.from_user.id)}, –¥–æ–Ω–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ {html.link('–õ–° —Å –±–æ—Ç–æ–º', 't.me/gmegadbot')}!",
            reply_markup=kb, disable_web_page_preview=True
        )

    text = (
        "üõç <b>–î–æ–Ω–∞—Ç-–º–µ–Ω—é</b> üõí\n"
        "---------------------\n"
        "üèß <b>–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:</b>\n"
        "‚≠êÔ∏è = 1 GGs \n"
        "1 GGs ‚âà 3500 mDrops\n\n"
        "üíé <b>–û–ø—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞:</b>\n"
        "500 ‚≠êÔ∏è = 1000 GGs\n"
        "1000 ‚≠êÔ∏è = 3000 GGs\n"
        "5000 ‚≠êÔ∏è = 20'000 GGs\n"
        "---------------------\n"
        "‚ö°Ô∏è –°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç!\n"
        "–ö–∞–∂–¥–∞—è –≤–ª–æ–∂–µ–Ω–Ω–∞—è –≤–∞–º–∏ –∫–æ–ø–µ–π–∫–∞ —É–ª—É—á—à–∞–µ—Ç –±–æ—Ç–∞. üí´"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å GGs", callback_data="donate_buy")]
        # [InlineKeyboardButton(text="üî• –¢–æ–ø –î–æ–Ω–∞—Ç–µ—Ä–æ–≤", callback_data="donate_top")]
    ])
    await message.reply(text, reply_markup=kb, parse_mode="HTML")


@dp.callback_query(F.data == "donate_buy")
async def donate_buy_menu(callback: CallbackQuery):
    name = callback.from_user.first_name
    text = (
        f"üíé <b>{name}</b>, —Å–∫–æ–ª—å–∫–æ GGs —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å?\n"
        "¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n"
        "üìä 1 ‚≠êÔ∏è = 1 GGs\n"
        "‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤ GGs, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å,\n"
        "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ üëá"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="50 GGs", callback_data="buy:50"),
            InlineKeyboardButton(text="100 GGs", callback_data="buy:100"),
            InlineKeyboardButton(text="250 GGs", callback_data="buy:250")
        ],
        [
            InlineKeyboardButton(text="üçì -50% 1000 GGs", callback_data="buy:1000:500"),
            InlineKeyboardButton(text="üî• -67% 3000 GGs", callback_data="buy:3000:1000")
        ],
        [
            InlineKeyboardButton(text="üå∂ -75% 20000 GGs", callback_data="buy:20000:5000")
        ],
        [
            InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="donate_custom")
        ]
    ])
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")


@dp.callback_query(F.data == "donate_custom")
async def donate_custom(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GGs, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:\n\nüìä 1 ‚≠êÔ∏è = 1 GGs")
    await state.set_state(DonateState.waiting_for_amount)


@dp.message(DonateState.waiting_for_amount)
async def process_custom_amount(message: Message, state: FSMContext):
    text = (message.text or "").strip().lower()
    try:
        ggs_amount = parse_bet_input(text) if not text.isdigit() else int(text)
    except Exception:
        ggs_amount = -1
    if ggs_amount <= 0:
        return await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 1–∫).")

    stars_price = ggs_amount
    prices = [LabeledPrice(label=f"{ggs_amount} GGs", amount=int(stars_price))]

    await bot.send_invoice(
        chat_id=message.from_user.id,
        title="–ü–æ–∫—É–ø–∫–∞ GGs",
        description=f"{ggs_amount} GGs –∑–∞ {stars_price} ‚≠êÔ∏è",
        payload=f"donate_{ggs_amount}_{stars_price}",
        provider_token="",
        currency="XTR",
        prices=prices,
        start_parameter="donate"
    )
    await state.clear()


@dp.callback_query(F.data.startswith("buy:"))
async def donate_process(callback: CallbackQuery):
    parts = callback.data.split(":")
    try:
        ggs_amount = int(parts[1])
    except Exception:
        return await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
    stars_price = int(parts[2]) if len(parts) > 2 else ggs_amount
    prices = [LabeledPrice(label=f"{ggs_amount} GGs", amount=int(stars_price))]

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ü–æ–∫—É–ø–∫–∞ GGs",
        description=f"{ggs_amount} GGs –∑–∞ {stars_price} ‚≠êÔ∏è",
        payload=f"donate_{ggs_amount}_{stars_price}",
        provider_token="",
        currency="XTR",
        prices=prices,
        start_parameter="donate"
    )


@dp.pre_checkout_query(lambda query: True)
async def checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def check_and_set_top1_status(message, user_id: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –∑–Ω–∞–π—Ç–∏ —Ç–æ–ø-1 –ø–æ total_donated
    cursor.execute("SELECT id FROM users ORDER BY total_donated DESC LIMIT 1")
    row = cursor.fetchone()

    if row and str(message.from_user.id) == str(row[0]):
        # –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —É –ë–î
        cursor.execute("UPDATE users SET status = 10 WHERE id = ?", (user_id,))
        conn.commit()
        await message.answer("üëë –¢—ã —Å—Ç–∞–ª –¢–æ–ø-1 –¥–æ–Ω–∞—Ç–µ—Ä–æ–º! –¢–µ–±–µ –≤—ã–¥–∞–Ω —Å—Ç–∞—Ç—É—Å #10.")

    conn.close()


async def get_top_donators(limit=10):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT id, total_donated
        FROM users
        ORDER BY total_donated DESC
        LIMIT ?
    """, (limit,))
    rows = cursor.fetchall()
    conn.close()

    text = "üî• –¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:\n\n"
    for i, (uid, donated) in enumerate(rows, 1):
        text += f"{i}. <a href='tg://user?id={uid}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> ‚Äî {donated:.2f}\n"
    return text


# ===== —É—Å–ø—ñ—à–Ω–∞ –æ–ø–ª–∞—Ç–∞ =====
@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def got_payment(message: Message):
    payment = message.successful_payment
    payload = payment.invoice_payload.split("_")
    ggs_amount = int(payload[1])
    user_id = str(message.from_user.id)

    data = await load_data(user_id)
    if user_id not in data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    # –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ GGs
    data["GGs"] += ggs_amount
    # –¥–æ–¥–∞—î–º–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–Ω–∞—Ç—ñ–≤
    data["total_donated"] = data.get("total_donated", 0) + ggs_amount
    await save_data(user_id, data)

    await message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –æ–≥—Ä–æ–º–Ω–æ–µ –∑–∞ –ø–æ–∫—É–ø–∫—É GGs!\n\n–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {ggs_amount} GGs –Ω–∞ –±–∞–ª–∞–Ω—Å üéâ")

    # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–ø —ñ –≤–∏–¥–∞—î–º–æ —Ç–æ–ø1 –¥–æ–Ω–∞—Ç–æ—Ä, —Ç—Ä–µ–±–∞ –¥–æ—Ä–æ–±–∏—Ç–∏


@dp.message(F.text.in_(["/referrals", "—Ä–µ—Ñ", "ref", "/referrals@gmegadbot"]))
async def referrals_info(message: Message):
    user_id = str(message.from_user.id)
    data = await load_data(str(message.from_user.id))

    if not data:
        await create_user_data(user_id)
        data = await load_data(str(message.from_user.id))

    count = data.get("referrals", 0)
    link = f"https://t.me/gmegadbot?start={user_id}"
    await message.reply(
        f'‚úåÔ∏è {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç–≤–æ–∏ —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª—ã: {count} —á–µ–ª–æ–≤–µ–∫.\n‚õì –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {html.code(link)}',
        disable_web_page_preview=True)


@dp.message(F.text.lower().startswith("–ø—Ä–æ–º–æ"))
async def handle_promo(message: Message):
    try:
        parts = message.text.strip().split()

        if len(parts) != 2:
            return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ø—Ä–æ–º–æ <–Ω–∞–∑–≤–∞–Ω–∏–µ>")

        if not await load_data(str(message.from_user.id)):
            await create_user_data(message.from_user.id)

        name = parts[1]
        user_id = str(message.from_user.id)

        import sqlite3, json
        conn = sqlite3.connect("data.db")
        cursor = conn.cursor()

        cursor.execute("SELECT reward, claimed FROM promos WHERE name = ?", (name,))
        row = cursor.fetchone()

        if not row:
            conn.close()
            return await message.reply(
                f"‚ö†Ô∏è {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        reward, claimed_json = row
        claimed = json.loads(claimed_json)

        if user_id in claimed:
            conn.close()
            return await message.reply(
                f"‚ö†Ô∏è {await gsname(message.from_user.first_name, message.from_user.id)}, –≤—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")

        # –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–æ–∫
        claimed.append(user_id)
        cursor.execute("UPDATE promos SET claimed = ? WHERE name = ?", (json.dumps(claimed), name))

        conn.commit()
        conn.close()

        user_data = await load_data(user_id)
        user_data["coins"] += reward
        await save_data(user_id, user_data)

        await message.reply(f"‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b>!\nüéÅ –ü–æ–ª—É—á–∏–ª–∏: {format_balance(reward)} mDrops")
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 106)


class CreateCheckStates(StatesGroup):
    awaiting_amount = State()  # –∂–¥—ë–º –≤–≤–æ–¥ —Å—É–º–º—ã –Ω–∞ –æ–¥–Ω–æ–≥–æ (–µ—Å–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
    awaiting_count = State()  # –∂–¥—ë–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–µ—Å–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)


# ---- –≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ----
PRESET_AMOUNTS = [100, 1_000, 10_000, 100_000]
PRESET_COUNTS = [1, 5, 10, 100]
MAX_TOTAL = 1_000_000
MAX_PER_USER = 100_000
UNLOCK_PRICE = 500000
ADMIN_ID = "8493326566"  # —Ç–≤–æ–π id, —É –Ω–µ–≥–æ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π


def mk_inline_keyboard(rows: List[List[InlineKeyboardButton]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=rows)


@dp.message(F.text.lower().in_(["/check", "—á–µ–∫–∏", "—á–µ–∫"]))
async def cmd_check_panel(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /check ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —á–µ–∫–æ–≤ (—Å–æ–∑–¥–∞—Ç—å / –º–æ–∏ —á–µ–∫–∏ / –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø).
    """
    # –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if message.chat.type != "private":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üçì –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=f"https://t.me/{(await bot.get_me()).username}")]
        ])
        return await message.reply(
            f"üçì {await gsname(message.from_user.first_name, message.from_user.id)}, —á–µ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            reply_markup=kb, disable_web_page_preview=True
        )

    user_id = str(message.from_user.id)
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    has_unlock = bool(data.get("check_unlocked", False))

    kb_rows = []
    kb_rows.append([InlineKeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data="check_panel:create")])
    kb_rows.append([InlineKeyboardButton(text="üìÇ –ú–æ–∏ —á–µ–∫–∏", callback_data="check_panel:my")])
    if not has_unlock:
        kb_rows.append([InlineKeyboardButton(text=f"üîí –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø ({format_balance(UNLOCK_PRICE)} mDrops)",
                                             callback_data="buy_check_unlock")])
    kb_rows.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="check_panel:close")])

    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    await message.answer(
        f"üçì {await gsname(message.from_user.first_name, message.from_user.id)}, –ø–∞–Ω–µ–ª—å —á–µ–∫–æ–≤:\n\n"
        "‚û°Ô∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫–∏, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ–∫–∏ –∏ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø (–µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ).",
        reply_markup=kb
    )


# ---- —Å—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã ----
@dp.callback_query(F.data == "check_panel:create")
async def check_panel_create_start(query: CallbackQuery, state: FSMContext):
    user_id = str(query.from_user.id)
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if not bool(data.get("check_unlocked", False)):
        kb = mk_inline_keyboard([[InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø ({format_balance(UNLOCK_PRICE)} mDrops)",
                                                       callback_data="buy_check_unlock")]])
        try:
            await query.message.edit_text(
                f"üîí –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫–∏, –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî {format_balance(UNLOCK_PRICE)} mDrops.",
                reply_markup=kb
            )
        except:
            pass
        return await query.answer()

    balance = int(data.get("coins", 0))

    # –ö–Ω–æ–ø–∫–∏ —Å—É–º–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–≤–∞—Ç–∏—Ç –±–∞–ª–∞–Ω—Å–∞ (—Ö–æ—Ç—è —ç—Ç–æ —Å—É–º–º–∞ –Ω–∞ –æ–¥–Ω–æ–≥–æ; –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º,
    # –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ—Ç–æ–º –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1)
    kb_rows = []
    for amt in PRESET_AMOUNTS:
        if balance >= amt:
            kb_rows.append([InlineKeyboardButton(text=f"{format_balance(amt)}", callback_data=f"check_amount:{amt}")])

    # –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∏ –æ—Ç–º–µ–Ω—É
    kb_rows.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="check_amount:custom")])
    kb_rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="check_cancel")])

    kb = mk_inline_keyboard(kb_rows)
    try:
        await query.message.edit_text(
            f"‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ ‚Äî —à–∞–≥ 1/2</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –æ–¥–Ω–æ–≥–æ (–º–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é):",
            parse_mode="HTML",
            reply_markup=kb
        )
    except:
        await query.answer()

    # –æ—á–∏—â–∞–µ–º —Å—Ç–µ–π—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await state.clear()


# ---- callback: –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—É–º–º–∞ (preset –∏–ª–∏ custom) ----
@dp.callback_query(F.data.startswith("check_amount:"))
async def check_amount_callback(query: CallbackQuery, state: FSMContext):
    _, payload = query.data.split(":", 1)
    user_id = str(query.from_user.id)
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)
    balance = int(data.get("coins", 0))

    if payload == "custom":
        await state.set_state(CreateCheckStates.awaiting_amount)
        try:
            await query.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –æ–¥–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 2.5–∫).")
        except:
            pass
        return await query.answer()

    # preset amount chosen
    try:
        per_user = int(payload)
    except:
        return await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.", show_alert=True)

    # –ø—Ä–æ–≤–µ—Ä–∫–∏ per_user
    if str(user_id) != ADMIN_ID and per_user > MAX_PER_USER:
        return await query.answer(f"–ú–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–¥–Ω–æ–≥–æ ‚Äî {format_balance(MAX_PER_USER)} mDrops.", show_alert=True)
    if per_user <= 0:
        return await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.", show_alert=True)

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await state.update_data(per_user=int(per_user))
    await show_counts_menu(query, state, per_user, balance)
    return await query.answer()


# ---- helper: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–Ω–æ–ø–∫–∏ + —Ä—É—á–Ω–æ–π –≤–≤–æ–¥) ----
async def show_counts_menu(query: CallbackQuery, state: FSMContext, per_user: int, balance: int):
    # –º–∞–∫—Å–∏–º—É–º –ø–æ –±–∞–ª–∞–Ω—Å—É –∏ –ª–∏–º–∏—Ç—É
    max_by_balance = balance // per_user if per_user > 0 else 0
    max_by_limit = MAX_TOTAL // per_user if per_user > 0 else 0
    max_count = min(max_by_balance, max_by_limit)
    if max_count <= 0:
        try:
            await query.message.edit_text("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ª—é–±–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π.")
        except:
            pass
        await state.clear()
        return

    # —Å–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏: –±–µ—Ä—ë–º PRESET_COUNTS, —Ñ–∏–ª—å—Ç—Ä—É–µ–º <= max_count, –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –º–∞–∫—Å (–µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Å–ø–∏—Å–∫–µ)
    kb_rows = []
    added = set()
    for c in PRESET_COUNTS:
        if c <= max_count:
            kb_rows.append([InlineKeyboardButton(text=str(c), callback_data=f"check_count:{c}")])
            added.add(c)

    # –µ—Å–ª–∏ max_count –Ω–µ–±–æ–ª—å—à–æ–π –∏ –Ω–µ —Ä–∞–≤–µ–Ω preset, –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É —Å max_count
    if max_count not in added:
        kb_rows.append([InlineKeyboardButton(text=str(max_count), callback_data=f"check_count:{max_count}")])

    kb_rows.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="check_count:custom")])
    kb_rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="check_cancel")])
    kb = mk_inline_keyboard(kb_rows)

    try:
        await query.message.edit_text(
            f"‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ ‚Äî —à–∞–≥ 2/2</b>\n\n"
            f"–ù–∞ –æ–¥–Ω–æ–≥–æ: <b>{format_balance(per_user)}</b> mDrops\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏):",
            parse_mode="HTML",
            reply_markup=kb
        )
    except:
        pass


# ---- callback: –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (preset –∏–ª–∏ custom) ----
@dp.callback_query(F.data.startswith("check_count:"))
async def check_count_callback(query: CallbackQuery, state: FSMContext):
    _, payload = query.data.split(":", 1)
    user_id = str(query.from_user.id)
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)
    balance = int(data.get("coins", 0))

    if payload == "custom":
        await state.set_state(CreateCheckStates.awaiting_count)
        try:
            await query.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        except:
            pass
        return await query.answer()

    try:
        count = int(payload)
    except:
        return await query.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", show_alert=True)

    # –±–µ—Ä—ë–º per_user –∏–∑ state
    st = await state.get_data()
    per_user = st.get("per_user")
    if per_user is None:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–µ–π—Ç –ø–æ—Ç–µ—Ä—è–Ω ‚Äî –ø—Ä–æ—Å–∏–º —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å —Å—É–º–º—É
        await state.clear()
        return await query.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É.", show_alert=True)

    # –≤–∞–ª–∏–¥–∞—Ü–∏—è: total <= MAX_TOTAL –∏ <= balance
    total = count * per_user
    if total > MAX_TOTAL and user_id != ADMIN_ID:
        return await query.answer(f"–°—É–º–º–∞ —á–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {format_balance(MAX_TOTAL)} mDrops.", show_alert=True)
    if total > balance:
        return await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.", show_alert=True)

    # –≤—Å—ë –æ–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º confirm_check callback)
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=f"confirm_check:{count}:{per_user}")
    ], [
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="check_cancel")
    ]])
    try:
        await query.message.edit_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:\n\n"
            f"‚õ≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{count}</b>\n"
            f"üí∏ –ù–∞ –æ–¥–Ω–æ–≥–æ: <b>{format_balance(per_user)}</b>\n"
            f"üî¢ –ò—Ç–æ–≥–æ: <b>{format_balance(total)}</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫.",
            parse_mode="HTML",
            reply_markup=kb
        )
    except:
        pass

    # –æ—á–∏—â–∞–µ–º —Å—Ç–µ–π—Ç
    await state.clear()
    return await query.answer()


# ---- message handler: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—É–º–º—ã (state awaiting_amount) ----
@dp.message(CreateCheckStates.awaiting_amount)
async def manual_amount_input(msg: Message, state: FSMContext):
    user_id = str(msg.from_user.id)
    text = (msg.text or "").strip()
    try:
        if "–∫" in text.lower():
            per_user = parse_bet_input(text)
        else:
            per_user = int(text)
    except Exception:
        await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 2.5–∫")
        return

    if per_user <= 0:
        await msg.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return

    if user_id != ADMIN_ID and per_user > MAX_PER_USER:
        await msg.reply(f"–ú–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–¥–Ω–æ–≥–æ ‚Äî {format_balance(MAX_PER_USER)} mDrops.")
        await state.clear()
        return

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)
    balance = int(data.get("coins", 0))

    if per_user > balance:
        await msg.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–∞–∂–µ –¥–ª—è –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å —ç—Ç–æ–π —Å—É–º–º–æ–π.")
        await state.clear()
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º per_user –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º counts –º–µ–Ω—é
    await state.update_data(per_user=int(per_user))
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é - –Ω–æ query —É –Ω–∞—Å –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É counts –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ show_counts_menu
    max_by_balance = balance // per_user
    max_by_limit = MAX_TOTAL // per_user
    max_count = min(max_by_balance, max_by_limit)
    if max_count <= 0:
        await msg.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ª—é–±–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π.")
        await state.clear()
        return

    kb_rows = []
    added = set()
    for c in PRESET_COUNTS:
        if c <= max_count:
            kb_rows.append([InlineKeyboardButton(text=str(c), callback_data=f"check_count:{c}")])
            added.add(c)
    if max_count not in added:
        kb_rows.append([InlineKeyboardButton(text=str(max_count), callback_data=f"check_count:{max_count}")])
    kb_rows.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="check_count:custom")])
    kb_rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="check_cancel")])
    kb = mk_inline_keyboard(kb_rows)

    await msg.reply(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—É–º–º—É: <b>{format_balance(per_user)}</b> mDrops.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:",
        parse_mode="HTML",
        reply_markup=kb
    )
    await state.clear()  # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ; –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ callback'–∏


# ---- message handler: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (state awaiting_count) ----
@dp.message(CreateCheckStates.awaiting_count)
async def manual_count_input(msg: Message, state: FSMContext):
    user_id = str(msg.from_user.id)
    text = (msg.text or "").strip()
    if not text.isdigit():
        await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        await state.clear()
        return
    count = int(text)
    if count <= 0:
        await msg.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        await state.clear()
        return

    st = await state.get_data()
    per_user = st.get("per_user")
    if per_user is None:
        await msg.reply("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –æ–¥–Ω–æ–≥–æ.")
        await state.clear()
        return

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)
    balance = int(data.get("coins", 0))

    total = count * per_user
    if total > MAX_TOTAL and user_id != ADMIN_ID:
        await msg.reply(f"–°—É–º–º–∞ —á–µ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {format_balance(MAX_TOTAL)} mDrops.")
        await state.clear()
        return
    if total > balance:
        await msg.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
        await state.clear()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data=f"confirm_check:{count}:{per_user}")
    ], [
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="check_cancel")
    ]])
    await msg.reply(
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:\n\n"
        f"‚õ≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{count}</b>\n"
        f"üí∏ –ù–∞ –æ–¥–Ω–æ–≥–æ: <b>{format_balance(per_user)}</b>\n"
        f"üî¢ –ò—Ç–æ–≥–æ: <b>{format_balance(total)}</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫.",
        parse_mode="HTML",
        reply_markup=kb
    )
    await state.clear()


@dp.callback_query(F.data == "buy_check_unlock")
async def buy_check_unlock_callback(query: CallbackQuery):
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–∫–∞–º.
    –ü–æ–ø—ã—Ç–∫–∞ 1: –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ try_pay_card (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞).
    –ü–æ–ø—ã—Ç–∫–∞ 2: —Å–ø–∏—Å–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ user['coins'].
    """
    await query.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –≤ UI

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –õ–° ‚Äî –ø–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
    try:
        if query.message and getattr(query.message, "chat", None) and query.message.chat.type != "private":
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üçì –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=f"https://t.me/{(await bot.get_me()).username}")]
            ])
            return await query.message.edit_text("üîí –ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
                                                 reply_markup=kb)
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        pass

    user_id = str(query.from_user.id)

    # –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî —Å–æ–æ–±—â–∞–µ–º
    if bool(data.get("check_unlocked", False)):
        try:
            await query.message.edit_text("üîì –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ–∫–æ–≤.")
        except:
            await query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ–∫–æ–≤.", show_alert=True)
        return

    price = float(UNLOCK_PRICE)

    # 1) –ü–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è try_pay_card)
    paid_by_card = False
    card_used = None
    card_msg = None
    try:
        if "try_pay_card" in globals():
            # try_pay_card –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict {"success": True/False, "comment": "...", "card": "..."}
            res = await try_pay_card(user_id, price, note="–ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–∫–∞–º")
            if isinstance(res, dict) and res.get("success"):
                paid_by_card = True
                card_used = res.get("card")
                card_msg = res.get("comment") or "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —É—Å–ø–µ—à–Ω–∞"
    except Exception:
        # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–ø—ã—Ç–∫—É —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞
        paid_by_card = False

    if paid_by_card:
        # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ‚Äî –¥–∞—ë–º –¥–æ—Å—Ç—É–ø –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data["check_unlocked"] = True
        await save_data(user_id, data)

        # –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        masked = None
        if card_used:
            try:
                masked = f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ {str(card_used)[-4:]}"
            except Exception:
                masked = str(card_used)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data="check_panel:create")],
            [InlineKeyboardButton(text="üìÇ –ú–æ–∏ —á–µ–∫–∏", callback_data="check_panel:my")]
        ])
        msg_lines = [f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ–∫–æ–≤ –∫—É–ø–ª–µ–Ω –∑–∞ {format_balance(price)} mDrops (–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π)."]
        if masked:
            msg_lines.append(f"–ö–∞—Ä—Ç–∞: <code>{masked}</code>")
        if card_msg:
            msg_lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {card_msg}")
        try:
            await query.message.edit_text("\n".join(msg_lines), parse_mode="HTML", reply_markup=kb)
        except:
            await query.answer("–î–æ—Å—Ç—É–ø –∫—É–ø–ª–µ–Ω (–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π).", show_alert=True)
        return

    # 2) –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    balance = float(data.get("coins", 0))
    if balance >= price:
        data["coins"] = balance - price
        data["check_unlocked"] = True
        await save_data(user_id, data)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data="check_panel:create")],
            [InlineKeyboardButton(text="üìÇ –ú–æ–∏ —á–µ–∫–∏", callback_data="check_panel:my")]
        ])
        try:
            await query.message.edit_text(
                f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ–∫–æ–≤ –∫—É–ø–ª–µ–Ω –∑–∞ {format_balance(price)} mDrops (—Å–ø–∏—Å–∞–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞).",
                parse_mode="HTML",
                reply_markup=kb
            )
        except:
            await query.answer("–î–æ—Å—Ç—É–ø –∫—É–ø–ª–µ–Ω. –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.", show_alert=True)
        return

    # 3) –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
    need = price - balance
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="bank")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="check_panel:close")]
    ])
    try:
        await query.message.edit_text(
            f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞.\n"
            f"–ù—É–∂–Ω–æ: {format_balance(price)} mDrops\n"
            f"–£ –≤–∞—Å: {format_balance(balance)} mDrops\n"
            f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {format_balance(need)} mDrops\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Å –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞—Ä—Ç–∞).",
            parse_mode="HTML",
            reply_markup=kb
        )
    except:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)


# ---- cancel callback (–æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è) ----
@dp.callback_query(F.data == "check_cancel")
async def check_cancel_callback(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
    except:
        pass
    try:
        await query.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except:
        pass
    return await query.answer()


@dp.callback_query(F.data.startswith("confirm_check:"))
async def confirm_check_callback_panel(query: CallbackQuery):
    """–†–æ–±–æ—á–∏–π confirm_check handler –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º —Ç–∞ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫."""
    try:
        # –®–≤–∏–¥–∫–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ, —â–æ–± —É–±—Ä–∞—Ç–∏ "—á–∞—Å–∏–∫–∏" –≤ UI
        await query.answer()

        # –õ–æ–≥ –¥–ª—è –¥–µ–±–∞–≥—É

        # –†–æ–∑–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ
        parts = query.data.split(":")
        if len(parts) != 3:
            await query.message.edit_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞.")
            return

        _, count_s, per_user_s = parts
        try:
            count = int(count_s)
            per_user = int(per_user_s)
        except ValueError:
            await query.message.edit_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (—á–∏—Å–ª–æ/—Å—É–º–º–∞).")
            return

        user_id = str(query.from_user.id)
        data = await load_data(user_id)
        if not data:
            await create_user_data(user_id)
            data = await load_data(user_id)

        # –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–Ω—è–º
        total_cost = count * per_user
        needs_unlock = not bool(data.get("check_unlocked", False))
        total_with_unlock = total_cost + (UNLOCK_PRICE if needs_unlock else 0)

        if int(data.get("coins", 0)) < total_with_unlock:
            await query.message.edit_text(
                f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–∞ —Å—É–º–º–∞: {format_balance(total_with_unlock)} mDrops.")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        data["coins"] = int(data.get("coins", 0)) - int(total_with_unlock)
        if needs_unlock:
            data["check_unlocked"] = True
        await save_data(user_id, data)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = ''.join(random.choices("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", k=8))
        check_data = {
            "creator_id": user_id,
            "per_user": per_user,
            "remaining": count,
            "claimed": []
        }

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ sync/async save_check
        try:
            if asyncio.iscoroutinefunction(save_check):
                await save_check(code, check_data)
            else:
                save_check(code, check_data)
        except Exception as e:
            # –û—Ç–∫–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            # –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            data["coins"] = int(data.get("coins", 0)) + int(total_with_unlock)
            await save_data(user_id, data)
            await query.message.edit_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
            return

        # –õ–æ–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        try:
            creator_chat = await bot.get_chat(int(user_id))
            username = getattr(creator_chat, "username", None)
            await send_log(
                f"–ò–≥—Ä–æ–∫ @{username if username else '-'} ({user_id}) —Å–æ–∑–¥–∞–ª —á–µ–∫.\n"
                f"–ù–∞ –æ–¥–Ω–æ–≥–æ: {per_user} mDrops\n–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {count}\n–í—Å–µ–≥–æ —Å–ø–∏—Å–∞–Ω–æ: {total_cost} mDrops"
                + (f"\n–ü–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç—É–ø: {UNLOCK_PRICE} mDrops" if needs_unlock else "")
                + f"\n–ö–æ–¥: {html.spoiler(code)}"
            )
        except Exception:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å—Å—ã–ª–∫–æ–π –Ω–∞ /start=check_code)
        bot_username = (await bot.get_me()).username
        link = f"https://t.me/{bot_username}?start=check_{code}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={link}")],
            [InlineKeyboardButton(text="üìÇ –ú–æ–∏ —á–µ–∫–∏", callback_data="check_panel:my")]
        ])

        try:
            await query.message.edit_text(
                f"üéâ –ß–µ–∫ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ö–æ–¥: <b>{code}</b>\n"
                f"–°—Å—ã–ª–∫–∞: {link}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {count}",
                parse_mode="HTML",
                reply_markup=kb
            )
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º alert'–æ–º
            await query.answer("–ß–µ–∫ —Å–æ–∑–¥–∞–Ω.", show_alert=True)

    except Exception as exc:
        pass
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —Å—Ç–∞—Ä–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞.", show_alert=True)
        except:
            pass


def _sync_load_all_checks() -> Dict[str, Dict[str, Any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —á–µ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã checks.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict code -> check_data (claimed —É–∂–µ –∫–∞–∫ list).
    """
    out: Dict[str, Dict[str, Any]] = {}
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∫–∞–∫ —É –≤–∞—Å –≤ load_check)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS checks (
                code TEXT PRIMARY KEY,
                creator_id TEXT NOT NULL,
                per_user REAL NOT NULL,
                remaining INTEGER NOT NULL,
                claimed TEXT DEFAULT '[]'
            )
        """)
        cursor.execute("SELECT * FROM checks")
        rows = cursor.fetchall()
        for row in rows:
            d = dict(row)
            # –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å claimed JSON –≤ —Å–ø–∏—Å–æ–∫ Python
            try:
                d["claimed"] = json.loads(d.get("claimed", "[]"))
            except Exception:
                d["claimed"] = []
            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø—ã/–ø–æ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            out[str(d.get("code"))] = d
    return out


def _sync_list_checks_by_creator(user_id: str) -> Dict[str, Dict[str, Any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–µ–∫–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö creator_id == user_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict code->check_data.
    """
    res: Dict[str, Dict[str, Any]] = {}
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS checks (
                code TEXT PRIMARY KEY,
                creator_id TEXT NOT NULL,
                per_user REAL NOT NULL,
                remaining INTEGER NOT NULL,
                claimed TEXT DEFAULT '[]'
            )
        """)
        cursor.execute("SELECT * FROM checks WHERE creator_id = ?", (str(user_id),))
        rows = cursor.fetchall()
        for row in rows:
            d = dict(row)
            try:
                d["claimed"] = json.loads(d.get("claimed", "[]"))
            except Exception:
                d["claimed"] = []
            res[str(d.get("code"))] = d
    return res


# ----------------- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö -----------------

async def load_all_checks() -> Dict[str, Dict[str, Any]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ _sync_load_all_checks.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict code->check_data.
    """
    return await asyncio.to_thread(_sync_load_all_checks)


async def list_checks_by_creator(user_id: str) -> Dict[str, Dict[str, Any]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ _sync_list_checks_by_creator.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict code->check_data —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id.
    """
    return await asyncio.to_thread(_sync_list_checks_by_creator, str(user_id))


# ----------------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è, —Ä–æ–±–∞—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º -----------------

async def list_checks_by_creator_or_empty(user_id: str) -> Dict[str, Dict[str, Any]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π helper: –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–µ–∫–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ user_id.
    –õ–æ–≥–∏–∫–∞:
      1) –ï—Å–ª–∏ –≤ globals –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è list_checks_by_creator (–∏ –æ–Ω–∞ –ù–ï –Ω–∞—à–∞),
         –≤—ã–∑–æ–≤–µ—Ç –µ—ë (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å).
      2) –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç sqlite-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é (load_all_checks / list_checks_by_creator).
      3) –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict {code: check_data} –∏–ª–∏ {}.
    """
    try:
        # 1) –ï—Å–ª–∏ —É –≤–∞—Å –≥–¥–µ-—Ç–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è list_checks_by_creator (–≤ globals),
        #    –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —ç—Ç–∞ —Å–∞–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è).
        gl = globals()
        if "list_checks_by_creator" in gl and gl["list_checks_by_creator"] is not list_checks_by_creator:
            fn = gl["list_checks_by_creator"]
            try:
                res = fn(user_id)  # type: ignore
                if asyncio.iscoroutine(res):
                    res = await res
                # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if isinstance(res, dict):
                    return {str(k): v for k, v in res.items()}
                elif isinstance(res, (list, tuple)):
                    out = {}
                    for item in res:
                        if isinstance(item, dict) and item.get("code"):
                            out[str(item["code"])] = item
                        elif isinstance(item, tuple) and len(item) >= 2:
                            out[str(item[0])] = item[1]
                    return out
            except Exception:
                # –µ—Å–ª–∏ –≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ª–æ–º–∞–ª–∞—Å—å ‚Äî –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π fallback
                pass

        # 2) –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—à—É sqlite-—Ñ—É–Ω–∫—Ü–∏—é (–±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è)
        res = await list_checks_by_creator(user_id)
        if isinstance(res, dict):
            return res

        # 3) –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã—à–ª–æ –Ω–µ —Ç–æ ‚Äî –∑–∞–≥—Ä—É–∑–∏–º –≤—Å—ë –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º (–¥–æ–ø. –∑–∞—â–∏—Ç–∞)
        all_checks = await load_all_checks()
        out = {}
        for code, ch in (all_checks or {}).items():
            if not isinstance(ch, dict):
                continue
            creator = ch.get("creator_id") or ch.get("creator") or ch.get("owner")
            if str(creator) == str(user_id):
                entry = dict(ch)
                if not entry.get("code"):
                    entry["code"] = code
                out[str(code)] = entry
        return out

    except Exception:
        # –º–æ–ª—á–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ ‚Äî –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á–µ–∫–æ–≤
        return {}


def _sync_delete_check(code: str) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —á–µ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã checks. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ."""
    code = str(code)
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS checks (
                code TEXT PRIMARY KEY,
                creator_id TEXT NOT NULL,
                per_user REAL NOT NULL,
                remaining INTEGER NOT NULL,
                claimed TEXT DEFAULT '[]'
            )
        """)
        cursor.execute("SELECT 1 FROM checks WHERE code = ?", (code,))
        if cursor.fetchone() is None:
            return False
        cursor.execute("DELETE FROM checks WHERE code = ?", (code,))
        conn.commit()
        return True


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏
async def async_load_check(code: str) -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç sync load_check —á–µ—Ä–µ–∑ to_thread."""
    return await asyncio.to_thread(load_check, code)


async def async_save_check(code: str, data: dict) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç sync save_check —á–µ—Ä–µ–∑ to_thread."""
    return await asyncio.to_thread(save_check, code, data)


async def async_delete_check(code: str) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —á–µ–∫ —á–µ—Ä–µ–∑ to_thread."""
    return await asyncio.to_thread(_sync_delete_check, code)


# ----------------- view_check handler: –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é -----------------
@dp.callback_query(F.data.startswith("view_check:"))
async def view_check_callback(query: CallbackQuery):
    await query.answer()  # —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    parts = query.data.split(":", 1)
    if len(parts) != 2:
        try:
            await query.message.edit_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–∞.")
        except:
            pass
        return

    code = parts[1]
    try:
        check = await async_load_check(code)
    except Exception:
        check = {}

    if not check:
        try:
            await query.message.edit_text("‚ùó –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω/—É–¥–∞–ª–µ–Ω.")
        except:
            await query.answer("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π
    creator_id = str(check.get("creator_id", "‚Äî"))
    per_user = check.get("per_user", check.get("amount", "‚Äî"))
    remaining = check.get("remaining", check.get("left", 0))
    created_at = check.get("created_at")  # –µ—Å–ª–∏ –µ—Å—Ç—å unix timestamp
    claimed = check.get("claimed", [])

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    lines = []
    lines.append(f"üîñ –ß–µ–∫: <b>{code}</b>")
    lines.append(f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: <code>{creator_id}</code>")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ)
    try:
        chat = await bot.get_chat(int(creator_id))
        creator_name = getattr(chat, "first_name", None) or getattr(chat, "username", None) or str(creator_id)
        lines[-1] = f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: <b>{creator_name}</b> (<code>{creator_id}</code>)"
    except Exception:
        # –æ—Å—Ç–∞–≤–ª—è–µ–º id –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        pass

    lines.append(f"üí∏ –ù–∞ –æ–¥–Ω–æ–≥–æ: <b>{per_user}</b> mDrops")
    lines.append(f"üî¢ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: <b>{remaining}</b>")

    if created_at:
        try:
            import datetime
            ts = int(created_at)
            dt = datetime.datetime.utcfromtimestamp(ts)
            # –≤—ã–≤–æ–¥–∏–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (UTC) ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ
            lines.append(f"üïí –°–æ–∑–¥–∞–Ω: {dt.strftime('%Y-%m-%d %H:%M:%S')} UTC")
        except Exception:
            pass

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ claimed ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ id –∏–ª–∏ —Å–ø–∏—Å–æ–∫ dict
    activators_lines = []
    if claimed:
        # claimed –º–æ–∂–µ—Ç –±—ã—Ç—å json-—Å—Ç—Ä–æ–∫–æ–π, –Ω–æ –Ω–∞—à–∏ load_check —É–∂–µ –ø–∞—Ä—Å–∏—Ç json -> list.
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã: str/int (user_id) –∏–ª–∏ dict —Å –ø–æ–ª–µ–º 'user_id'/'id'
        for idx, item in enumerate(claimed, start=1):
            user_id = None
            extra = ""
            if isinstance(item, (str, int)):
                user_id = str(item)
            elif isinstance(item, dict):
                user_id = str(item.get("user_id") or item.get("id") or item.get("uid") or item.get("from"))
                # –µ—Å—Ç—å –ª–∏ –æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Å—É–º–º–∞?
                if "at" in item:
                    extra += f" (at: {item['at']})"
                if "amount" in item:
                    extra += f" (amount: {item['amount']})"
            else:
                # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å repr
                activators_lines.append(f"{idx}. {repr(item)}")
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ bot.get_chat
            name_display = user_id
            try:
                ch = await bot.get_chat(int(user_id))
                name_display = getattr(ch, "first_name", None) or getattr(ch, "username", None) or str(user_id)
            except Exception:
                # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Å—Ç–∞–≤–∏–º id
                pass

            activators_lines.append(f"{idx}. {name_display} (<code>{user_id}</code>){extra}")

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å (—É–¥–∞–ª—è—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω) –∏ –Ω–∞–∑–∞–¥
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–µ–∫", callback_data=f"delete_check:{code}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ (–ú–æ–∏ —á–µ–∫–∏)", callback_data="check_panel:my")]
    ])

    text = "\n".join(lines)
    if activators_lines:
        text += "\n\nüë• –ê–∫—Ç–∏–≤–∞—Ç–æ—Ä—ã:\n" + "\n".join(activators_lines)
    else:
        text += "\n\nüë• –ê–∫—Ç–∏–≤–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."

    try:
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.answer(text, parse_mode="HTML", reply_markup=kb)


# ----------------- delete_check handler: —É–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–∞ -----------------
@dp.callback_query(F.data.startswith("delete_check:"))
async def delete_check_callback(query: CallbackQuery):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–∞.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ ADMIN_ID).
    - –£–¥–∞–ª—è–µ—Ç —á–µ–∫ –∏–∑ –ë–î.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ (per_user * remaining) —Å–æ–∑–¥–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å.
    - –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å—ë —á–µ—Ä–µ–∑ append_log.
    """
    await query.answer()

    parts = query.data.split(":", 1)
    if len(parts) != 2:
        try:
            await query.message.edit_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞.")
        except Exception:
            pass
        return

    code = parts[1]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    try:
        check = await async_load_check(code)
    except Exception as exc:
        append_log({"event": "delete_check_load_error", "code": code, "error": repr(exc)}, add_timestamp=True)
        check = {}

    if not check:
        try:
            await query.message.edit_text("‚ùó –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.")
        except Exception:
            await query.answer("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    creator_id = str(check.get("creator_id", ""))
    user_id = str(query.from_user.id)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å
    if user_id != str(creator_id) and user_id != str(ADMIN_ID):
        try:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —á–µ–∫–∞.", show_alert=True)
        except Exception:
            pass
        return

    # –≤—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å (–æ—Å—Ç–∞—Ç–æ–∫)
    try:
        per_user_raw = check.get("per_user", 0)
        remaining_raw = check.get("remaining", 0)
        # –¥–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ per_user –º–æ–∂–µ—Ç –±—ã—Ç—å float –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
        per_user = float(per_user_raw)
        remaining = int(remaining_raw)
    except Exception:
        per_user = 0.0
        try:
            remaining = int(check.get("remaining", 0))
        except Exception:
            remaining = 0

    total_back = per_user * remaining
    # –æ–∫—Ä—É–≥–ª–∏–º –¥–æ —Ü–µ–ª–æ–≥–æ (–∏–ª–∏ –¥–æ 2 –∑–Ω–∞–∫–æ–≤), –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏ ‚Äî –∑–¥–µ—Å—å –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
    try:
        total_back_amt = int(round(total_back))
    except Exception:
        total_back_amt = int(total_back) if total_back else 0

    # –£–¥–∞–ª—è–µ–º —á–µ–∫ –∏–∑ –ë–î
    try:
        deleted = await async_delete_check(code)
    except Exception as exc:
        deleted = False
        append_log({"event": "delete_check_delete_error", "code": code, "creator_id": creator_id, "error": repr(exc)},
                   add_timestamp=True)

    if not deleted:
        try:
            await query.message.edit_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –≤–µ—Ä–Ω—É—Ç—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞—Ç–µ–ª—è
    refunded = False
    refund_note = ""
    if total_back_amt > 0:
        try:
            # –∑–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–¥–∏–º, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
            data = await load_data(creator_id)
            if not data:
                await create_user_data(creator_id)
                data = await load_data(creator_id)
            # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
            prev = int(data.get("coins", 0))
            data["coins"] = int(prev + total_back_amt)
            await save_data(creator_id, data)
            refunded = True
            refund_note = f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {format_balance(total_back_amt)} mDrops —Å–æ–∑–¥–∞—Ç–µ–ª—é ({creator_id})."
            # –ª–æ–≥–∏—Ä—É–µ–º
            append_log({
                "event": "delete_check_refund",
                "code": code,
                "creator_id": creator_id,
                "refunded_amount": total_back_amt,
                "balance_before": prev,
                "balance_after": data["coins"],
                "operator_id": user_id
            }, add_timestamp=True)
        except Exception as exc:
            refunded = False
            append_log({
                "event": "delete_check_refund_error",
                "code": code,
                "creator_id": creator_id,
                "attempted_refund": total_back_amt,
                "error": repr(exc),
                "operator_id": user_id
            }, add_timestamp=True)

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–ª —á–µ–∫
    try:
        if total_back_amt > 0 and refunded:
            await query.message.edit_text(f"‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n{refund_note}")
        elif total_back_amt > 0 and not refunded:
            await query.message.edit_text(
                "‚úÖ –ß–µ–∫ —É–¥–∞–ª—ë–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω.")
        else:
            await query.message.edit_text("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. –í–æ–∑–≤—Ä–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–Ω–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π).")
    except Exception:
        # fallback: –∫–æ—Ä–æ—Ç–∫–∏–π alert
        if total_back_amt > 0 and refunded:
            await query.answer(f"–ß–µ–∫ —É–¥–∞–ª—ë–Ω. {format_balance(total_back_amt)} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.", show_alert=True)
        elif total_back_amt > 0 and not refunded:
            await query.answer("–ß–µ–∫ —É–¥–∞–ª—ë–Ω, –Ω–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.", show_alert=True)
        else:
            await query.answer("–ß–µ–∫ —É–¥–∞–ª—ë–Ω.", show_alert=True)

    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –õ–° –æ –≤–æ–∑–≤—Ä–∞—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        if total_back_amt > 0 and refunded:
            try:
                # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
                await bot.send_message(int(creator_id),
                                       f"üîî –í–∞—à —á–µ–∫ ({code}) –±—ã–ª —É–¥–∞–ª—ë–Ω. –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {format_balance(total_back_amt)} mDrops.")
            except Exception:
                # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                append_log({"event": "notify_creator_failed", "creator_id": creator_id, "code": code},
                           add_timestamp=True)
    except Exception:
        pass


@dp.callback_query(F.data == "check_panel:my")
async def check_panel_my(query: CallbackQuery):
    """
    –ù–∞–¥—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä '–ú–æ—ó —á–µ–∫–∏' ‚Äî –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —á–µ–∫—ñ–≤ —ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —ó—Ö.
    –ó–∞—Å—Ç–æ—Å–æ–≤—É–π—Ç–µ —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ.
    """
    try:
        await query.answer()  # –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "—á–∞—Å–∏–∫–∏"

        user_id = str(query.from_user.id)
        checks = await list_checks_by_creator_or_empty(user_id)

        if not checks:
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ ‚Äî —ñ–Ω—Ñ–æ—Ä–º—É—î–º–æ
            try:
                await query.message.edit_text("üìÇ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–µ–∫—ñ–≤.")
            except Exception:
                # —è–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∞–ª–µ—Ä—Ç–æ–º
                await query.answer("üìÇ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–µ–∫—ñ–≤.", show_alert=True)
            return

        # –±—É–¥—É—î–º–æ —Ç–µ–∫—Å—Ç —ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        lines = []
        kb_rows = []
        i = 0
        # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ deterministic order
        for code in sorted(checks.keys()):
            if i >= 20:  # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏—Ö —Å–ø–∏—Å–∫—ñ–≤
                break
            ch = checks[code] or {}
            per = ch.get("per_user", ch.get("amount", "‚Äî"))
            rem = ch.get("remaining", ch.get("left", 0))
            lines.append(
                f"‚Ä¢ <b>{code}</b> ‚Äî {format_balance(int(per)) if isinstance(per, int) else per} mDrops, –æ—Å—Ç–∞–ª–æ—Å—å: {rem}")
            kb_rows.append([
                InlineKeyboardButton(text=f"üîç {code}", callback_data=f"view_check:{code}"),
                InlineKeyboardButton(text="üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"delete_check:{code}")
            ])
            i += 1

        kb_rows.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="check_panel:close")])
        kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

        text = "üìÇ –í–∞—à–∏ —á–µ–∫–∏:\n\n" + "\n".join(lines)
        try:
            await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
        except Exception:
            # —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await query.message.answer(text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        pass
        try:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤.", show_alert=True)
        except:
            pass


try:
    # Python 3.9+
    from zoneinfo import ZoneInfo

    KYIV_TZ = ZoneInfo("Europe/Kyiv")
except Exception:
    # fallback ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ UTC, —è–∫—â–æ zoneinfo –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
    from datetime import timezone

    KYIV_TZ = timezone.utc

DAILY_TRANSFER_LIMIT = 1_000_000  # —â–æ–¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—ñ (–≥—Ä—É–±–æ, –¥–æ –∫–æ–º—ñ—Å—ñ—ó)


@dp.message(F.text.lower().startswith("–¥–∞—Ç—å"))
async def transfer_command(message: Message):
    try:
        if not message.reply_to_message:
            return await message.reply(
                f"ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å mDrops ‚Äî –æ—Ç–≤–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å!")

        sender_id = str(message.from_user.id)
        recipient_id = str(message.reply_to_message.from_user.id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not await load_data(sender_id):
            await create_user_data(sender_id)
        if not await load_data(recipient_id):
            await create_user_data(recipient_id)

        if sender_id == recipient_id:
            return await message.reply(
                f"ü´µ {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å mDrops —Å–∞–º–æ–º—É —Å–µ–±–µ!")

        # –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ) ‚Äî –æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –µ—Å—Ç—å
        if int(recipient_id) in (8257726098, 8375492513):
            return await message.reply(
                f"üòÅ {await gsname(message.from_user.first_name, message.from_user.id)}, —è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –ø–æ–¥–∞—Ä–∫–∏!")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        data = await load_data(sender_id)
        if not data:
            return await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        user_balance = int(data.get("coins", 0))

        # –†–∞–∑–±–æ—Ä —Å—É–º–º—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        text = message.text.strip().lower()
        parts = text.split()
        if len(parts) < 2:
            return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: ¬´–¥–∞—Ç—å 500¬ª –∏–ª–∏ ¬´–¥–∞—Ç—å –≤—Å–µ¬ª (–≤ –æ—Ç–≤–µ—Ç–µ).")

        amount_text = parts[1]

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ Kyiv timezone –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        try:
            now = datetime.now(KYIV_TZ)
            today_str = now.strftime("%Y-%m-%d")
        except Exception:
            now = datetime.utcnow()
            today_str = now.strftime("%Y-%m-%d")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—Ç–æ—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        daily = data.get("daily_transfers")
        if not isinstance(daily, dict) or daily.get("date") != today_str:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
            data["daily_transfers"] = {"date": today_str, "sent": 0}
            daily_sent = 0
        else:
            daily_sent = int(daily.get("sent", 0))

        remaining_limit = DAILY_TRANSFER_LIMIT - daily_sent
        if remaining_limit < 0:
            remaining_limit = 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É (gross ‚Äî —Å—É–º–º–∞ –¥–æ –∫–æ–º–∏—Å—Å–∏–∏)
        if amount_text in ["–≤—Å–µ", "–≤—Å—ë"]:
            if remaining_limit <= 0:
                return await message.reply(
                    f"‚ö†Ô∏è {await gsname(message.from_user.first_name, message.from_user.id)}, –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.")
            # "–≤—Å–µ" –æ–∑–Ω–∞—á–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å ‚Äî –º–∏–Ω–∏–º—É–º –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Å—Ç–∞—Ç–∫–∞ –ª–∏–º–∏—Ç–∞
            amount = min(user_balance, remaining_limit)
            if amount <= 0:
                return await message.reply(
                    f"‚ö†Ô∏è {await gsname(message.from_user.first_name, message.from_user.id)}, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö mDrops –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        else:
            try:
                amount = parse_bet_input(amount_text) if "–∫" in amount_text else int(amount_text)
                amount = int(amount)
                if amount <= 0:
                    return await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            except Exception:
                return await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ'.")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
            if remaining_limit <= 0:
                return await message.reply(
                    f"‚ö†Ô∏è {await gsname(message.from_user.first_name, message.from_user.id)}, –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ( {format_balance(DAILY_TRANSFER_LIMIT)} mDrops ) —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω.")
            if amount > remaining_limit:
                return await message.reply(
                    f"‚ö†Ô∏è {await gsname(message.from_user.first_name, message.from_user.id)}, —Å–µ–≥–æ–¥–Ω—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ—â—ë {format_balance(remaining_limit)} mDrops. –ü–æ–ø—Ä–æ–±—É–π –º–µ–Ω—å—à—É—é —Å—É–º–º—É."
                )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if amount > user_balance:
            short = amount - user_balance
            return await message.reply(
                f"‚òπÔ∏è {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {format_balance(short)} mDrops!")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é 15%
        fee = amount * 15 // 100
        net_amount = amount - fee

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥: —Å–ø–∏—Å—ã–≤–∞–µ–º —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        data["coins"] = int(data.get("coins", 0)) - int(amount)
        # –û–±–Ω–æ–≤–ª—è–µ–º daily_sent –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        data["daily_transfers"]["sent"] = int(data["daily_transfers"].get("sent", 0)) + int(amount)
        await save_data(sender_id, data)

        recipient_data = await load_data(recipient_id)
        if not recipient_data:
            # –í —Ä–µ–¥–∫–æ–º —Å–ª—É—á–∞–µ —Å–æ–∑–¥–∞—ë–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º
            await create_user_data(recipient_id)
            recipient_data = await load_data(recipient_id)

        recipient_data["coins"] = int(recipient_data.get("coins", 0)) + int(net_amount)
        await save_data(recipient_id, recipient_data)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ)
        try:
            sender_chat = await bot.get_chat(int(sender_id))
            sender_username = getattr(sender_chat, "username", None)
            recipient_chat = await bot.get_chat(int(recipient_id))
            recipient_username = getattr(recipient_chat, "username", None)
            await send_log(
                f"–ò–≥—Ä–æ–∫ @{sender_username if sender_username else '-'} ({sender_id}) —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª {format_balance(net_amount)} mDrops –∏–≥—Ä–æ–∫—É @{recipient_username if recipient_username else '-'} ({recipient_id}).\n"
                f"–°—É–º–º–∞: {format_balance(amount)} mDrops (–∫–æ–º–∏—Å—Å–∏—è {format_balance(fee)})."
            )
        except Exception:
            # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass

        sender_name = message.from_user.first_name
        recipient_name = message.reply_to_message.from_user.first_name

        await message.answer(
            f"‚úÖ {await gsname(sender_name, int(sender_id))} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤—ë–ª {format_balance(net_amount)} mDrops {recipient_name}\n"
            f"(üí∞ –ö–æ–º–∏—Å—Å–∏—è: {format_balance(fee)} mDrops)\n\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {format_balance(data['daily_transfers']['sent'])} / {format_balance(DAILY_TRANSFER_LIMIT)} mDrops"
        )
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 108)


# –∫–µ—à —Ç–æ–ø—É
TOP_CACHE = {
    "time": 0,
    "text": "",
}

CACHE_TTL = 10  # —Å–µ–∫, —Å–∫—ñ–ª—å–∫–∏ –∂–∏–≤–µ –∫–µ—à (–º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏)


@dp.message(F.text.lower().in_(["/top", "—Ç–æ–ø", "/top@gmegadbot"]))
async def top_players(message: Message, bot: Bot):
    try:
        import time
        now = time.time()

        # —è–∫—â–æ –∫–µ—à —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π -> –≤—ñ–¥–¥–∞—î–º–æ –π–æ–≥–æ
        if now - TOP_CACHE["time"] < CACHE_TTL and TOP_CACHE["text"]:
            await message.answer(TOP_CACHE["text"])
            return

        # –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ–ø—É
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS json_data (
                key TEXT PRIMARY KEY,
                value TEXT
            )
            """)
            cursor.execute("SELECT key, value FROM json_data")
            rows = cursor.fetchall()

        players = []
        for key, value in rows:
            try:
                data = json.loads(value)
                coins = float(data.get("coins", 0))
            except Exception:
                coins = 0.0
            players.append((key, coins))

        players.sort(key=lambda x: x[1], reverse=True)
        top = players[:10]
        total_players = len(players)

        if total_players == 0:
            text = "<b>üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤."
        else:
            lines = ["<b>üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n"]
            for i, (uid, coins) in enumerate(top, 1):
                try:
                    chat = await bot.get_chat(int(uid))
                    name = f"<a href=\"tg://user?id=0\">{await gsname(chat.first_name)}</a>" or await gsname(
                        chat.username) or f"ID {uid}"
                except Exception:
                    name = f"ID {uid}"

                if i == 1:
                    i = "ü•á 1."
                elif i == 2:
                    i = "ü•à 2."
                elif i == 3:
                    i = "ü•â 3."
                else:
                    i = f"üèÖ {i}."
                lines.append(f"{i} {name} | <code>{format_balance(coins)} mDrops</code>")

            lines.append(f"\n<blockquote>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players}</blockquote>")
            text = "\n".join(lines)

        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        TOP_CACHE["time"] = now
        TOP_CACHE["text"] = text

        await message.answer(text)
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 109)


@dp.message(F.text.lower().in_(["/help", "–ø–æ–º–æ—â—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "/help@gmegadbot"]))
async def handle_help(message: Message):
    uid = message.from_user.id
    kb = InlineKeyboardMarkup(inline_keyboard=(
    [[InlineKeyboardButton(text="üì¶ –ò–ì–†–´", callback_data=f"callback_games_from_help:{uid}"),
      InlineKeyboardButton(text="üìï –ü–†–ê–í–ò–õ–ê",
                           url="sleet-windflower-6df.notion.site/GMEGADBOT-256118305d388059ae2ff01896163f6a?pvs=73")]]))

    await message.reply(
        f"üìñ {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏!\n\nüìå {html.bold("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã")}:{html.blockquote(f"{html.bold("/balance")} - –≤–∞—à –±–∞–ª–∞–Ω—Å\n{html.bold("/profile")} - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n{html.bold("/bonus")} - –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ —á–∞—Å)\n{html.bold("/daily")} - –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞)\n{html.bold("/referrals")} - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n{html.bold("/check")} - –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–æ–≤"
                                                                                                                                                            f"\n{html.bold("/cases")} - –∫–µ–π—Å—ã\n{html.bold("/top")} - –º–∏—Ä–æ–≤–æ–π —Ç–æ–ø –ø–æ mDrops\n{html.bold("/exchange")} - –æ–±–º–µ–Ω–Ω–∏–∫ GGs/mDrops\n{html.bold("/baraban")} - –±–∞—Ä–∞–±–∞–Ω –±–æ–Ω—É—Å–æ–≤ (—Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤)\n{html.bold("/donation")} - –¥–æ–Ω–∞—Ç –º–µ–Ω—é\n{html.bold("/earn")} - –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å GGs\n{html.bold("/promotion")} - —Ä–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã\n{html.bold("/bank")} - –±–∞–Ω–∫\n{html.bold("/partners")} - –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n{html.bold("/shop")} - –º–∞–≥–∞–∑–∏–Ω")}\n\nüõ° –ö–æ–Ω—Ç–∞–∫—Ç—ã: {html.blockquote(f"{html.bold("–í–ª–∞–¥–∞–ª–µ—Ü/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:")} t.me/sollamon\n{html.bold("–ö–∞–Ω–∞–ª:")} t.me/saycursed\n{html.bold("–ß–∞—Ç:")} t.me/saycurse\n{html.bold("–ë–æ—Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∏")}: @gmegasupbot\n")}",
        reply_markup=kb, disable_web_page_preview=True)


@dp.callback_query(F.data.startswith("help_callback"))
async def handle_help(callback: CallbackQuery):
    uid = callback.from_user.id
    if int(callback.data.split(":")[1]) != int(uid):
        await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    kb = InlineKeyboardMarkup(inline_keyboard=(
    [[InlineKeyboardButton(text="üì¶ –ò–ì–†–´", callback_data=f"callback_games_from_help:{uid}"),
      InlineKeyboardButton(text="üìï –ü–†–ê–í–ò–õ–ê",
                           url="sleet-windflower-6df.notion.site/GMEGADBOT-256118305d388059ae2ff01896163f6a?pvs=73")]]))

    await callback.message.edit_text(
        f"üìñ {await gsname(callback.from_user.first_name, callback.from_user.id)}, —Ç—ã –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏!\n\nüìå {html.bold("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã")}:{html.blockquote(f"{html.bold("/balance")} - –≤–∞—à –±–∞–ª–∞–Ω—Å\n{html.bold("/profile")} - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n{html.bold("/bonus")} - –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ —á–∞—Å)\n{html.bold("/daily")} - –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞)\n{html.bold("/referrals")} - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n{html.bold("/check")} - –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–æ–≤"
                                                                                                                                                              f"\n{html.bold("/cases")} - –∫–µ–π—Å—ã\n{html.bold("/top")} - –º–∏—Ä–æ–≤–æ–π —Ç–æ–ø –ø–æ mDrops\n{html.bold("/exchange")} - –æ–±–º–µ–Ω–Ω–∏–∫ GGs/mDrops\n{html.bold("/baraban")} - –±–∞—Ä–∞–±–∞–Ω –±–æ–Ω—É—Å–æ–≤ (—Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤)\n{html.bold("/donation")} - –¥–æ–Ω–∞—Ç –º–µ–Ω—é\n{html.bold("/earn")} - –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å GGs\n{html.bold("/promotion")} - —Ä–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã\n{html.bold("/bank")} - –±–∞–Ω–∫")}\n\nüõ° –ö–æ–Ω—Ç–∞–∫—Ç—ã: {html.blockquote(f"{html.bold("–í–ª–∞–¥–∞–ª–µ—Ü/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:")} t.me/sollamon\n{html.bold("–ö–∞–Ω–∞–ª:")} t.me/saycursed\n{html.bold("–ß–∞—Ç:")} t.me/saycurse\n{html.bold("–ë–æ—Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∏")}: @gmegasupbot\n")}",
        reply_markup=kb, disable_web_page_preview=True)


# -------------- CLANES -------------- #

async def add_clan_request(user_id: str, clan_name: str) -> bool:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ–º–∞—î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞—è–≤–∫–∏
    cursor.execute("SELECT id FROM clan_requests WHERE user_id = ? AND status = 'pending'", (user_id,))
    if cursor.fetchone():
        conn.close()
        return False

    cursor.execute("INSERT INTO clan_requests (user_id, clan_name) VALUES (?, ?)", (user_id, clan_name))
    conn.commit()
    conn.close()
    return True


async def get_clan_requests(clan_name: str) -> list:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM clan_requests WHERE clan_name = ? AND status = 'pending'", (clan_name,))
    requests = [row[0] for row in cursor.fetchall()]
    conn.close()
    return requests


async def update_clan_request(user_id: str, clan_name: str, status: str) -> bool:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE clan_requests SET status = ? WHERE user_id = ? AND clan_name = ? AND status = 'pending'",
                   (status, user_id, clan_name))
    conn.commit()
    updated = cursor.rowcount > 0
    conn.close()
    return updated


def get_all_clans():
    """–û—Ç—Ä–∏–º—É—î —É—Å—ñ –∫–ª–∞–Ω–∏ –∑ –±–∞–∑–∏"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, level, members FROM clans")
    rows = cursor.fetchall()
    conn.close()
    return [{"name": r[0], "level": r[1], "members": json.loads(r[2])} for r in rows]


async def create_clan(name: str, owner_id: str) -> bool:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ –∫–ª–∞–Ω –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é
    cursor.execute("SELECT id FROM clans WHERE name = ?", (name,))
    if cursor.fetchone():
        conn.close()
        return False  # –ö–ª–∞–Ω –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —î

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–ª–∞–Ω
    members = json.dumps([owner_id])
    admins = json.dumps([owner_id])

    cursor.execute("""
    INSERT INTO clans (name, coffres, level, rating, members, admins, owner)
    VALUES (?, 0, 1, 0, ?, ?, ?)
    """, (name, members, admins, owner_id))

    conn.commit()
    conn.close()
    return True


async def load_clan(name: str) -> dict | None:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∫–ª–∞–Ω—É –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT name, coffres, level, rating, members, admins, owner FROM clans WHERE name = ?", (name,))
    row = cursor.fetchone()

    conn.close()

    if not row:
        return None

    return {
        "name": row[0],
        "coffres": row[1],
        "level": row[2],
        "rating": row[3],
        "members": json.loads(row[4]),
        "admins": json.loads(row[5]),
        "owner": row[6]
    }


async def save_clan(name: str, data: dict) -> bool:
    """–ó–±–µ—Ä—ñ–≥–∞—î –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–ª–∞–Ω—É"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    try:
        cursor.execute("""
            UPDATE clans 
            SET coffres = ?, level = ?, rating = ?, members = ?, admins = ?, owner = ?
            WHERE name = ?
        """, (
            data.get("coffres", 0),
            data.get("level", 1),
            data.get("rating", 0),
            json.dumps(data.get("members", [])),
            json.dumps(data.get("admins", [])),
            data.get("owner"),
            name
        ))

        conn.commit()
        return cursor.rowcount > 0

    finally:
        conn.close()


def contains_emoji(text: str) -> bool:
    emoji_pattern = re.compile(
        "[\U0001F600-\U0001F64F"  # —Å–º–∞–π–ª–∏
        "\U0001F300-\U0001F5FF"  # —Å–∏–º–≤–æ–ª–∏ —Ç–∞ –ø—ñ–∫—Ç–æ–≥—Ä–∞–º–∏
        "\U0001F680-\U0001F6FF"  # —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç–∞ —Å–∏–º–≤–æ–ª–∏
        "\U0001F1E0-\U0001F1FF"  # –ø—Ä–∞–ø–æ—Ä–∏
        "\U00002700-\U000027BF"  # —Ä—ñ–∑–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        "\U0001F900-\U0001F9FF"  # –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
        "\U0001FA70-\U0001FAFF"  # —â–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
        "]+", flags=re.UNICODE
    )
    return bool(emoji_pattern.search(text))


class ClanStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_anount_rating_buy = State()
    waiting_for_amount_to_add_coffer = State()
    waiting_for_delete_confirm = State()
    waiting_for_amount_to_give_from_coffer = State()
    waiting_for_id_to_give_from_coffer = State()


@dp.message(F.text.lower().in_(["–∫–ª–∞–Ω—ã", "–∫–ª–∞–Ω", "/clan"]))
@flood_protect(min_delay=0.5)
async def handle_clan_command(message: Message):
    if message.chat.type != "private":
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üçì –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url="t.me/gmegadbot")]]
        )
        return await message.reply(
            f"üçì {await gsname(message.from_user.first_name, message.from_user.id)}, –∫–ª–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ {html.link('–õ–° —Å –±–æ—Ç–æ–º', 't.me/gmegadbot')}!",
            reply_markup=kb, disable_web_page_preview=True
        )

    user_id = message.from_user.id
    name = message.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        kb = InlineKeyboardMarkup(inline_keyboard=(
        [[InlineKeyboardButton(text="üî• –°–æ–∑–¥–∞—Ç—å –ö–ª–∞–Ω", callback_data="create_clan")],
         [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ö–ª–∞–Ω", callback_data="find_clan")]]))
        return await message.reply(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!", reply_markup=kb)

    clan_data = await load_clan(str(clan_name))
    clan_level = clan_data["level"]
    player_accept = None

    if str(user_id) == str(clan_data["owner"]):
        player_accept = "–í–ª–∞–¥–µ–ª–µ—Ü"
    elif str(user_id) in clan_data["admins"]:
        player_accept = "–ê–¥–º–∏–Ω"
    elif str(user_id) in clan_data["members"]:
        player_accept = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        return await handle_error(message.from_user.username, "error when checking clan level (player)", user_id, 123)

    total_members = int(len(clan_data["members"]))
    total_members_available = 5 * int(clan_level)
    kb = None
    if player_accept == "–í–ª–∞–¥–µ–ª–µ—Ü" or player_accept == "–ê–¥–º–∏–Ω":
        kb = InlineKeyboardMarkup(inline_keyboard=(
            [[InlineKeyboardButton(text="–ö–∞–∑–Ω–∞", callback_data="clan_coffer")],
             [InlineKeyboardButton(text="–£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="show_clan_members")],
             [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="clan_requests")],
             [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="clan_buy_rating"),
              InlineKeyboardButton(text="–¢–æ–ø –∫–ª–∞–Ω–æ–≤", callback_data="top_clans:1")],
             [InlineKeyboardButton(text="–£–≤–µ–ª–∏—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="upgrade_clan")],
             [InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω", callback_data=f"leave_clan:{clan_name}")]]
        ))
        if str(user_id) == str(clan_data["owner"]):
            kb.inline_keyboard.append(
                [InlineKeyboardButton(text="‚ÄºÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω", callback_data=f"delete_clan:{clan_name}")])
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=([[InlineKeyboardButton(text="–ö–∞–∑–Ω–∞", callback_data="clan_coffer")],
                              [InlineKeyboardButton(text="–£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="show_clan_members")],
                              [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="clan_buy_rating"),
                               InlineKeyboardButton(text="–¢–æ–ø –∫–ª–∞–Ω–æ–≤", callback_data="top_clans:1")],
                              [InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω", callback_data=f"leave_clan:{clan_name}")]]))

    await message.reply(
        f"{await gsname(name, user_id)} —Ç–≤–æ–π –∫–ª–∞–Ω:\nüõ° –ù–∞–∑–≤–∞–Ω–∏–µ: {clan_name}\nüí∞ –ö–∞–∑–Ω–∞: {format_balance(clan_data["coffres"])} mDrops\n‚öúÔ∏è –£—Ä–æ–≤–µ–Ω—å –ö–ª–∞–Ω–∞: {clan_data["level"]}\nüèÜ –†–µ–π—Ç–∏–Ω–≥: {clan_data["rating"]}\nüë§ –¢–≤–æ—è —Ä–æ–ª—å: {player_accept}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}/{total_members_available}",
        reply_markup=kb)


@dp.callback_query(F.data == "upgrade_clan")
@flood_protect(min_delay=0.5)
async def handle_upgrade_clan(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        kb = InlineKeyboardMarkup(inline_keyboard=(
        [[InlineKeyboardButton(text="üî• –°–æ–∑–¥–∞—Ç—å –ö–ª–∞–Ω", callback_data="create_clan")],
         [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ö–ª–∞–Ω", callback_data="find_clan")]]))
        return await callback.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!",
                                                reply_markup=kb)

    clan_data = await load_clan(str(clan_name))
    clan_level = clan_data["level"]
    player_accept = None

    if str(user_id) == str(clan_data["owner"]):
        player_accept = "–í–ª–∞–¥–µ–ª–µ—Ü"
    elif str(user_id) in clan_data["admins"]:
        player_accept = "–ê–¥–º–∏–Ω"
    elif str(user_id) in clan_data["members"]:
        player_accept = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        return await handle_error(callback.from_user.username, "error when checking clan level (player)", user_id, 123)

    if player_accept == "–£—á–∞—Å—Ç–Ω–∏–∫":
        return await callback.message.edit_text(f"{await gsname(name, user_id)} —Ç—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ —Å—é–¥–∞!")

    if clan_level >= 5:
        return await callback.message.edit_text(
            f"{await gsname(name, user_id)} —É—Ä–æ–≤–µ–Ω—å —Ç–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π (5 —É—Ä.)!")

    price = clan_level * 250000
    if price > clan_data["coffres"]:
        return await callback.answer(
            f"–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mDrops –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–ª–∞–Ω–∞!\n\n–¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è: {format_balance(price)} mDrops",
            show_alert=True)

    clan_data["coffres"] -= price
    clan_data["level"] += 1
    await save_clan(clan_name, clan_data)
    await callback.message.edit_text(
        f"{await gsname(name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª —É—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞ –¥–æ {clan_data["level"]}!")


@dp.callback_query(F.data == "clan_callback")
@flood_protect(min_delay=0.5)
async def handle_clan_command(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        kb = InlineKeyboardMarkup(inline_keyboard=(
        [[InlineKeyboardButton(text="üî• –°–æ–∑–¥–∞—Ç—å –ö–ª–∞–Ω", callback_data="create_clan")],
         [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ö–ª–∞–Ω", callback_data="find_clan")]]))
        return await callback.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!",
                                                reply_markup=kb)

    clan_data = await load_clan(str(clan_name))
    clan_level = clan_data["level"]
    player_accept = None

    if str(user_id) == str(clan_data["owner"]):
        player_accept = "–í–ª–∞–¥–µ–ª–µ—Ü"
    elif str(user_id) in clan_data["admins"]:
        player_accept = "–ê–¥–º–∏–Ω"
    elif str(user_id) in clan_data["members"]:
        player_accept = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        return await handle_error(callback.from_user.username, "error when checking clan level (player)", user_id, 123)

    total_members = int(len(clan_data["members"]))
    total_members_available = 5 * int(clan_level)
    kb = None
    if player_accept == "–í–ª–∞–¥–µ–ª–µ—Ü" or player_accept == "–ê–¥–º–∏–Ω":
        kb = InlineKeyboardMarkup(inline_keyboard=(
            [[InlineKeyboardButton(text="–ö–∞–∑–Ω–∞", callback_data="clan_coffer")],
             [InlineKeyboardButton(text="–£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="show_clan_members")],
             [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="clan_requests")],
             [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="clan_buy_rating"),
              InlineKeyboardButton(text="–¢–æ–ø –∫–ª–∞–Ω–æ–≤", callback_data="top_clans:1")],
             [InlineKeyboardButton(text="–£–≤–µ–ª–∏—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="upgrade_clan")],
             [InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω", callback_data=f"leave_clan:{clan_name}")]]
        ))
        if str(user_id) == str(clan_data["owner"]):
            kb.inline_keyboard.append(
                [InlineKeyboardButton(text="‚ÄºÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω", callback_data=f"delete_clan:{clan_name}")])
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=([[InlineKeyboardButton(text="–ö–∞–∑–Ω–∞", callback_data="clan_coffer")],
                              [InlineKeyboardButton(text="–£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="show_clan_members")],
                              [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", callback_data="clan_buy_rating"),
                               InlineKeyboardButton(text="–¢–æ–ø –∫–ª–∞–Ω–æ–≤", callback_data="top_clans:1")],
                              [InlineKeyboardButton(text="–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω", callback_data=f"leave_clan:{clan_name}")]]))

    await callback.message.edit_text(
        f"{await gsname(name, user_id)} —Ç–≤–æ–π –∫–ª–∞–Ω:\nüõ° –ù–∞–∑–≤–∞–Ω–∏–µ: {clan_name}\nüí∞ –ö–∞–∑–Ω–∞: {format_balance(clan_data["coffres"])} mDrops\n‚öúÔ∏è –£—Ä–æ–≤–µ–Ω—å –ö–ª–∞–Ω–∞: {clan_data["level"]}\nüèÜ –†–µ–π—Ç–∏–Ω–≥: {clan_data["rating"]}\nüë§ –¢–≤–æ—è —Ä–æ–ª—å: {player_accept}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}/{total_members_available}",
        reply_markup=kb)


@dp.callback_query(F.data.startswith("delete_clan:"))
async def handle_delete_clan_request(callback: CallbackQuery, state: FSMContext):
    caller_id = str(callback.from_user.id)
    _, clan_name = callback.data.split(":", 1)

    clan = await load_clan(clan_name)
    if not clan:
        return await callback.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    if caller_id != str(clan.get("owner")):
        return await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω!", show_alert=True)

    # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª–Ω—ã–º –≤–≤–æ–¥–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    try:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n\n<b>{clan_name}</b>\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            parse_mode="HTML"
        )
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º alert
        await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ: –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –≤ —á–∞—Ç.", show_alert=True)

    await state.update_data(clan_to_delete=clan_name, owner_id=caller_id)
    await state.set_state(ClanStates.waiting_for_delete_confirm)


@dp.message(ClanStates.waiting_for_delete_confirm)
async def handle_confirm_delete(message: Message, state: FSMContext):
    data = await state.get_data()
    clan_name = data.get("clan_to_delete")
    owner_id = data.get("owner_id")
    sender_id = str(message.from_user.id)

    # –¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏
    if sender_id != owner_id:
        await state.clear()
        return await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.")

    if message.text.strip() != clan_name:
        await state.clear()
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    clan = await load_clan(clan_name)
    if not clan:
        await state.clear()
        return await message.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.")

    members = clan.get("members", []) or []

    # –û–Ω–æ–≤–∏–º–æ –¥–∞–Ω—ñ –∫–æ–∂–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ —É –≤–∞—à—ñ–π –ë–î (—è–∫—â–æ —î)
    for mid in members:
        try:
            udata = await load_data(str(mid))
            if udata:
                udata["clan"] = None
                await save_data(str(mid), udata)
        except Exception:
            pass

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–Ω —ñ –∑–∞—è–≤–∫–∏ –∑ –ë–î
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM clans WHERE name = ?", (clan_name,))
        cursor.execute("DELETE FROM clan_requests WHERE clan_name = ?", (clan_name,))
        conn.commit()
    finally:
        conn.close()

    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç —ñ —É—á–∞—Å–Ω–∏–∫–∞–º (—è–∫—â–æ –º–æ–∂–Ω–∞)
    await message.answer(f"‚úÖ –ö–ª–∞–Ω \"{clan_name}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

    for mid in members:
        try:
            await bot.send_message(int(mid), f"‚ùóÔ∏è –ö–ª–∞–Ω \"{clan_name}\" –±—ã–ª —Ä–∞—Å–ø—É—â–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.")
        except Exception:
            pass


@dp.callback_query(F.data == "clan_coffer")
async def handle_clan_coffer(query: CallbackQuery):
    user_id = query.from_user.id
    name = query.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        return await query.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    clan_data = await load_clan(str(clan_name))
    clan_level = clan_data["level"]
    player_accept = None
    if str(user_id) == str(clan_data["owner"]):
        player_accept = "–í–ª–∞–¥–µ–ª–µ—Ü"
    elif str(user_id) in clan_data["admins"]:
        player_accept = "–ê–¥–º–∏–Ω"
    elif str(user_id) in clan_data["members"]:
        player_accept = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        return await handle_error(query.from_user.username, "error when checking clan level (player)", user_id, 123)

    if player_accept == "–í–ª–∞–¥–µ–ª–µ—Ü" or player_accept == "–ê–¥–º–∏–Ω":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ö–∞–∑–Ω—É", callback_data="add_money_to_clan_coffer"),
             InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –î–µ–Ω—å–≥–∏", callback_data="give_money_to_player_clan")]])
        return await query.message.edit_text(f"{await gsname(name, user_id)}, —Ç—ã –≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                             reply_markup=kb)
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ö–∞–∑–Ω—É", callback_data="add_money_to_clan_coffer")]])
        return await query.message.edit_text(f"{await gsname(name, user_id)}, —Ç—ã –≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                             reply_markup=kb)


@dp.callback_query(F.data == "give_money_to_player_clan")
async def handle_give_money_to_player_clan(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    name = query.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        return await query.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    clan_data = await load_clan(str(clan_name))
    player_accept = None
    if str(user_id) == str(clan_data["owner"]):
        player_accept = "–í–ª–∞–¥–µ–ª–µ—Ü"
    elif str(user_id) in clan_data["admins"]:
        player_accept = "–ê–¥–º–∏–Ω"
    elif str(user_id) in clan_data["members"]:
        player_accept = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        return await handle_error(query.from_user.username, "error when checking clan level (player)", user_id, 123)

    if player_accept == "–£—á–∞—Å—Ç–Ω–∏–∫":
        return await query.message.edit_text(f"{await gsname(name, user_id)} —Ç—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ —Å—é–¥–∞!")

    await query.message.edit_text(
        f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ mDrops –¥–ª—è –≤—ã–¥–∞—á–∏ (1–∫, 50–∫, 100–∫)\n\n–ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {format_balance(clan_data["coffres"])} mDrops")
    await state.set_state(ClanStates.waiting_for_amount_to_give_from_coffer)


@dp.message(ClanStates.waiting_for_amount_to_give_from_coffer)
async def handle_waiting_for_amount_to_give_from_coffer(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        await state.clear()
        return await msg.answer(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    clan_data = await load_clan(str(clan_name))
    player_accept = None
    if str(user_id) == str(clan_data["owner"]):
        player_accept = "–í–ª–∞–¥–µ–ª–µ—Ü"
    elif str(user_id) in clan_data["admins"]:
        player_accept = "–ê–¥–º–∏–Ω"
    elif str(user_id) in clan_data["members"]:
        player_accept = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        return await handle_error(msg.from_user.username, "error when checking clan level (player)", user_id, 123)

    if player_accept == "–£—á–∞—Å—Ç–Ω–∏–∫":
        await state.clear()
        return await msg.answer(f"{await gsname(name, user_id)} —Ç—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ —Å—é–¥–∞!")

    try:
        amount = parse_bet_input(msg.text)
    except:
        return await msg.answer(
            f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ mDrops –¥–ª—è –≤—ã–¥–∞—á–∏ (1–∫, 50–∫, 100–∫)\n\n–ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {format_balance(clan_data["coffres"])} mDrops")

    if int(clan_data["coffres"]) < int(amount):
        return await msg.answer(
            f"{await gsname(name, user_id)}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mDrops. –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ mDrops –¥–ª—è –≤—ã–¥–∞—á–∏ (1–∫, 50–∫, 100–∫)\n\n–ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {format_balance(clan_data["coffres"])} mDrops")

    await state.update_data(amount=amount)

    await msg.answer(f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    await state.set_state(ClanStates.waiting_for_id_to_give_from_coffer)


@dp.message(ClanStates.waiting_for_id_to_give_from_coffer)
async def handle_waiting_for_amount_to_give_from_coffer(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        await state.clear()
        return await msg.answer(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    clan_data = await load_clan(str(clan_name))
    player_accept = None
    if str(user_id) == str(clan_data["owner"]):
        player_accept = "–í–ª–∞–¥–µ–ª–µ—Ü"
    elif str(user_id) in clan_data["admins"]:
        player_accept = "–ê–¥–º–∏–Ω"
    elif str(user_id) in clan_data["members"]:
        player_accept = "–£—á–∞—Å—Ç–Ω–∏–∫"
    else:
        return await handle_error(msg.from_user.username, "error when checking clan level (player)", user_id, 123)

    if player_accept == "–£—á–∞—Å—Ç–Ω–∏–∫":
        await state.clear()
        return await msg.answer(f"{await gsname(name, user_id)} —Ç—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ —Å—é–¥–∞!")

    target_id = int(msg.text)
    if not str(target_id) in clan_data["members"]:
        await state.clear()
        return await msg.answer(f"{await gsname(name, user_id)} –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–≤–æ–µ–º –∫–ª–∞–Ω–µ!")

    state_data = await state.get_data()

    target_data = await load_data(target_id)
    if not target_data:
        await state.clear()
        return await msg.answer(f"{await gsname(name, user_id)} –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!")

    amount = state_data["amount"]
    clan_data["coffres"] -= amount
    await save_clan(clan_name, clan_data)

    target_data["coins"] += amount
    await save_data(target_id, target_data)

    chat = await bot.get_chat(target_id)
    target_name = chat.first_name

    await msg.answer(
        f"{await gsname(name, user_id)} —Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª {format_balance(amount)} mDrops –∏–≥—Ä–æ–∫—É {await gsname(target_name)} ({html.code(target_id)})!")
    append_log(
        f"{await gsname(name, user_id)} ({html.code(user_id)}) —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª {format_balance(amount)} mDrops –∏–≥—Ä–æ–∫—É {await gsname(target_name)} ({html.code(target_id)})!",
        add_timestamp=True)
    try:
        await bot.send_message(target_id, f"–ê–¥–º–∏–Ω –∫–ª–∞–Ω–∞ \"{clan_name}\" –≤—ã–¥–∞–ª –≤–∞–º {format_balance(amount)} mDrops!")
    except:
        pass
    await state.clear()


@dp.callback_query(F.data == "add_money_to_clan_coffer")
async def handle_clan_coffer(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    name = query.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        return await query.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    await query.message.edit_text(
        f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ mDrops —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∑–Ω—É (1–∫, 5–∫, 100–∫ –∏–ª–∏ –≤—Å–µ)")
    await state.set_state(ClanStates.waiting_for_amount_to_add_coffer)


@dp.message(ClanStates.waiting_for_amount_to_add_coffer)
async def handle_waiting_for_amount_to_add_coffer(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        await state.clear()
        return await msg.answer(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    amount = 0
    try:
        if msg.text in ["–≤—Å–µ", "–≤—Å—ë"]:
            if data["coins"] >= 10:
                amount = int(data["coins"])
            else:
                return await msg.answer(f"{await gsname(name, user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 10 mDrops!",
                                        reply_markup=ckb(user_id))
        elif "–∫" in msg.text:
            amount = parse_bet_input(msg.text)
            if int(amount) < 10:
                return await msg.answer(f"{await gsname(name, user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 10 mDrops!",
                                        reply_markup=ckb(user_id))
        elif msg.text.isdigit():
            amount = int(msg.text)
            if amount < 10:
                return await msg.answer(f"{await gsname(name, user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 10 mDrops!",
                                        reply_markup=ckb(user_id))
        else:
            return await msg.answer(f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!",
                                    reply_markup=ckb(user_id))
    except Exception:
        return await msg.answer(f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=ckb(user_id))

    if amount < 10:
        return await msg.answer(f"{await gsname(name, user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 10 mDrops!",
                                reply_markup=ckb(user_id))

    await msg.answer(f"{PAY_TEXT}", reply_markup=get_buy_kb(user_id, f"clan_pay_coffres_add_wb:{amount}",
                                                            f"clan_pay_coffres_add_wc:{amount}"))


@dp.callback_query(F.data.startswith("clan_pay_coffres_add_wb:"))
async def handle_add_mdrops_to_coffres_wb(qc: CallbackQuery, state: FSMContext):
    user_id = qc.from_user.id
    data = await load_data(user_id)
    name = qc.from_user.first_name

    clan_name = data.get("clan", None)
    clan_data = await load_clan(clan_name)

    _, amount, _ = qc.data.split(":")
    amount = int(amount)

    if int(amount) > int(data["coins"]):
        return await qc.message.edit_text(f"{await gsname(name, user_id)}, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç mDrops!",
                                          reply_markup=ckb(user_id))

    clan_data = await load_clan(clan_name)
    clan_data["coffres"] += amount
    await save_clan(clan_name, clan_data)

    data["coins"] -= amount
    await save_data(user_id, data)
    await state.clear()

    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í –∫–ª–∞–Ω", callback_data="clan_callback")]])
    await qc.message.edit_text(f"{await gsname(name, user_id)}, —Ç—ã –ø–æ–ø–æ–ª–Ω–∏–ª –∫–∞–∑–Ω—É –Ω–∞ {format_balance(amount)} mDrops",
                               reply_markup=kb)


@dp.callback_query(F.data.startswith("clan_pay_coffres_add_wc:"))
async def handle_add_mdrops_to_coffres_wc(qc: CallbackQuery, state: FSMContext):
    user_id = qc.from_user.id
    data = await load_data(user_id)
    name = qc.from_user.first_name

    clan_name = data.get("clan", None)
    clan_data = await load_clan(clan_name)

    _, amount, _ = qc.data.split(":")
    amount = int(amount)

    buy = await pay_with_card(str(user_id), float(amount), note="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞–Ω–∞")
    if not buy[0]:
        return await qc.message.edit_text(f"<b>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã!</b>\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {buy[1]}")

    clan_data = await load_clan(clan_name)
    clan_data["coffres"] += amount
    await save_clan(clan_name, clan_data)

    data["coins"] -= amount
    await save_data(user_id, data)
    await state.clear()

    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í –∫–ª–∞–Ω", callback_data="clan_callback")]])
    await qc.message.edit_text(f"{await gsname(name, user_id)}, —Ç—ã –ø–æ–ø–æ–ª–Ω–∏–ª –∫–∞–∑–Ω—É –Ω–∞ {format_balance(amount)} mDrops",
                               reply_markup=kb)


@dp.callback_query(F.data == "show_clan_members")
async def show_clan_members(callback: CallbackQuery):
    user_id = callback.from_user.id
    caller_str = str(user_id)
    caller_name = callback.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)
    if not clan_name:
        kb = InlineKeyboardMarkup(
            inline_keyboard=([[InlineKeyboardButton(text="üî• –°–æ–∑–¥–∞—Ç—å –ö–ª–∞–Ω", callback_data="create_clan")],
                              [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ö–ª–∞–Ω", callback_data="find_clan")]]))
        return await callback.message.edit_text(f"üòï {await gsname(caller_name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!",
                                                reply_markup=kb)

    clan = await load_clan(clan_name)
    if clan is None:
        return await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    members = clan.get("members", [])
    admins = clan.get("admins", [])
    owner = str(clan.get("owner"))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
    if caller_str == owner:
        caller_role = "owner"
    elif caller_str in admins:
        caller_role = "admin"
    elif caller_str in members:
        caller_role = "member"
    else:
        return await handle_error(callback.from_user.username, "error when checking clan level (player)", user_id, 123)

    # –ü–æ—Å—Ç—Ä–æ–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏–º–µ–Ω–∞) –∏ —Å–ª–æ–≤–∞—Ä—å id -> display
    id_to_display = {}
    operated_members = []
    for m in members:
        try:
            user = await bot.get_chat(m)
            display = user.full_name or (f"@{user.username}" if getattr(user, "username", None) else str(m))
        except Exception:
            display = str(m)
        # –ø–æ–º–µ—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞/–∞–¥–º–∏–Ω–æ–≤
        tag = ""
        if str(m) == owner:
            tag = " (–í–ª–∞–¥–µ–ª–µ—Ü)"
        elif str(m) in admins:
            tag = " (–ê–¥–º–∏–Ω)"
        operated_members.append(f"{display}{tag} ‚Äî {m}")
        id_to_display[str(m)] = display

    members_text = "‚Ä¢ " + "\n‚Ä¢ ".join(operated_members) if operated_members else "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

    # –ü–æ—Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π,
    # –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í —Ç–µ–∫—Å—Ç–∞—Ö –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º'—è (display).
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    for m in members:
        mid = str(m)
        # –Ω–µ –¥–∞—ë–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        if mid == owner:
            continue

        display = id_to_display.get(mid, mid)
        # —É–∫–æ—Ä–æ—Ç–∏–º –¥–æ–≤–≥—ñ —ñ–º–µ–Ω–∞ –¥–æ 24 —Å–∏–º–≤–æ–ª—ñ–≤ —É –∫–Ω–æ–ø–∫–∞—Ö
        short_display = (display[:21] + "...") if len(display) > 24 else display

        row = []
        if caller_role in ("owner", "admin"):
            row.append(
                InlineKeyboardButton(text=f"–í—ã–≥–Ω–∞—Ç—å {short_display}", callback_data=f"kick_member:{mid}:{clan_name}"))
        if caller_role == "owner":
            if mid in admins:
                row.append(InlineKeyboardButton(text=f"–°–Ω—è—Ç—å –∞–¥–º–∏–Ω {short_display}",
                                                callback_data=f"demote_admin:{mid}:{clan_name}"))
            else:
                row.append(InlineKeyboardButton(text=f"–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω {short_display}",
                                                callback_data=f"promote_admin:{mid}:{clan_name}"))

        if row:
            kb.inline_keyboard.append(row)

    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="clan_callback")])

    await callback.message.edit_text(
        f"{await gsname(caller_name, user_id)}, –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ \"{clan_name}\":\n\n{members_text}",
        reply_markup=kb)


@dp.callback_query(F.data.startswith("kick_member:"))
async def handle_kick_member(callback: CallbackQuery):
    try:
        caller_id = str(callback.from_user.id)
        _, target_id, clan_name = callback.data.split(":", 2)
        target_id = str(target_id)

        clan = await load_clan(clan_name)
        if not clan:
            return await callback.message.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        if caller_id != str(clan.get("owner")) and caller_id not in clan.get("admins", []):
            return await callback.message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

        if target_id == str(clan.get("owner")):
            return await callback.message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–≥–Ω–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞!")

        members = clan.get("members", [])
        admins = clan.get("admins", [])

        if target_id not in members:
            return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–ª–∞–Ω–µ.")

        # –£–¥–∞–ª—è–µ–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ –∞–¥–º–∏–Ω–æ–≤
        members = [m for m in members if str(m) != target_id]
        admins = [a for a in admins if str(a) != target_id]

        clan["members"] = members
        clan["admins"] = admins
        await save_clan(clan_name, clan)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            udata = await load_data(target_id)
            if udata:
                udata["clan"] = None
                await save_data(target_id, udata)
        except Exception:
            pass

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –≤—ã–≥–Ω–∞–Ω –∏–∑ –∫–ª–∞–Ω–∞ \"{clan_name}\".")
        try:
            await bot.send_message(target_id, f"‚ùóÔ∏è –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–ª–∞–Ω–∞ \"{clan_name}\".")
        except Exception:
            # –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass

        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try:
            await show_clan_members(callback)
        except Exception:
            pass

    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 999)


@dp.callback_query(F.data.startswith("promote_admin:"))
async def handle_promote_admin(callback: CallbackQuery):
    try:
        caller_id = str(callback.from_user.id)
        _, target_id, clan_name = callback.data.split(":", 2)
        target_id = str(target_id)

        clan = await load_clan(clan_name)
        if not clan:
            return await callback.message.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        if caller_id != str(clan.get("owner")):
            return await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤!")

        if target_id == str(clan.get("owner")):
            return await callback.message.answer("‚ùå –í–ª–∞–¥–µ–ª–µ—Ü —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

        if target_id not in clan.get("members", []):
            return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ.")

        admins = clan.get("admins", [])
        if target_id in admins:
            return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")

        admins.append(target_id)
        clan["admins"] = admins
        await save_clan(clan_name, clan)

        await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º –≤ –∫–ª–∞–Ω–µ \"{clan_name}\".")
        try:
            await bot.send_message(target_id, f"üéñÔ∏è –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–æ–º –≤ –∫–ª–∞–Ω–µ \"{clan_name}\".")
        except Exception:
            pass

        try:
            await show_clan_members(callback)
        except Exception:
            pass

    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 1000)


@dp.callback_query(F.data.startswith("demote_admin:"))
async def handle_demote_admin(callback: CallbackQuery):
    try:
        caller_id = str(callback.from_user.id)
        _, target_id, clan_name = callback.data.split(":", 2)
        target_id = str(target_id)

        clan = await load_clan(clan_name)
        if not clan:
            return await callback.message.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        if caller_id != str(clan.get("owner")):
            return await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤!")

        if target_id == str(clan.get("owner")):
            return await callback.message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å –ø—Ä–∞–≤ (–æ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü).")

        admins = clan.get("admins", [])
        if target_id not in admins:
            return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")

        admins = [a for a in admins if str(a) != target_id]
        clan["admins"] = admins
        await save_clan(clan_name, clan)

        await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–ª–∞–Ω–µ \"{clan_name}\".")
        try:
            await bot.send_message(target_id, f"‚ö†Ô∏è –í–∞—Å –ª–∏—à–∏–ª–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –≤ –∫–ª–∞–Ω–µ \"{clan_name}\".")
        except Exception:
            pass

        try:
            await show_clan_members(callback)
        except Exception:
            pass

    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 1001)


@dp.callback_query(F.data.startswith("leave_clan:"))
async def handle_leave_clan(callback: CallbackQuery):
    try:
        caller_id = str(callback.from_user.id)
        # callback.data —Ñ–æ—Ä–º–∞—Ç: "leave_clan:<clan_name>"
        _, clan_name = callback.data.split(":", 1)

        clan = await load_clan(clan_name)
        if not clan:
            await callback.answer("‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        owner = str(clan.get("owner"))
        members = clan.get("members", [])
        admins = clan.get("admins", [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        if caller_id == owner:
            # –í–ª–∞–¥–µ–ª—å—Ü—É –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ —É–π—Ç–∏ ‚Äî –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∏–ª–∏ —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–Ω
            await callback.answer("‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω. –ü–µ—Ä–µ–¥–∞–π –ø—Ä–∞–≤–∞ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ) –∏–ª–∏ —É–¥–∞–ª–∏ –∫–ª–∞–Ω!",
                                  show_alert=True)
            return

        if caller_id not in members:
            await callback.answer("‚ùå –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —ç—Ç–æ–º –∫–ª–∞–Ω–µ.", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏–∑ –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –±—ã–ª –∞–¥–º–∏–Ω–æ–º)
        members = [m for m in members if str(m) != caller_id]
        admins = [a for a in admins if str(a) != caller_id]

        clan["members"] = members
        clan["admins"] = admins

        await save_clan(clan_name, clan)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_data = await load_data(caller_id)
            if user_data:
                user_data["clan"] = None
                await save_data(caller_id, user_data)
        except Exception:
            # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç
        display_name = None
        try:
            u = await bot.get_chat(int(caller_id))
            display_name = u.full_name or (f"@{u.username}" if getattr(u, "username", None) else caller_id)
        except Exception:
            display_name = caller_id

        await callback.message.answer(f"‚úÖ {display_name} –ø–æ–∫–∏–Ω—É–ª(–∞) –∫–ª–∞–Ω \"{clan_name}\".")

        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –õ–° (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            await bot.send_message(int(owner), f"‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} –ø–æ–∫–∏–Ω—É–ª –∫–ª–∞–Ω \"{clan_name}\".")
        except Exception:
            # –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass

        # –û–±–Ω–æ–≤–∏–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ (–µ—Å–ª–∏ —ç—Ç–æ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ–π –æ –∫–ª–∞–Ω–µ/—Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
        try:
            # –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–∫–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ
            await show_clan_members(callback)
        except Exception:
            # –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
            try:
                await callback.message.edit_text(f"‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω \"{clan_name}\".")
            except Exception:
                pass

        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω.", show_alert=False)

    except Exception as e:
        # –ª–æ–≥ –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await handle_error(callback.from_user.username, e, callback.from_user.id, 1100)
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–ª–∞–Ω–∞.", show_alert=True)
        except Exception:
            pass


@dp.callback_query(F.data == "find_clan")
async def find_clan_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    clans = get_all_clans()

    available_clans = []
    for clan in clans:
        max_members = clan["level"] * 5
        if len(clan["members"]) < max_members:
            available_clans.append(clan)

    if not available_clans:
        return await callback.message.edit_text("üòï –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")

    text = "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞–Ω—ã:\n\n"
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    for clan in available_clans:
        text += f"‚öúÔ∏è {clan['name']} | –£—Ä–æ–≤–µ–Ω—å {clan['level']} | {len(clan['members'])}/{clan['level'] * 5} –º–µ—Å—Ç\n"
        kb.inline_keyboard.append([InlineKeyboardButton(
            text=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ {clan['name']}",
            callback_data=f"join_clan:{clan['name']}"
        )])

    await callback.message.edit_text(text, reply_markup=kb)


@dp.callback_query(F.data == "create_clan")
async def handle_create_new_clan(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if clan_name:
        return await callback.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    kb = InlineKeyboardMarkup(inline_keyboard=(
    [[InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω", callback_data="so_create_clan")],
     [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clan_creation")]]))
    if int(data["GGs"]) >= 150:
        await callback.message.edit_text(
            f"üí∏ –¶–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞: 150 GGs\n\nüíé –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data["GGs"]} GGs\n‚ùì –¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω?",
            reply_markup=kb)
    else:
        await callback.message.edit_text(
            f"üí∏ {await gsname(name, user_id)}, —Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞: 150 GGs\n\nüíé –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data["GGs"]} GGs\n‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {abs(150 - int(data["GGs"]))} GGs —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω!")


@dp.callback_query(F.data == "cancel_clan_creation")
async def handle_cancel_clan_creation(callback: CallbackQuery):
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!")


@dp.callback_query(F.data == "so_create_clan")
async def handle_clan_creation(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if clan_name:
        return await callback.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")
    if int(data["GGs"]) < 150:
        await callback.message.edit_text(
            f"üí∏ {await gsname(name, user_id)}, —Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞: 150 GGs\n\nüíé –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data["GGs"]} GGs\n‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {abs(150 - int(data["GGs"]))} GGs —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω!")

    await callback.message.edit_text(
        f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞\n\n1. –û–Ω–æ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –µ–º–æ–¥–∑–∏\n2. –î–ª–∏–Ω–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤")
    await state.set_state(ClanStates.waiting_for_name)


@dp.message(ClanStates.waiting_for_name)
async def handle_create_clan_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)
    clan_name = message.text
    if await load_clan(clan_name):
        return await message.reply(
            f"‚ùå {await gsname(name, user_id)}, –∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    data["GGs"] -= 150
    await save_data(user_id, data)

    p_clan_name_player = data.get("clan", None)

    if p_clan_name_player:
        return await message.reply(f"üòï {await gsname(name, user_id)}, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")
    if int(data["GGs"]) < 150:
        await message.answer(
            f"üí∏ {await gsname(name, user_id)}, —Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞: 150 GGs\n\nüíé –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data["GGs"]} GGs\n‚ùå –¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {abs(150 - int(data["GGs"]))} GGs —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω!")

    if len(clan_name) > 20:
        return await message.reply(
            f"‚ùå {await gsname(name, user_id)}, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤")
    elif contains_emoji(clan_name):
        return await message.reply(f"‚ùå {await gsname(name, user_id)}, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –µ–º–æ–¥–∑–∏")

    await create_clan(clan_name, str(user_id))
    data["clan"] = clan_name
    await save_data(user_id, data)
    await state.clear()
    return await message.reply(f"üî• {await gsname(name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –∫–ª–∞–Ω \"{clan_name}\"")


@dp.callback_query(F.data.startswith("join_clan:"))
async def handle_join_clan(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    clan_name = callback.data.split(":")[1]

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if data.get("clan"):
        return await callback.message.answer("‚ùå –¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    success = await add_clan_request(user_id, clan_name)
    if success:
        await callback.message.answer(f"üì® –ó–∞—è–≤–∫–∞ –≤ –∫–ª–∞–Ω \"{clan_name}\" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        await callback.message.answer("‚ùå –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞!")


@dp.callback_query(F.data == "clan_requests")
async def handle_clan_requests(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    data = await load_data(user_id)

    clan_name = data.get("clan")
    if not clan_name:
        return await callback.message.answer("‚ùå –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    clan = await load_clan(clan_name)
    if user_id not in clan["admins"] and user_id != clan["owner"]:
        return await callback.message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤!")

    requests = await get_clan_requests(clan_name)
    if not requests:
        kb = InlineKeyboardMarkup(inline_keyboard=[])
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data=f"clan_callback"
            )
        ])
        return await callback.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=kb)
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for req in requests:
        try:
            user = await bot.get_chat(req)
            name = user.full_name
        except:
            name = f"Unknown ({req})"

        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"–ü—Ä–∏–Ω—è—Ç—å {name}",
                callback_data=f"accept_request:{req}:{clan_name}"
            ),
            InlineKeyboardButton(
                text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"reject_request:{req}:{clan_name}"
            )
        ])

    kb.inline_keyboard.append([
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=f"clan_callback"
        )
    ])

    await callback.message.edit_text(f"–ó–∞—è–≤–∫–∏ –≤ –∫–ª–∞–Ω \"{clan_name}\":", reply_markup=kb)


@dp.callback_query(F.data.startswith("accept_request:"))
async def handle_accept_request(callback: CallbackQuery):
    user_id = callback.from_user.id
    _, target_id, clan_name = callback.data.split(":")

    clan = await load_clan(clan_name)
    if str(user_id) not in clan["admins"] and str(user_id) != clan["owner"]:
        return await callback.message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤!")

    target_data = await load_data(target_id)

    if target_data.get("clan", None):
        return await callback.answer("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ!")

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –∫–ª–∞–Ω
    clan["members"].append(target_id)
    await save_clan(clan_name, clan)

    await update_clan_request(target_id, clan_name, "accepted")

    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    data = await load_data(target_id)
    data["clan"] = clan_name
    await save_data(target_id, data)

    await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞–Ω {clan_name}!")
    await bot.send_message(target_id, f"‚úÖ –í–∞—Å –ø—Ä–∏–Ω—è–ª–∏ –≤ –∫–ª–∞–Ω \"{clan_name}\"!")


@dp.callback_query(F.data.startswith("reject_request:"))
async def handle_reject_request(callback: CallbackQuery):
    user_id = callback.from_user.id
    _, target_id, clan_name = callback.data.split(":")

    clan = await load_clan(clan_name)
    if str(user_id) not in clan["admins"] and str(user_id) != clan["owner"]:
        return await callback.message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤!")

    await update_clan_request(target_id, clan_name, "rejected")
    await callback.message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ {target_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")


@dp.callback_query(F.data == "clan_buy_rating")
async def handle_clan_buy_rating(callback: CallbackQuery):
    user_id = callback.from_user.id
    name = callback.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    if not clan_name:
        return await callback.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!")

    cland = await load_clan(clan_name)
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    ggs = data["GGs"]
    sums = []

    if ggs >= 10:
        sums.append(
            InlineKeyboardButton(
                text=f"10",
                callback_data=f"buy_clan_rating:10"
            )
        )
    if ggs >= 50:
        sums.append(
            InlineKeyboardButton(
                text=f"50",
                callback_data=f"buy_clan_rating:50"
            )
        )
    if ggs >= 100:
        sums.append(
            InlineKeyboardButton(
                text=f"100",
                callback_data=f"buy_clan_rating:100"
            )
        )

    if sums:
        kb.inline_keyboard.append(sums)
    if ggs > 0:
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"–í—Å–µ",
                callback_data=f"buy_clan_rating:{ggs}"
            )
        ])
        kb.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                callback_data=f"buy_clan_rating:own"
            )
        ])

    kb.inline_keyboard.append([
        InlineKeyboardButton(
            text=f"–ù–∞–∑–∞–¥",
            callback_data=f"clan_callback"
        )
    ])

    await callback.message.edit_text(
        f"üèÜ {await gsname(name, user_id)}, —Ç—ã –≤ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞!\n\nüí∏ –ö—É—Ä—Å: 1 üèÜ = 1 GGs\nüèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–∞ —Å–µ–π—á–∞—Å: {cland["rating"]}\nüíé –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {ggs} GGs\n‚ùì –°–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å?",
        reply_markup=kb)


@dp.callback_query(F.data.startswith("buy_clan_rating:"))
async def handle_reject_request(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    _, amount = callback.data.split(":")
    name = callback.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    back_button = InlineKeyboardMarkup(
        inline_keyboard=([[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="clan_callback")]]))
    cancel = InlineKeyboardMarkup(inline_keyboard=([[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]))

    if not clan_name:
        return await callback.message.edit_text(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!",
                                                reply_markup=back_button)

    clan = await load_clan(clan_name)
    if int(data["GGs"]) < 1:
        return await callback.message.edit_text(f"üòï {await gsname(name, user_id)}, —É —Ç–µ–±—è –Ω–µ—Ç—É GGs!",
                                                reply_markup=back_button)

    if str(amount) == "own":
        await callback.message.edit_text(
            f"üèÜ {await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å:",
            reply_markup=cancel)
        return await state.set_state(ClanStates.waiting_for_anount_rating_buy)

    if int(amount) > int(data["GGs"]):
        return await callback.message.edit_text(f"üòï {await gsname(name, user_id)}, —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç GGs!",
                                                reply_markup=back_button)

    data["GGs"] -= int(amount)
    await save_data(user_id, data)

    clan["rating"] += int(amount)
    await save_clan(clan_name, clan)

    await callback.message.edit_text(f"üèÜ {await gsname(name, user_id)}, —Ç—ã –ø–æ–ø–æ–ª–Ω–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–∞ –Ω–∞ {amount}!",
                                     reply_markup=back_button)


@dp.message(ClanStates.waiting_for_anount_rating_buy)
async def handle_buy_rating_own(message: Message, state: FSMContext):
    user_id = message.from_user.id
    amount = message.text
    name = message.from_user.first_name

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    clan_name = data.get("clan", None)

    cancel = InlineKeyboardMarkup(inline_keyboard=([[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]))

    if not clan_name:
        return await message.answer(f"üòï {await gsname(name, user_id)}, —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –∫–ª–∞–Ω–µ!", reply_markup=cancel)

    clan = await load_clan(clan_name)
    if int(data["GGs"]) < 1:
        return await message.answer(f"üòï {await gsname(name, user_id)}, —É —Ç–µ–±—è –Ω–µ—Ç—É GGs!", reply_markup=cancel)

    if int(amount) > 0:
        data["GGs"] -= int(amount)
        await save_data(user_id, data)

        clan["rating"] += int(amount)
        await save_clan(str(clan_name), clan)
        back_button = InlineKeyboardMarkup(
            inline_keyboard=([[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="clan_callback")]]))
        await message.answer(f"üèÜ {await gsname(name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–∞ –Ω–∞ {amount}!",
                             reply_markup=back_button)
        await state.clear()


def _safe_load_list(s):
    try:
        if isinstance(s, list):
            return s
        if isinstance(s, str):
            return json.loads(s)
    except Exception:
        return []
    return []


@dp.callback_query(F.data.startswith("top_clans:"))
async def callback_top_clans(query: CallbackQuery):
    """
    Callback data —Ñ–æ—Ä–º–∞—Ç: "top_clans:<page>"
    –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" (callback_data="clan_callback"),
    –∞ —Ç–∞–∫–∂–µ –ª–æ–≥–∏–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        await query.answer()  # —É–±–∏—Ä–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä —É –∫–Ω–æ–ø–∫–∏

        per_page = 10

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        try:
            page = int(query.data.split(":", 1)[1])
        except Exception:
            page = 1
        if page < 1:
            page = 1

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM clans")
        total = cursor.fetchone()[0] or 0
        last_page = max(1, math.ceil(total / per_page))

        if page > last_page:
            page = last_page

        offset = (page - 1) * per_page

        cursor.execute(
            "SELECT name, rating, members, owner, level, coffres FROM clans "
            "ORDER BY rating DESC, name ASC LIMIT ? OFFSET ?",
            (per_page, offset)
        )
        rows = cursor.fetchall()
        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        if not rows:
            text = "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤."
        else:
            lines = [f"üèÜ –¢–æ–ø –∫–ª–∞–Ω–æ–≤ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{last_page}\n"]
            rank = offset + 1
            for name, rating, members_raw, owner, level, coffres in rows:
                members = _safe_load_list(members_raw)
                members_count = len(members)
                lines.append(f"{rank}. {name} ‚Äî {rating} üèÜ ({members_count} üë•)")
                rank += 1
            text = "\n".join(lines)

        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
        rows_kb = []
        if page > 1:
            rows_kb.append([InlineKeyboardButton(text="‚èÆÔ∏è –ù–∞–∑–∞–¥", callback_data=f"top_clans:{page - 1}")])
        rows_kb.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"top_clans:{page}")])
        if page < last_page:
            rows_kb.append([InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚è≠Ô∏è", callback_data=f"top_clans:{page + 1}")])
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –º–µ–Ω—é –∫–ª–∞–Ω–∞
        rows_kb.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="clan_callback")])

        kb = InlineKeyboardMarkup(inline_keyboard=rows_kb)

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert.
        try:
            await query.message.edit_text(text, reply_markup=kb)
        except Exception:
            try:
                await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ–ø –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            except Exception:
                pass

    except Exception:
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø–∞ –∫–ª–∞–Ω–æ–≤.", show_alert=True)
        except Exception:
            pass


@dp.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(f"–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


# -------------- CASES -------------- #

CASES = {
    "bronze": {"emoji": "üü¢", "price": 1000, "name": "–ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å"},
    "silver": {"emoji": "üîµ", "price": 5000, "name": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–µ–π—Å"},
    "gold": {"emoji": "üü£", "price": 20000, "name": "–ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å"},
    "platinum": {"emoji": "‚ö™", "price": 50000, "name": "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∫–µ–π—Å"},
    "diamond": {"emoji": "üíé", "price": 100000, "name": "–ê–ª–º–∞–∑–Ω—ã–π –∫–µ–π—Å"},
    "emerald": {"emoji": "üü©", "price": 200000, "name": "–ò–∑—É–º—Ä—É–¥–Ω—ã–π –∫–µ–π—Å"},
    "ruby": {"emoji": "üî¥", "price": 500000, "name": "–†—É–±–∏–Ω–æ–≤—ã–π –∫–µ–π—Å"},
    "aquamaine": {"emoji": "üí†", "price": 1000000, "name": "–ê–∫–≤–∞–º–∞—Ä–∏–Ω–æ–≤—ã–π –∫–µ–π—Å"},
}


@dp.message(F.text.lower().in_(["/cases", "–∫–µ–π—Å—ã", "–∫–µ–π—Å", "/case", "/cases@gmegadbot", "/case@gmegadbot"]))
async def case_menu(message: Message):
    try:
        kb = InlineKeyboardBuilder()
        for key, case in CASES.items():
            kb.row(InlineKeyboardButton(
                text=f"{case['emoji']} {case['name']} ‚Äì {case['price']} mDrops",
                callback_data=f"buy_case:{key}:{message.from_user.id}"
            ))
        kb.row(InlineKeyboardButton(text="üìÇ –ú–æ–∏ –∫–µ–π—Å—ã", callback_data=f"my_cases:{message.from_user.id}"))
        await message.reply("üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                            reply_markup=kb.as_markup())
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 110)


@dp.callback_query(F.data.startswith("case_back"))
@flood_protect(min_delay=0.5)
async def case_back(callback: CallbackQuery):
    try:
        parts = callback.data.split(":")
        uid = parts[1]
        if int(uid) != int(callback.from_user.id):
            return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")
        kb = InlineKeyboardBuilder()
        for key, case in CASES.items():
            kb.row(InlineKeyboardButton(
                text=f"{case['emoji']} {case['name']} ‚Äì {case['price']} mDrops",
                callback_data=f"buy_case:{key}:{callback.from_user.id}"
            ))
        kb.row(InlineKeyboardButton(text="üìÇ –ú–æ–∏ –∫–µ–π—Å—ã", callback_data=f"my_cases:{callback.from_user.id}"))
        await callback.message.edit_text("üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
                                         reply_markup=kb.as_markup())
    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 110)


@dp.callback_query(F.data.startswith("buy_case:"))
@flood_protect(min_delay=0.5)
async def buy_case(callback: CallbackQuery):
    try:
        user_id = str(callback.from_user.id)
        parts = callback.data.split(":")
        if int(parts[2]) != int(user_id):
            return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")
        data = await load_data(user_id)
        if not data:
            await create_user_data(user_id)

        case_key = callback.data.split(":")[1]

        await callback.message.edit_text(f"{PAY_TEXT}",
                                         reply_markup=get_buy_kb(int(user_id), f"bcwb:{case_key}:{user_id}",
                                                                 f"bcwc:{case_key}:{user_id}"))
    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 112)


@dp.callback_query(F.data.startswith("bcwc:"))
async def buy_case_wc(qc: CallbackQuery):
    user_id = qc.from_user.id
    parts = qc.data.split(":")
    if int(parts[2]) != int(user_id):
        return await qc.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    case_key = parts[1]
    case = CASES[case_key]

    buy = await pay_with_card(str(user_id), float(case["price"]))
    if not buy[0]:
        return await qc.message.edit_text(f"<b>–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏!</b>\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {buy[1]}")

    data = await load_data(user_id)
    inventory = data.setdefault("cases", {})
    inventory[case_key] = inventory.get(case_key, 0) + 1
    await save_data(user_id, data)

    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"case_back:{user_id}"))
    await qc.message.edit_text(
        f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {case['emoji']} <b>{case['name']}</b> –∑–∞ {case['price']} mDrops!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üìÇ <b>–ú–æ–∏ –∫–µ–π—Å—ã</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.",
        reply_markup=kb.as_markup()
    )


@dp.callback_query(F.data.startswith("bcwb:"))
async def buy_case_wb(qc: CallbackQuery):
    user_id = str(qc.from_user.id)
    parts = qc.data.split(":")
    if int(parts[2]) != int(user_id):
        return await qc.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    case_key = parts[1]
    case = CASES[case_key]

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if data["coins"] < case["price"]:
        return await qc.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"case_back:{user_id}")]]))

    # —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞
    data["coins"] -= case["price"]
    inventory = data.setdefault("cases", {})
    inventory[case_key] = inventory.get(case_key, 0) + 1
    await save_data(user_id, data)
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"case_back:{user_id}"))
    await qc.message.edit_text(
        f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {case['emoji']} <b>{case['name']}</b> –∑–∞ {case['price']} mDrops!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üìÇ <b>–ú–æ–∏ –∫–µ–π—Å—ã</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.",
        reply_markup=kb.as_markup()
    )


@dp.callback_query(F.data.startswith("my_cases:"))
@flood_protect(min_delay=0.5)
async def my_cases(callback: CallbackQuery):
    try:
        user_id = str(callback.from_user.id)
        if int(callback.data.split(":")[1]) != int(user_id):
            return await callback.answer(f"–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

        data = await load_data(user_id)
        if not data:
            await create_user_data(user_id)
            data = await load_data(user_id)

        inventory = data.get("cases", {})
        kb = InlineKeyboardBuilder()

        if not inventory:
            return await callback.message.edit_text("üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤.")

        for key, amount in inventory.items():
            if amount > 0:
                case = CASES[key]
                kb.row(InlineKeyboardButton(
                    text=f"{case['emoji']} {case['name']} √ó{amount}",
                    callback_data=f"open_case:{key}:{user_id}"
                ))

        kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"case_back:{user_id}"))
        await callback.message.edit_text("üéí –í–∞—à–∏ –∫–µ–π—Å—ã:", reply_markup=kb.as_markup())
    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 113)


@dp.callback_query(F.data.startswith("open_case:"))
@flood_protect(min_delay=0.5)
async def open_case(callback: CallbackQuery):
    try:
        user_id = str(callback.from_user.id)
        if int(callback.data.split(":")[2]) != int(user_id):
            return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

        data = await load_data(user_id)
        if not data:
            return

        case_key = callback.data.split(":")[1]
        inventory = data.setdefault("cases", {})
        if inventory.get(case_key, 0) <= 0:
            return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–µ–π—Å–∞.", show_alert=True)

        # —Å–ø–∏—Å—ã–≤–∞–µ–º –∫–µ–π—Å
        inventory[case_key] -= 1

        # —Å–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
        grid = ["üí∞" if random.random() < 0.7 else "‚ùå" for _ in range(9)]
        random.shuffle(grid)

        data["current_case"] = {
            "key": case_key,
            "opened": [],
            "grid": grid,
            "owner_id": user_id,
        }
        await save_data(user_id, data)

        await show_case_grid(callback.message, user_id)
    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 114)


async def show_case_grid(message: Message, user_id: str):
    data = await load_data(user_id)
    case_data = data.get("current_case", {})
    opened = case_data.get("opened", [])
    grid = case_data.get("grid", [])

    kb = InlineKeyboardBuilder()
    for i in range(9):
        text = grid[i] if i in opened else "‚ùì"
        kb.button(text=text, callback_data=f"case_click:{i}:{user_id}")

    buttons = list(kb.buttons)
    kb = InlineKeyboardBuilder()
    for i in range(0, 9, 3):
        kb.row(*buttons[i:i + 3])

    await message.edit_text("üéÆ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ 3 —è—á–µ–π–∫–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö:", reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith("case_click:"))
@flood_protect(min_delay=0.5)
async def case_click(callback: CallbackQuery):
    try:
        _, index_str, owner_id = callback.data.split(":")
        index = int(index_str)
        clicker_id = str(callback.from_user.id)

        if clicker_id != owner_id:
            return await callback.answer("‚õî –≠—Ç–æ –Ω–µ –≤–∞—à –∫–µ–π—Å!", show_alert=True)

        data = await load_data(clicker_id)
        case_data = data.get("current_case", {})
        if not case_data or index in case_data["opened"]:
            return await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥.", show_alert=True)

        case_data["opened"].append(index)
        await save_data(clicker_id, data)

        if len(case_data["opened"]) >= 3:
            total_money = 0
            reward_text = ""
            for i in case_data["opened"]:
                reward = case_data["grid"][i]
                if reward == "üí∞":
                    base_price = CASES[case_data["key"]]["price"]
                    amount = random.randint(int(base_price * 0.1), int(base_price * 0.6))
                    total_money += amount
                    reward_text += f"üí∞ +{amount} mDrops\n"
                else:
                    reward_text += "‚ùå –ü—É—Å—Ç–æ\n"

            data["coins"] = data.get("coins", 0) + total_money
            data["current_case"] = None
            await save_data(clicker_id, data)

            kb = InlineKeyboardBuilder()
            kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"case_back:{callback.from_user.id}"))
            await callback.message.edit_text(
                f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏:\n{reward_text} mDrops\nüíµ –í—Å–µ–≥–æ: {total_money} mDrops",
                reply_markup=kb.as_markup()
            )
        else:
            await show_case_grid(callback.message, clicker_id)
    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 115)


# -------------- EXCHANGE -------------- #

TRADE_WINDOW_SECONDS = 60  # –≤—ñ–∫–Ω–æ (—Å–µ–∫) –¥–ª—è rate-limit
MAX_TRADES_PER_WINDOW = 5  # –º–∞–∫—Å —É–≥–æ–¥ –≤ —Ü—å–æ–º—É –≤—ñ–∫–Ω—ñ –¥–ª—è –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞
TRADE_COOLDOWN_SECONDS = 2  # –º—ñ–Ω—ñ–º—É–º —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –æ–∫—Ä–µ–º–∏–º–∏ —É–≥–æ–¥–∞–º–∏ (–¥–æ–¥–∞—Ç–∫–æ–≤–æ)
CONFIRM_EXPIRE_SECONDS = 120  # —Å–∫—ñ–ª—å–∫–∏ –¥—ñ–π—Å–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
CONFIRM_THRESHOLD_GGS = 10.0  # —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å GGs >= —Ü—å–æ–≥–æ - –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
CONFIRM_THRESHOLD_MCOINS = 50000  # —è–∫—â–æ —Å—É–º–∞ mDrops >= —Ü—å–æ–≥–æ - –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è


def init_trade_protection_db():
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS trade_activity (
                uid TEXT PRIMARY KEY,
                window_start REAL,
                trades_count INTEGER,
                last_trade_ts REAL
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS trade_confirms (
                token TEXT PRIMARY KEY,
                uid TEXT,
                order_id INTEGER,
                amount REAL,
                created_at REAL,
                expires_at REAL
            )
        """)
        conn.commit()


# –í–∏–∫–ª–∏–∫–∞–π –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞
init_trade_protection_db()


class ExchangeForm(StatesGroup):
    waiting_price = State()
    waiting_amount = State()
    waiting_deal_amount = State()


def init_exchange_db():
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS exchange_orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                order_type TEXT NOT NULL,
                price REAL NOT NULL,
                amount REAL NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        conn.commit()


init_exchange_db()


def can_start_trade(uid: str):
    """–ü–æ–≤–µ—Ä—Ç–∞—î (can: bool, reason: str_or_None)."""
    now = time.time()
    act = _get_trade_activity(uid)
    if not act:
        return True, None
    window_start = act["window_start"] or 0.0
    trades_count = int(act["trades_count"] or 0)
    last_trade_ts = float(act["last_trade_ts"] or 0.0)

    # cooldown –º—ñ–∂ –æ–∫—Ä–µ–º–∏–º–∏ —É–≥–æ–¥–∞–º–∏
    if now - last_trade_ts < TRADE_COOLDOWN_SECONDS:
        return False, f"–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—á–µ–∫–∞—Ç–∏ {TRADE_COOLDOWN_SECONDS} —Å. –º—ñ–∂ —É–≥–æ–¥–∞–º–∏."

    # —è–∫—â–æ –≤—ñ–∫–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º WINDOW_SECONDS
    if now - window_start <= TRADE_WINDOW_SECONDS:
        if trades_count >= MAX_TRADES_PER_WINDOW:
            return False, f"–õ—ñ–º—ñ—Ç —É–≥–æ–¥: –º–∞–∫—Å–∏–º—É–º {MAX_TRADES_PER_WINDOW} —É–≥–æ–¥ –∑–∞ {TRADE_WINDOW_SECONDS} —Å–µ–∫."
        else:
            return True, None
    else:
        # –≤—ñ–∫–Ω–æ/–ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–∫–∏–¥–∞—î—Ç—å—Å—è
        return True, None


def record_trade(uid: str):
    """–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ—ó —É–≥–æ–¥–∏ ‚Äî –∑–±—ñ–ª—å—à—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫/–æ–Ω–æ–≤–ª—é—î last_trade_ts."""
    now = time.time()
    act = _get_trade_activity(uid)
    if not act:
        _save_trade_activity(uid, now, 1, now)
        return
    window_start = act["window_start"] or 0.0
    trades_count = int(act["trades_count"] or 0)
    last_trade_ts = float(act["last_trade_ts"] or 0.0)

    if now - window_start <= TRADE_WINDOW_SECONDS:
        trades_count += 1
        _save_trade_activity(uid, window_start, trades_count, now)
    else:
        # –Ω–æ–≤–µ –≤—ñ–∫–Ω–æ
        _save_trade_activity(uid, now, 1, now)


def create_trade_confirmation(uid: str, order_id: int, amount: float):
    token = uuid.uuid4().hex
    now = time.time()
    expires = now + CONFIRM_EXPIRE_SECONDS
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO trade_confirms (token, uid, order_id, amount, created_at, expires_at)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (token, uid, order_id, float(amount), now, expires))
        conn.commit()
    return token


def get_trade_confirmation(token: str):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT token, uid, order_id, amount, created_at, expires_at FROM trade_confirms WHERE token = ?", (token,))
        row = cursor.fetchone()
        if not row:
            return None
        return {
            "token": row[0], "uid": row[1], "order_id": row[2],
            "amount": row[3], "created_at": row[4], "expires_at": row[5]
        }


def delete_trade_confirmation(token: str):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM trade_confirms WHERE token = ?", (token,))
        conn.commit()


def _get_trade_activity(uid: str):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT window_start, trades_count, last_trade_ts FROM trade_activity WHERE uid = ?", (uid,))
        row = cursor.fetchone()
        if row:
            return {"window_start": row[0], "trades_count": row[1], "last_trade_ts": row[2]}
        return None


def _save_trade_activity(uid: str, window_start: float, trades_count: int, last_trade_ts: float):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO trade_activity (uid, window_start, trades_count, last_trade_ts)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(uid) DO UPDATE SET window_start=excluded.window_start, trades_count=excluded.trades_count, last_trade_ts=excluded.last_trade_ts
        """, (uid, window_start, trades_count, last_trade_ts))
        conn.commit()


def get_exchange_menu(user_first_name: str):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    kb.inline_keyboard.append([InlineKeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å", callback_data="exchange_buy")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–∞—Ç—å", callback_data="exchange_sell")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º", callback_data="exchange_rates_menu")])
    return kb


def get_exchange_rates_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    kb.inline_keyboard.append(
        [InlineKeyboardButton(text="‚úç –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏", callback_data="exchange_setprice:buy")])
    kb.inline_keyboard.append(
        [InlineKeyboardButton(text="‚úç –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏", callback_data="exchange_setprice:sell")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exchange_menu")])
    return kb


def get_back_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exchange_menu")])
    return kb


def amount_quick_kb_for_create(order_type: str, user_data: dict, price: float):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    if order_type == "buy":
        balance = user_data.get("coins", 0)
        row = []
        for v in (1000, 5000, 10000):
            if balance >= v:
                row.append(InlineKeyboardButton(text=f"{format_balance(v)}", callback_data=f"fill_amount:coins:{v}"))
        if balance > 0:
            row.append(InlineKeyboardButton(text="–í—Å–µ", callback_data=f"fill_amount:coins:all"))
        if row:
            kb.inline_keyboard.append(row)
    else:
        GGs = user_data.get("GGs", 0)
        row = []
        for v in (1, 3, 5):
            if GGs >= v:
                row.append(InlineKeyboardButton(text=str(v), callback_data=f"fill_amount:GGs:{v}"))
        if GGs > 0:
            row.append(InlineKeyboardButton(text="–í—Å–µ", callback_data=f"fill_amount:GGs:all"))
        if row:
            kb.inline_keyboard.append(row)
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_amount")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exchange_menu")])
    return kb


def deal_amount_kb(order_id: int, max_amount: float):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    quick = []
    if max_amount >= 1:
        quick.append(InlineKeyboardButton(text="1", callback_data=f"deal_fill:{order_id}:1"))
    quick.append(InlineKeyboardButton(text="–í—Å–µ", callback_data=f"deal_fill:{order_id}:all"))
    if quick:
        kb.inline_keyboard.append(quick)
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚úè –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"deal_manual:{order_id}")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exchange_menu")])
    return kb


def get_orders(order_type: str, limit: int = 9, offset: int = 0):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        if order_type == "sell":
            cursor.execute("""
                SELECT id, user_id, price, amount FROM exchange_orders
                WHERE order_type = ?
                ORDER BY price DESC
                LIMIT ? OFFSET ?
            """, (order_type, limit, offset))
        else:
            cursor.execute("""
                SELECT id, user_id, price, amount FROM exchange_orders
                WHERE order_type = ?
                ORDER BY price ASC
                LIMIT ? OFFSET ?
            """, (order_type, limit, offset))
        return cursor.fetchall()


def get_order_by_id(order_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, user_id, order_type, price, amount FROM exchange_orders WHERE id = ?", (order_id,))
        return cursor.fetchone()


def update_order_amount(order_id: int, new_amount: float):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        if new_amount <= 0:
            cursor.execute("DELETE FROM exchange_orders WHERE id = ?", (order_id,))
        else:
            cursor.execute("UPDATE exchange_orders SET amount = ? WHERE id = ?", (new_amount, order_id))
        conn.commit()


def save_order(user_id: str, order_type: str, price: float, amount: float):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO exchange_orders (user_id, order_type, price, amount) VALUES (?, ?, ?, ?)",
            (user_id, order_type, price, amount)
        )
        conn.commit()
        return cursor.lastrowid


def user_orders_summary(user_id: str):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, order_type, price, amount FROM exchange_orders WHERE user_id = ?", (user_id,))
        return cursor.fetchall()


async def _get_display_name(bot, user_id: str) -> str:
    try:
        ud = await load_data(str(user_id)) or {}
        name = ud.get("name") or ud.get("first_name") or ud.get("username")
        if name:
            return await gsname(name, user_id)
    except Exception:
        pass
    try:
        user = await bot.get_chat(int(user_id))
        if getattr(user, "first_name", None):
            return await gsname(user.first_name)
        if getattr(user, "username", None):
            return user.username
    except Exception:
        pass
    return f"User_{str(user_id)[-4:]}"


def my_orders_kb(orders):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for oid, otype, price, amount in orders:
        kb.inline_keyboard.append([InlineKeyboardButton(text=f"–£–ø—Ä–∞–≤–ª—è—Ç—å {oid}", callback_data=f"manage_order:{oid}")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exchange_menu")])
    return kb


@dp.callback_query(F.data.startswith("manage_order:"))
@flood_protect(min_delay=0.5)
async def manage_order_cb(query: types.CallbackQuery, state: FSMContext):
    try:
        oid = int(query.data.split(":")[1])
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", show_alert=True)
        return
    order = get_order_by_id(oid)
    if not order:
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    oid, owner_id, order_type, price, amount = order
    if str(query.from_user.id) != str(owner_id):
        await query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞.", show_alert=True)
        return
    owner_name = await _get_display_name(query.bot, owner_id)
    header = (
        f"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–æ–π ID: {oid}\n\nüë§ {owner_name}\n–¢–∏–ø: {'–ü–æ–∫—É–ø–∫–∞' if order_type.upper() == 'BUY' else '–ü—Ä–æ–¥–∞–∂–∞'}\n–ö—É—Ä—Å: {format_balance(price)} mDrops / 1 GGs\n–û—Å—Ç–∞–ª–æ—Å—å: {format_balance(amount)} GGs")
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å", callback_data=f"cancel_order:{oid}")])
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exchange_rates_menu")])
    try:
        await query.message.edit_text(header, reply_markup=kb)
    except Exception:
        await query.message.answer(header, reply_markup=kb)
    await query.answer()


@dp.callback_query(F.data.startswith("cancel_order:"))
@flood_protect(min_delay=0.5)
async def cancel_order_cb(query: types.CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑–µ—Ä–≤–∞ (locked_coins –∏–ª–∏ locked_GGs).
    """
    try:
        oid = int(query.data.split(":")[1])
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", show_alert=True)
        return

    order = get_order_by_id(oid)
    if not order:
        await query.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    oid, owner_id, order_type, price, amount = order
    uid = str(query.from_user.id)
    if uid != str(owner_id):
        await query.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–π –∑–∞—è–≤–∫–∏.", show_alert=True)
        return

    user_data = await load_data(uid) or {}

    if order_type == "buy":
        # –≤–µ—Ä–Ω—É—Ç—å coins –∏–∑ locked_coins –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
        coins_back = float(price) * float(amount)
        user_data["locked_coins"] = max(0.0, float(user_data.get("locked_coins", 0)) - coins_back)
        user_data["coins"] = float(user_data.get("coins", 0)) + coins_back
        await save_data(uid, user_data)
        returned_text = f"üí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {format_balance(coins_back)} mDrops"
    else:  # sell
        # –≤–µ—Ä–Ω—É—Ç—å GGs –∏–∑ locked_GGs
        GGs_back = float(amount)
        user_data["locked_GGs"] = max(0.0, float(user_data.get("locked_GGs", 0)) - GGs_back)
        user_data["GGs"] = float(user_data.get("GGs", 0)) + GGs_back
        await save_data(uid, user_data)
        returned_text = f"üì¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {format_balance(GGs_back)} GGs"

    # —É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
    update_order_amount(oid, 0)

    text = f"‚úÖ –ó–∞—è–≤–∫–∞ ID: {oid} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n{returned_text}"
    try:
        await query.message.edit_text(text, reply_markup=get_back_kb())
    except Exception:
        await query.message.answer(text, reply_markup=get_back_kb())
    await query.answer()


@dp.message(F.text.lower().in_(["/exchange", "exchange", "–æ–±–º–µ–Ω–Ω–∏–∫"]))
async def exchange_menu(message: types.Message):
    if getattr(message.chat, "type", None) != "private":
        kb = InlineKeyboardMarkup(
            inline_keyboard=([[InlineKeyboardButton(text="üçì –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url="t.me/gmegadbot")]]))
        return await message.reply(
            f"üçì –û–±–º–µ–Ω–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ {html.link("–õ–° —Å –±–æ—Ç–æ–º", "t.me/gmegadbot")}!", reply_markup=kb,
            disable_web_page_preview=True
        )

    if not await load_data(str(message.from_user.id)):
        await create_user_data(message.from_user.id)

    await message.answer(
        f"üí± P2P –û–ë–ú–ï–ù–ù–ò–ö\n\n‚Ñπ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å GGs.\nüëá {await gsname(message.from_user.first_name, message.from_user.id)}, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?",
        reply_markup=get_exchange_menu(message.from_user.first_name)
    )


@dp.callback_query(F.data == "exchange_menu")
async def exchange_menu_callback(query: types.CallbackQuery):
    try:
        await query.message.edit_text(
            f"üí± P2P –û–ë–ú–ï–ù–ù–ò–ö\n\n‚Ñπ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å GGs.\nüëá {await gsname(query.from_user.first_name)}, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?",
            reply_markup=get_exchange_menu(query.from_user.first_name)
        )
    except Exception:
        await query.message.answer(
            f"üí± P2P –û–ë–ú–ï–ù–ù–ò–ö\n\n‚Ñπ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å GGs.\nüëá {await gsname(query.from_user.first_name)}, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?",
            reply_markup=get_exchange_menu(query.from_user.first_name)
        )
    await query.answer()


@dp.callback_query(F.data == "exchange_rates_menu")
@flood_protect(min_delay=0.5)
async def exchange_rates_menu(query: types.CallbackQuery):
    uid = str(query.from_user.id)
    orders = user_orders_summary(uid)
    lines = ["üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º\n\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:"]
    if orders:
        for oid, otype, price, amount in orders:
            lines.append(
                f"üî∏ ID: {oid} | {'–ü–æ–∫—É–ø–∫–∞' if otype.upper() == 'BUY' else '–ü—Ä–æ–¥–∞–∂–∞'} | {format_balance(amount)} GGs @ {format_balance(price)} mDrops")
        text = "\n".join(lines)
        try:
            await query.message.edit_text(text, reply_markup=my_orders_kb(orders))
        except Exception:
            await query.message.answer(text, reply_markup=my_orders_kb(orders))
    else:
        lines.append("‚Äî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        text = "\n".join(lines)
        try:
            await query.message.edit_text(text, reply_markup=get_exchange_rates_menu())
        except Exception:
            await query.message.answer(text, reply_markup=get_exchange_rates_menu())
    await query.answer()


@dp.callback_query(F.data.startswith("exchange_setprice:"))
@flood_protect(min_delay=0.5)
async def set_price(query: types.CallbackQuery, state: FSMContext):
    order_type = query.data.split(":")[1]
    await state.update_data(order_type=order_type)
    await state.set_state(ExchangeForm.waiting_price)
    uid = str(query.from_user.id)
    my_orders = user_orders_summary(uid)
    lines = ["üí∞ –í–≤–æ–¥ —Ü–µ–Ω—ã –∑–∞ 1 GG (–≤ mDrops)."]
    relevant = [o for o in my_orders if o[1] == order_type]
    if relevant:
        lines.append("üî∏ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞:")
        for oid, otype, price, amount in relevant:
            lines.append(f"ID:{oid} | {format_balance(amount)} GGs @ {format_balance(price)} mDrops")
    text = "\n".join(lines)
    try:
        await query.message.edit_text(text)
    except Exception:
        await query.message.answer(text)
    await query.answer()


@dp.message(ExchangeForm.waiting_price, F.text.regexp(r"^\d+(\.\d+)?$"))
async def set_price_value(message: types.Message, state: FSMContext):
    price = float(message.text)
    await state.update_data(price=price)
    await state.set_state(ExchangeForm.waiting_amount)
    data = await state.get_data()
    order_type = data.get("order_type", "buy")
    uid = str(message.from_user.id)
    user_data = await load_data(uid) or {}
    if order_type == "buy":
        await message.answer("‚úç –í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ mDrops –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–ª–æ–∂–∏—Ç—å (–±—ã—Å—Ç—Ä–æ-–∫–Ω–æ–ø–∫–∏) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
                             reply_markup=amount_quick_kb_for_create("buy", user_data, price))
    else:
        await message.answer("‚úç –í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ GGs –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–±—ã—Å—Ç—Ä–æ-–∫–Ω–æ–ø–∫–∏) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
                             reply_markup=amount_quick_kb_for_create("sell", user_data, price))


@dp.callback_query(F.data.startswith("fill_amount:"))
@flood_protect(min_delay=0.5)
async def fill_amount_callback(query: types.CallbackQuery, state: FSMContext):
    """
    callback data: fill_amount:<currency>:<amt_or_all>
    currency = 'coins' –∏–ª–∏ 'GGs'
    """
    try:
        _, currency, amt = query.data.split(":")
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", show_alert=True)
        return

    data = await state.get_data()
    order_type = data.get("order_type")
    price = float(data.get("price", 0) or 0)
    uid = str(query.from_user.id)

    user_data = await load_data(uid) or {}

    if currency == "coins":
        # —Å–æ–∑–¥–∞–Ω–∏–µ BUY-–∑–∞—è–≤–∫–∏ ‚Äî —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º coins
        if amt == "all":
            coins = float(user_data.get("coins", 0))
        else:
            try:
                coins = float(amt)
            except Exception:
                await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.", show_alert=True)
                return

        if coins <= 0 or float(user_data.get("coins", 0)) + 1e-9 < coins:
            await query.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mDrops.", show_alert=True)
            return

        # —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º coins
        user_data["coins"] = float(user_data.get("coins", 0)) - coins
        user_data["locked_coins"] = float(user_data.get("locked_coins", 0)) + coins
        await save_data(uid, user_data)

        amount_gg = coins / price if price > 0 else 0.0
        order_id = save_order(uid, order_type, price, amount_gg)

        text = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nID: {order_id}\n–¢–∏–ø: {order_type.upper()}\n"
            f"–ö—É—Ä—Å: {format_balance(price)} mDrops / 1 GGs\n–ö–æ–ª-–≤–æ: {format_balance(amount_gg)} GGs"
        )
        try:
            await query.message.edit_text(text, reply_markup=get_back_kb())
        except Exception:
            await query.message.answer(text, reply_markup=get_back_kb())

    else:
        # currency == "GGs" -> —Å–æ–∑–¥–∞–Ω–∏–µ SELL-–∑–∞—è–≤–∫–∏ ‚Äî —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º GGs
        if amt == "all":
            ggs = float(user_data.get("GGs", 0))
        else:
            try:
                ggs = float(amt)
            except Exception:
                await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.", show_alert=True)
                return

        if ggs <= 0 or float(user_data.get("GGs", 0)) + 1e-9 < ggs:
            await query.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GGs.", show_alert=True)
            return

        # —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º GGs
        user_data["GGs"] = float(user_data.get("GGs", 0)) - ggs
        user_data["locked_GGs"] = float(user_data.get("locked_GGs", 0)) + ggs
        await save_data(uid, user_data)

        order_id = save_order(uid, order_type, price, ggs)
        text = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nID: {order_id}\n–¢–∏–ø: {order_type.upper()}\n"
            f"–ö—É—Ä—Å: {format_balance(price)} mDrops / 1 GGs\n–ö–æ–ª-–≤–æ: {format_balance(ggs)} GGs"
        )
        try:
            await query.message.edit_text(text, reply_markup=get_back_kb())
        except Exception:
            await query.message.answer(text, reply_markup=get_back_kb())

    await state.clear()
    await query.answer()


@dp.callback_query(F.data == "manual_amount")
async def manual_amount_cb(query: types.CallbackQuery):
    try:
        await query.message.edit_text(
            "‚úè –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:\n(–¥–ª—è BUY ‚Äî —Å—É–º–º–∞ –≤ mDrops –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞; –¥–ª—è SELL ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GGs):",
            reply_markup=get_back_kb())
    except Exception:
        await query.message.answer(
            "‚úè –í–≤–µ–¥–∏ —á–∏—Å–ª–æ:\n(–¥–ª—è BUY ‚Äî —Å—É–º–º–∞ –≤ mDrops –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞; –¥–ª—è SELL ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GGs):")
    await query.answer()


@dp.message(ExchangeForm.waiting_amount, F.text.regexp(r"^\d+(\.\d+)?$"))
async def set_amount_value(message: types.Message, state: FSMContext):
    """
    –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—É–º–º—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.
    –ï—Å–ª–∏ order_type == 'buy' ‚Äî –≤–≤–æ–¥–∏—Ç—Å—è —Å—É–º–º–∞ –≤ mDrops (coins).
    –ï—Å–ª–∏ order_type == 'sell' ‚Äî –≤–≤–æ–¥–∏—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GGs.
    """
    uid = str(message.from_user.id)
    data = await state.get_data()
    price = float(data.get("price", 0) or 0)
    order_type = data.get("order_type", "buy")
    amount_input = float(message.text)
    user_data = await load_data(uid) or {}

    if amount_input <= 0:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")

    if order_type == "buy":
        coins_to_deposit = float(amount_input)
        if float(user_data.get("coins", 0)) + 1e-9 < coins_to_deposit:
            return await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mDrops.")
        # —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º coins
        user_data["coins"] = float(user_data.get("coins", 0)) - coins_to_deposit
        user_data["locked_coins"] = float(user_data.get("locked_coins", 0)) + coins_to_deposit
        await save_data(uid, user_data)

        amount_gg = coins_to_deposit / price if price > 0 else 0.0
        order_id = save_order(uid, order_type, price, amount_gg)
        text = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nID: {order_id}\n–ö—É—Ä—Å: {format_balance(price)} mDrops / 1 GGs\n"
            f"–ö–æ–ª-–≤–æ: {format_balance(amount_gg)} GGs"
        )
        await message.answer(text, reply_markup=get_back_kb())

    else:
        # sell
        GGs_to_sell = float(amount_input)
        if float(user_data.get("GGs", 0)) + 1e-9 < GGs_to_sell:
            return await message.answer("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GGs.")
        # —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º GGs
        user_data["GGs"] = float(user_data.get("GGs", 0)) - GGs_to_sell
        user_data["locked_GGs"] = float(user_data.get("locked_GGs", 0)) + GGs_to_sell
        await save_data(uid, user_data)

        order_id = save_order(uid, order_type, price, GGs_to_sell)
        text = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nID: {order_id}\n–ö—É—Ä—Å: {format_balance(price)} mDrops / 1 GGs\n"
            f"–ö–æ–ª-–≤–æ: {format_balance(GGs_to_sell)} GGs"
        )
        await message.answer(text, reply_markup=get_back_kb())

    await state.clear()


@dp.callback_query(F.data == "exchange_buy")
@flood_protect(min_delay=0.5)
async def market_buy(query: types.CallbackQuery):
    orders = get_orders("sell", 9, 0)
    if not orders:
        try:
            await query.message.edit_text("‚ùó –ù–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.", reply_markup=get_back_kb())
        except Exception:
            await query.message.answer("‚ùó –ù–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.", reply_markup=get_back_kb())
        await query.answer()
        return

    lines = ["üìä <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É GGs</b>\n"]
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for oid, uid, price, amount in orders:
        name = await _get_display_name(query.bot, uid)
        total_m = price * amount
        btn_text = f"{name} ‚Ä¢ {int(price)} mDrops"
        kb.inline_keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"deal:{oid}")])
        lines.append(f"üîπ ID: {oid} | {name} | {format_balance(amount)} GGs @ {format_balance(price)} mDrops")
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exchange_menu")])
    text = "\n".join(lines)
    try:
        await query.message.edit_text(text, reply_markup=kb)
    except Exception:
        await query.message.answer(text, reply_markup=kb)
    await query.answer()


@dp.callback_query(F.data == "exchange_sell")
@flood_protect(min_delay=0.5)
async def market_sell(query: types.CallbackQuery):
    orders = get_orders("buy", 9, 0)
    if not orders:
        try:
            await query.message.edit_text("‚ùó –ù–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É.", reply_markup=get_back_kb())
        except Exception:
            await query.message.answer("‚ùó –ù–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É.", reply_markup=get_back_kb())
        await query.answer()
        return

    lines = ["üìä <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É GGs</b>\n", f"{gline()}\n",
             f"{html.blockquote(html.italic("‚ÑπÔ∏è GGs –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –í—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É."))}"]
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for oid, uid, price, amount in orders:
        name = await _get_display_name(query.bot, uid)
        reserved = price * amount
        btn_text = f"{name} ‚Ä¢ {int(price)} mDrops"
        kb.inline_keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"deal:{oid}")])
        # lines.append(f"üîπ ID: {oid} | üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {name} | üí∞ –ó–∞–ø—Ä–æ—Å: {amount} GGs | üí∏ –ö—É—Ä—Å: {price} mDrops = 1 GG | ‚ùáÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ: {format_balance(reserved)} mDrops)")
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exchange_menu")])
    text = "\n".join(lines)
    try:
        await query.message.edit_text(text, reply_markup=kb)
    except Exception:
        await query.message.answer(text, reply_markup=kb)
    await query.answer()


@dp.callback_query(F.data.startswith("deal:"))
@flood_protect(min_delay=0.5)
async def deal_order_prompt(query: types.CallbackQuery, state: FSMContext):
    try:
        order_id = int(query.data.split(":")[1])
    except:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.", show_alert=True)
        return
    order = get_order_by_id(order_id)
    if not order:
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    oid, owner_id, order_type, price, amount = order
    owner_name = await _get_display_name(query.bot, owner_id)
    if order_type == "sell":
        reserved_GGs = amount
        reserved_m = price * amount
        header = (f"üë§ {owner_name}\nüí∏ –ö—É—Ä—Å: {int(price)} mDrops = 1 GGs\nüì¶ –î–æ—Å—Ç—É–ø–Ω–æ: {int(reserved_GGs)} GGs")
    else:
        reserved_coins = price * amount
        header = (
            f"üë§ {owner_name}\nüí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {format_balance(reserved_coins)} mDrops\nüì¶ –ì–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å: {int(amount)} GGs")

    text = (f"\nüöÄ –ö–£–ü–ò–¢–¨ GGs\n{html.code(gline())}\n{header}\n"
            f"{html.code(gline())}\n"
            "‚úè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GGs –¥–ª—è —Å–¥–µ–ª–∫–∏ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç):")
    try:
        await query.message.edit_text(text, reply_markup=deal_amount_kb(oid, amount))
    except Exception:
        await query.message.answer(text, reply_markup=deal_amount_kb(oid, amount))
    await state.update_data(deal_order_id=oid)
    await state.set_state(ExchangeForm.waiting_deal_amount)
    await query.answer()


@dp.callback_query(F.data.startswith("deal_fill:"))
@flood_protect(min_delay=0.5)
async def deal_fill_callback(query: types.CallbackQuery, state: FSMContext):
    # format: deal_fill:<order_id>:<amt_or_all>
    try:
        _, oid_s, amt_s = query.data.split(":")
        oid = int(oid_s)
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", show_alert=True)
        return

    order = get_order_by_id(oid)
    if not order:
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    _, owner_id, order_type, price, amount_available = order
    taker_id = str(query.from_user.id)

    # –ó–∞–ø—Ä–µ—Ç —Ç—Ä–µ–π–¥–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π
    if str(owner_id) == taker_id:
        await query.answer("‚ùó –ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å —Å–¥–µ–ª–∫—É —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π.", show_alert=True)
        return

    # Rate-limit check (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞)
    ok, reason = can_start_trade(taker_id) if 'can_start_trade' in globals() else (True, None)
    if not ok:
        await query.answer(reason, show_alert=True)
        return

    # –ï—Å–ª–∏ "all" ‚Äî –≤—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ
    if amt_s == "all":
        taker_data = await load_data(taker_id) or {}

        if order_type == "sell":
            buyer_coins = float(taker_data.get("coins", 0))
            max_affordable = buyer_coins / float(price) if float(price) > 0 else float(amount_available)
            take_amount = min(float(amount_available), max_affordable)
            if take_amount <= 0:
                await query.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mDrops –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", show_alert=True)
                return

        elif order_type == "buy":
            seller_ggs = float(taker_data.get("GGs", 0))
            take_amount = min(float(amount_available), seller_ggs)
            if take_amount <= 0:
                await query.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GGs –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.", show_alert=True)
                return

        else:
            await query.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏.", show_alert=True)
            return

        require_confirm = True

    else:
        # —á–∏—Å–ª–æ–≤–∞—è —Å—É–º–º–∞
        try:
            take_amount = float(amt_s)
        except Exception:
            await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.", show_alert=True)
            return

        total_cost = float(price) * take_amount
        require_confirm = (
                    take_amount >= CONFIRM_THRESHOLD_GGS or total_cost >= CONFIRM_THRESHOLD_MCOINS) if 'CONFIRM_THRESHOLD_GGS' in globals() else False

    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if take_amount > float(amount_available) + 1e-9:
        await query.answer("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
        return
    if take_amount <= 0:
        await query.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", show_alert=True)
        return

    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî —Å–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω –∏ –∫–Ω–æ–ø–∫—É
    if require_confirm and 'create_trade_confirmation' in globals():
        token = create_trade_confirmation(taker_id, oid, take_amount)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É ‚úÖ", callback_data=f"deal_confirm:{token}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="exchange_menu")]
        ])
        try:
            await query.message.edit_text(
                f"üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\nID: {oid}\n–°—É–º–º–∞: {format_balance(take_amount)} GGs\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É¬ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
                reply_markup=kb
            )
        except Exception:
            await query.message.answer(
                f"üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\nID: {oid}\n–°—É–º–º–∞: {format_balance(take_amount)} GGs\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É¬ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
                reply_markup=kb
            )
        await query.answer()
        return

    # –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É
    try:
        await execute_trade(query, state, oid, take_amount)
        if 'record_trade' in globals():
            record_trade(taker_id)
    except Exception as e:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.", show_alert=True)
        await send_log(f"execute_trade error: {e}")


@dp.callback_query(F.data.startswith("deal_manual:"))
@flood_protect(min_delay=0.5)
async def deal_manual_cb(query: types.CallbackQuery, state: FSMContext):
    oid = int(query.data.split(":")[1])
    order = get_order_by_id(oid)
    if not order:
        await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    oid, owner_id, order_type, price, amount = order
    taker_id = str(query.from_user.id)

    # –∑–∞–ø—Ä–µ—Ç —Å–∞–º–æ—Ç—Ä–µ–π–¥–∞
    if str(owner_id) == taker_id:
        await query.answer("‚ùó –ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å —Å–¥–µ–ª–∫—É —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π.", show_alert=True)
        return

    # Rate-limit
    ok, reason = can_start_trade(taker_id) if 'can_start_trade' in globals() else (True, None)
    if not ok:
        await query.answer(reason, show_alert=True)
        return

    await state.update_data(deal_order_id=oid)
    await state.set_state(ExchangeForm.waiting_deal_amount)
    try:
        await query.message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GGs –¥–ª—è —Å–¥–µ–ª–∫–∏ (—á–∏—Å–ª–æ):", reply_markup=get_back_kb())
    except Exception:
        await query.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GGs –¥–ª—è —Å–¥–µ–ª–∫–∏ (—á–∏—Å–ª–æ):")
    await query.answer()


@dp.message(ExchangeForm.waiting_deal_amount, F.text.regexp(r"^\d+(\.\d+)?$"))
async def deal_manual_amount_entered(message: types.Message, state: FSMContext):
    data = await state.get_data()
    oid = int(data.get("deal_order_id"))
    take_amount = float(message.text)

    order = get_order_by_id(oid)
    if not order:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    _, owner_id, order_type, price, amount_available = order
    taker_id = str(message.from_user.id)

    # –∑–∞–ø—Ä–µ—Ç —Å–∞–º–æ—Ç—Ä–µ–π–¥–∞
    if str(owner_id) == taker_id:
        await message.answer("‚ùó –ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å —Å–¥–µ–ª–∫—É —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π.")
        await state.clear()
        return

    # Rate-limit
    ok, reason = can_start_trade(taker_id) if 'can_start_trade' in globals() else (True, None)
    if not ok:
        await message.answer(reason)
        await state.clear()
        return

    if take_amount <= 0 or take_amount > float(amount_available) + 1e-9:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        await state.clear()
        return

    total_cost = float(price) * take_amount
    require_confirm = (
                take_amount >= CONFIRM_THRESHOLD_GGS or total_cost >= CONFIRM_THRESHOLD_MCOINS) if 'CONFIRM_THRESHOLD_GGS' in globals() else False

    if require_confirm and 'create_trade_confirmation' in globals():
        token = create_trade_confirmation(taker_id, oid, take_amount)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É ‚úÖ", callback_data=f"deal_confirm:{token}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="exchange_menu")]
        ])
        try:
            await message.reply(
                f"üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É ID:{oid} –Ω–∞ {format_balance(take_amount)} GGs ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=kb
            )
        except Exception:
            await message.answer(
                f"üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É ID:{oid} –Ω–∞ {format_balance(take_amount)} GGs ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=kb
            )
        await state.clear()
        return

    # –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –≤—ã–∑—ã–≤–∞–µ–º execute_trade
    class Q:
        pass

    q = Q()
    q.message = message
    q.bot = message.bot
    q.from_user = message.from_user

    try:
        await execute_trade(q, state, oid, take_amount)
        if 'record_trade' in globals():
            record_trade(taker_id)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.")
        print("execute_trade error:", e)
    await state.clear()


@dp.callback_query(F.data.startswith("deal_confirm:"))
@flood_protect(min_delay=0.5)
async def deal_confirm_cb(query: types.CallbackQuery, state: FSMContext):
    # callback_data: deal_confirm:<token>
    try:
        token = query.data.split(":")[1]
    except Exception:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.", show_alert=True)
        return

    conf = get_trade_confirmation(token) if 'get_trade_confirmation' in globals() else None
    if not conf:
        await query.answer("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.", show_alert=True)
        return

    now = time.time()
    if now > float(conf["expires_at"]):
        if 'delete_trade_confirmation' in globals():
            delete_trade_confirmation(token)
        await query.answer("–°—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç—ë–∫.", show_alert=True)
        return

    uid = str(query.from_user.id)
    if uid != str(conf["uid"]):
        await query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç—É —Å–¥–µ–ª–∫—É.", show_alert=True)
        return

    order_id = int(conf["order_id"])
    amount = float(conf["amount"])

    order = get_order_by_id(order_id)
    if not order:
        if 'delete_trade_confirmation' in globals():
            delete_trade_confirmation(token)
        await query.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    _, owner_id, order_type, price, amount_available = order

    # –∑–∞–ø—Ä–µ—Ç —Å–∞–º–æ—Ç—Ä–µ–π–¥–∞ (–¥–æ–ø. –∑–∞—â–∏—Ç–∞)
    if str(owner_id) == uid:
        if 'delete_trade_confirmation' in globals():
            delete_trade_confirmation(token)
        await query.answer("‚ùó –ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å —Å–¥–µ–ª–∫—É —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π.", show_alert=True)
        return

    ok, reason = can_start_trade(uid) if 'can_start_trade' in globals() else (True, None)
    if not ok:
        if 'delete_trade_confirmation' in globals():
            delete_trade_confirmation(token)
        await query.answer(reason, show_alert=True)
        return

    try:
        await execute_trade(query, state, order_id, amount)
        if 'record_trade' in globals():
            record_trade(uid)
        if 'delete_trade_confirmation' in globals():
            delete_trade_confirmation(token)
    except Exception as e:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.", show_alert=True)
        print("execute_trade error:", e)


async def execute_trade(event, state: FSMContext, order_id: int, take_amount: float):
    # message / user extraction
    message = event.message if hasattr(event, "message") else event
    user = event.from_user if hasattr(event, "from_user") else message.from_user

    async def safe_answer(text=None, show_alert: bool = False):
        if not text:
            return
        if hasattr(event, "answer"):
            await event.answer(text, show_alert=show_alert)
        else:
            await message.answer(text)

    order = get_order_by_id(order_id)
    if not order:
        await safe_answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        await state.clear()
        return

    oid, owner_id, order_type, price, amount_available = order
    taker_id = str(user.id)

    # guards
    take_amount = float(take_amount)
    amount_available = float(amount_available)
    if take_amount <= 0:
        await safe_answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.", show_alert=True)
        return
    if take_amount > amount_available + 1e-9:
        await safe_answer("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
        return

    total_cost = float(price) * take_amount

    if order_type == "sell":
        # order owner = –ø—Ä–æ–¥–∞–≤–µ—Ü—å (–≤–æ–Ω–∏ –≤–∂–µ –º–∞–ª–∏ locked_GGs)
        seller_id = str(owner_id)
        buyer_id = taker_id

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–±–æ—Ö (–æ–¥–∏–Ω —Ä–∞–∑ –∫–æ–∂–Ω–æ–≥–æ)
        buyer_data = await load_data(buyer_id) or {}
        seller_data = await load_data(seller_id) or {}

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ø—ñ–≤–µ–ª—å–Ω–æ—ó —Å–ø—Ä–æ–º–æ–∂–Ω–æ—Å—Ç—ñ
        if float(buyer_data.get("coins", 0)) < total_cost - 1e-9:
            await safe_answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mDrops.", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏:
        # - —É –ø–æ–∫—É–ø—Ü—è —Å–ø–∏—Å—É—î–º–æ coins —ñ –¥–æ–¥–∞—î–º–æ GGs
        buyer_data["coins"] = float(buyer_data.get("coins", 0)) - total_cost
        buyer_data["GGs"] = float(buyer_data.get("GGs", 0)) + take_amount

        # - —É –ø—Ä–æ–¥–∞–≤—Ü—è –∑–º–µ–Ω—à—É—î–º–æ reserved (locked_GGs) —ñ –¥–æ–¥–∞—î–º–æ coins
        locked = float(seller_data.get("locked_GGs", 0))
        # –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫ -- –Ω–µ —Ä–æ–±–∏–º–æ negative
        seller_data["locked_GGs"] = max(0.0, locked - take_amount)
        seller_data["coins"] = float(seller_data.get("coins", 0)) + total_cost

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±–∏–¥–≤–∞
        await save_data(buyer_id, buyer_data)
        await save_data(seller_id, seller_data)

        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞—è–≤–∫—É
        new_amount = amount_available - take_amount
        update_order_amount(oid, new_amount)

        text = f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {format_balance(take_amount)} GGs –∑–∞ {format_balance(total_cost)} mDrops."
        try:
            await message.edit_text(text, reply_markup=get_back_kb())
        except Exception:
            await message.answer(text, reply_markup=get_back_kb())

        await state.clear()
        await safe_answer()

    elif order_type == "buy":
        # order owner = –ø–æ–∫—É–ø–µ—Ü—å (–≤–æ–Ω–∏ –≤–∂–µ –º–∞–ª–∏ locked_coins)
        buyer_id_reserved = str(owner_id)  # —Ç–æ–π, —Ö—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ BUY –∑–∞—è–≤–∫—É (—Ä–µ–∑–µ—Ä–≤—É–≤–∞–≤ coins)
        seller_id = taker_id  # —Ç–µ–ø–µ—Ä—ñ—à–Ω—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –ø—Ä–æ–¥–∞–≤–µ—Ü—å

        seller_data = await load_data(seller_id) or {}
        buyer_data = await load_data(buyer_id_reserved) or {}

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –ø—Ä–æ–¥–∞–≤—Ü—è –¥–æ—Å—Ç–∞—Ç–Ω—å–æ GGs (–Ω–µ locked, –±–æ –ø—Ä–æ–¥–∞–≤–µ—Ü—å –Ω–µ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–≤)
        if float(seller_data.get("GGs", 0)) < take_amount - 1e-9:
            await safe_answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GGs.", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏:
        # - —É –ø—Ä–æ–¥–∞–≤—Ü—è —Å–ø–∏—Å—É—î–º–æ GGs —ñ –¥–æ–¥–∞—î–º–æ coins
        seller_data["GGs"] = float(seller_data.get("GGs", 0)) - take_amount
        seller_data["coins"] = float(seller_data.get("coins", 0)) + total_cost

        # - —É –ø–æ–∫—É–ø—Ü—è –∑–º–µ–Ω—à—É—î–º–æ locked_coins —ñ –¥–æ–¥–∞—î–º–æ GGs
        locked_coins = float(buyer_data.get("locked_coins", 0))
        buyer_data["locked_coins"] = max(0.0, locked_coins - total_cost)
        buyer_data["GGs"] = float(buyer_data.get("GGs", 0)) + take_amount

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±–æ—Ö
        await save_data(seller_id, seller_data)
        await save_data(buyer_id_reserved, buyer_data)

        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞—è–≤–∫—É
        new_amount = amount_available - take_amount
        update_order_amount(oid, new_amount)

        text = f"‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ {format_balance(take_amount)} GGs –∏ –ø–æ–ª—É—á–∏–ª–∏ {format_balance(total_cost)} mDrops."
        try:
            await message.edit_text(text, reply_markup=get_back_kb())
        except Exception:
            await message.answer(text, reply_markup=get_back_kb())

        await state.clear()
        await safe_answer()

    else:
        await safe_answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏.", show_alert=True)
        await state.clear()


# -------------- GAMES -------------- #

@dp.callback_query(F.data.startswith("games_page3:"))
async def games_second_page(query: CallbackQuery):
    uid = query.from_user.id
    caller_id = query.data.split(":")[1]

    if int(uid) != int(caller_id):
        return query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2", callback_data=f"games_page2:{uid}")]])
    await query.message.edit_text(
        f"üéÆ {html.italic(await gsname(query.from_user.first_name, query.from_user.id))}, —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 3):\n{gline()}\n"
        f" ‚Ä¢ üõï {html.bold('–ë–∞—à–Ω—è')}. –ü—Ä–∏–º–µ—Ä: –±–∞—à–Ω—è 1–∫\n"
        f"<i>9 —É—Ä–æ–≤–Ω–µ–π, –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Ü–µ - —Ö7.1</i>\n\n"
        f" ‚Ä¢ üì¶ {html.bold('–°—É–Ω–¥—É–∫–∏')}. –ü—Ä–∏–º–µ—Ä: —Å—É–Ω–¥—É–∫–∏ 1–∫\n"
        f"<i>4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ 1 –≤–µ—Ä–Ω—ã–π</i>\n\n"
        f" ‚Ä¢ ü™ô {html.bold('–ú–æ–Ω–µ—Ç–∫–∞')}. –ü—Ä–∏–º–µ—Ä: –º–æ–Ω–µ—Ç–∫–∞ 10–∫\n"
        f"<i>–û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞?</i>\n\n"
        f" ‚Ä¢ üé∞ {html.bold('–°–ª–æ—Ç—ã')}. –ü—Ä–∏–º–µ—Ä: —Å–ª–æ—Ç—ã 2.5–∫\n"
        f"<i>–ú–∞–ª—ã–π —à–∞–Ω—Å - –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à!</i>\n\n", reply_markup=kb)


@dp.callback_query(F.data.startswith("callback_games_from_help:"))
async def handle_callback_games_question(callback: CallbackQuery):
    uid = callback.from_user.id
    ci = callback.data.split(":")[1]
    if int(uid) != int(ci):
        return callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2", callback_data=f"games_page2:{uid}")],
                         [InlineKeyboardButton(text="üìï –ü–æ–º–æ—â—å", callback_data=f"help_callback:{uid}")]])
    await callback.message.edit_text(
        f"üéÆ {html.italic(await gsname(callback.from_user.first_name, callback.from_user.id))}, —Å–ø–∏—Å–æ–∫ –∏–≥—Ä:\n{gline()}\n"
        f" ‚Ä¢ üé∞ {html.bold('–†—É–ª–µ—Ç–∫–∞')}. –ü—Ä–∏–º–µ—Ä: —Ä—É–ª 500 –∫—Ä–∞\n"
        f"<i>–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫: —á–µ–ª, –Ω–µ—á–µ—Ç, –∫—Ä–∞, —á–µ—Ä, –∑–µ–ª, –∑–µ—Ä–æ, 0-11, 12-22, 23-35</i>\n\n"
        f" ‚Ä¢ üöÄ {html.bold('–ö—Ä–∞—à')}. –ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—à 200 3\n"
        f"<i>–ù–µ —Å—Ç–æ–∏—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 10)</i>\n\n"
        f" ‚Ä¢ ‚õèÔ∏è {html.bold('–ó–æ–ª–æ—Ç–æ')}. –ü—Ä–∏–º–µ—Ä: –∑–æ–ª–æ—Ç–æ 2.5–∫\n"
        f"<i>50 –Ω–∞ 50</i>\n\n"
        f" ‚Ä¢ üí£ {html.bold('–ú–∏–Ω—ã')}. –ü—Ä–∏–º–µ—Ä: –º–∏–Ω—ã 250 3\n"
        f"<i>–ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –æ—Ç 1 –¥–æ 6, –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏</i>\n\n"
        f" ‚Ä¢ üí† {html.bold('–ê–ª–º–∞–∑—ã')}. –ü—Ä–∏–º–µ—Ä: –∞–ª–º–∞–∑—ã 5–∫ 1\n"
        f"<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: 2</i>\n\n", reply_markup=kb)


@dp.callback_query(F.data.startswith("callback_games:"))
async def handle_callback_games_question(callback: CallbackQuery):
    uid = callback.from_user.id
    ci = callback.data.split(":")[1]
    if int(uid) != int(ci):
        return callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2", callback_data=f"games_page2:{uid}")],
                         [InlineKeyboardButton(text="üìï –ü–æ–º–æ—â—å", callback_data=f"help_callback:{uid}")]])
    await callback.message.edit_text(
        f"üéÆ {html.italic(await gsname(callback.from_user.first_name, callback.from_user.id))}, —Å–ø–∏—Å–æ–∫ –∏–≥—Ä:\n{gline()}\n"
        f" ‚Ä¢ üé∞ {html.bold('–†—É–ª–µ—Ç–∫–∞')}. –ü—Ä–∏–º–µ—Ä: —Ä—É–ª 500 –∫—Ä–∞\n"
        f"<i>–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫: —á–µ–ª, –Ω–µ—á–µ—Ç, –∫—Ä–∞, —á–µ—Ä, –∑–µ–ª, –∑–µ—Ä–æ, 0-11, 12-22, 23-35</i>\n\n"
        f" ‚Ä¢ üöÄ {html.bold('–ö—Ä–∞—à')}. –ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—à 200 3\n"
        f"<i>–ù–µ —Å—Ç–æ–∏—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 10)</i>\n\n"
        f" ‚Ä¢ ‚õèÔ∏è {html.bold('–ó–æ–ª–æ—Ç–æ')}. –ü—Ä–∏–º–µ—Ä: –∑–æ–ª–æ—Ç–æ 2.5–∫\n"
        f"<i>50 –Ω–∞ 50</i>\n\n"
        f" ‚Ä¢ üí£ {html.bold('–ú–∏–Ω—ã')}. –ü—Ä–∏–º–µ—Ä: –º–∏–Ω—ã 250 3\n"
        f"<i>–ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –æ—Ç 1 –¥–æ 6, –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏</i>\n\n"
        f" ‚Ä¢ üí† {html.bold('–ê–ª–º–∞–∑—ã')}. –ü—Ä–∏–º–µ—Ä: –∞–ª–º–∞–∑—ã 5–∫ 1\n"
        f"<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: 2</i>\n\n", reply_markup=kb)


@dp.message(F.text.lower().in_(["–∏–≥—Ä—ã", "/games", "–∏–≥—Ä–∞—Ç—å", "/game", "/game@swagametrbot", "/games@swagametrbot"]))
async def handle_games_question(message: Message):
    uid = message.from_user.id
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2", callback_data=f"games_page2:{uid}")]])
    await message.reply(
        f"üéÆ {html.italic(await gsname(message.from_user.first_name, message.from_user.id))}, —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1):\n{gline()}\n"
        f" ‚Ä¢ üé∞ {html.bold('–†—É–ª–µ—Ç–∫–∞')}. –ü—Ä–∏–º–µ—Ä: —Ä—É–ª 500 –∫—Ä–∞\n"
        f"<i>–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫: —á–µ–ª, –Ω–µ—á–µ—Ç, –∫—Ä–∞, —á–µ—Ä, –∑–µ–ª, –∑–µ—Ä–æ, 0-11, 12-22, 23-35</i>\n\n"
        f" ‚Ä¢ üöÄ {html.bold('–ö—Ä–∞—à')}. –ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—à 200 3\n"
        f"<i>–ù–µ —Å—Ç–æ–∏—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ 10)</i>\n\n"
        f" ‚Ä¢ ‚õèÔ∏è {html.bold('–ó–æ–ª–æ—Ç–æ')}. –ü—Ä–∏–º–µ—Ä: –∑–æ–ª–æ—Ç–æ 2.5–∫\n"
        f"<i>50 –Ω–∞ 50</i>\n\n"
        f" ‚Ä¢ üí£ {html.bold('–ú–∏–Ω—ã')}. –ü—Ä–∏–º–µ—Ä: –º–∏–Ω—ã 250 3\n"
        f"<i>–ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –æ—Ç 1 –¥–æ 6, –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏</i>\n\n"
        f" ‚Ä¢ üí† {html.bold('–ê–ª–º–∞–∑—ã')}. –ü—Ä–∏–º–µ—Ä: –∞–ª–º–∞–∑—ã 5–∫ 1\n"
        f"<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: 2</i>\n\n", reply_markup=kb)


@dp.callback_query(F.data.startswith("games_page2:"))
async def games_second_page(query: CallbackQuery):
    uid = query.from_user.id
    caller_id = query.data.split(":")[1]

    if int(uid) != int(caller_id):
        return query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1", callback_data=f"callback_games:{uid}"),
         InlineKeyboardButton(text="‚ñ∂Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3", callback_data=f"games_page3:{uid}")]])
    await query.message.edit_text(
        f"üéÆ {html.italic(await gsname(query.from_user.first_name, query.from_user.id))}, —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2):\n{gline()}\n"
        f" ‚Ä¢ üé≥ {html.bold('–ë–æ—É–ª')} (–±–æ—É–ª–∏–Ω–≥). –ü—Ä–∏–º–µ—Ä: –±–æ—É–ª 500\n"
        f"<i>–ò–≥—Ä–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏</i>\n\n"
        f" ‚Ä¢ üî´ {html.bold('–†–†')} (—Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞). –ü—Ä–∏–º–µ—Ä: —Ä—Ä 3–∫\n"
        f"<i>–° –∫–∞–∂–¥—ã–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏ —à–∞–Ω—Å –ø–æ—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ</i>\n\n"
        f" ‚Ä¢ üèÄ {html.bold('–ë–∞—Å–∫–µ—Ç–±–æ–ª–ª')}. –ü—Ä–∏–º–µ—Ä: –±–∞—Å–∫ 2.5–∫\n"
        f"<i>–ü—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ—é –º–µ—Ç–∫–æ—Å—Ç—å?</i>\n\n"
        f" ‚Ä¢ üé≤ {html.bold('–ö—É–±–∏–∫')}. –ü—Ä–∏–º–µ—Ä: –∫—É–±–∏–∫ 10–∫ –Ω–µ—á–µ—Ç\n"
        f"<i>–ß–µ—Ç/–Ω–µ—á–µ—Ç - —Ö1.9, —á–∏—Å–ª–∞ 1-6 - —Ö3.5</i>\n\n"
        f" ‚Ä¢ ‚öîÔ∏è {html.bold('–î—É—ç–ª—å')}. –ü—Ä–∏–º–µ—Ä: –¥—É—ç–ª—å 5–∫\n"
        f"<i>–ë—Ä–æ—Å–∞–π—Ç–µ –∫—É–±–∏–∫–∏, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ!</i>\n\n", reply_markup=kb)


@dp.message(F.text.lower().startswith("–∫—Ä–∞—à"))
async def handle_crash(message: types.Message):
    try:
        text = message.text.strip()
        args = text.split()
        if len(args) != 3:
            return await message.reply(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫—Ä–∞—à (—Å—É–º–º–∞) (–º–Ω–æ–∂–∏—Ç–µ–ª—å)\n–ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—à 100 2.5"
            )

        user_id = str(message.from_user.id)
        data = await load_data(user_id)

        if not data:
            await create_user_data(user_id)
            data = await load_data(user_id)

        balance = data["coins"]

        try:
            if args[1].lower() in ["–≤—Å–µ", "–≤—Å—ë"]:
                amount = balance
            else:
                amount = args[1]
                amount = parse_bet_input(amount)
            multiplier = float(args[2])
        except ValueError:
            return await message.reply(
                f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
                f"{html.code(gline())}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—Ä–∞—à 100 2.5')}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—Ä–∞—à –≤—Å–µ 5')}"
            )

        if amount <= 9:
            return await message.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops")
        if balance < amount:
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!")
        if multiplier < 1.01 or multiplier > 10:
            return await message.reply("‚ùå –¢–æ—á–∫–∞ –∫—Ä–∞—à–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1.01 –¥–æ 10!")

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º amount –≤ int (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ parse –≤–µ—Ä–Ω—É–ª str)
        amount = int(parse_bet_input(amount))

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∑–∞—Ä–∞–Ω–µ–µ
        data["coins"] -= amount

        # ----------------- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø -----------------
        # –¶–µ–ª—å: —á–∞—â–µ –Ω–∏–∑–∫–∏–µ –∫—Ä–∞—à–∏, —Ä–µ–∂–µ –±–æ–ª—å—à–∏–µ ‚Äî –∏–≥—Ä–æ–∫–∏ –∏–Ω–æ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç, –Ω–æ –≤ –¥–æ–ª–≥–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç.
        r = random.random()

        if r < 0.15:
            # 15% ‚Äî –º–∏—Ç—Ç—î–≤–∏–π –∫—Ä–∞—à (1.00)
            crash_multiplier = 1.00
        elif r < 0.65:
            # 70% ‚Äî 1.01‚Äì1.99
            crash_multiplier = round(random.uniform(1.01, 1.99), 2)
        elif r < 0.85:
            # 10% ‚Äî 2.00‚Äì2.99
            crash_multiplier = round(random.uniform(2.00, 2.99), 2)
        elif r < 0.95:
            # 4% ‚Äî 3.00‚Äì5.99
            crash_multiplier = round(random.uniform(3.00, 5.99), 2)
        else:
            # 1% ‚Äî 6.00‚Äì10.00
            crash_multiplier = round(random.uniform(6.00, 10.00), 2)
        # ---------------------------------------------------------------

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–¥–µ—Ä–∂–∫—É/–∞–Ω–∏–º–∞—Ü–∏—é, –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å asyncio.sleep(1) –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º

        if crash_multiplier >= multiplier:
            win = round(amount * multiplier)
            data["coins"] += win
            result_text = (
                f"üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç: {crash_multiplier}x\n"
                f"‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_balance(win)} mDrops (—Å—Ç–∞–≤–∫–∞: {format_balance(amount)} mDrops √ó {multiplier}x)"
            )
            data["won_coins"] = data.get("won_coins", 0) + int(amount)
        else:
            result_text = (
                f"üí• –†–µ–∑—É–ª—å—Ç–∞—Ç: {crash_multiplier}x\n"
                f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_balance(amount)} mDrops (—Ü–µ–ª—å: {multiplier}x)"
            )
            data["lost_coins"] = data.get("lost_coins", 0) + int(amount)

        await save_data(user_id, data)
        await message.reply(result_text)
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 116)


@dp.message(F.text.lower().startswith("–∫–æ—Å—Ç–∏"))
async def play_dice(message: Message):
    try:
        user_id = str(message.from_user.id)
        parts = message.text.strip().lower().split()

        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: –∫–æ—Å—Ç–∏ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–º|–±|—Ä–∞–≤–Ω–æ>
        if len(parts) != 3:
            return await message.reply(
                f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n{html.code("‚ûº ‚ûº ‚ûº ‚ûº ‚ûº ‚ûº ‚ûº ‚ûº ‚ûº ‚ûº ‚ûº")}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫–æ—Å—Ç–∏ 250 –º')}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫–æ—Å—Ç–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ')}")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ data
        data = await load_data(user_id)

        if not data:
            await create_user_data(user_id)
            data = await load_data(user_id)

        balance = data["coins"]
        bet = 0
        # –ü–∞—Ä—Å–∏–º —Å—Ç–∞–≤–∫—É
        bet_str = parts[1]
        if bet_str in ["–≤—Å–µ", "–≤—Å—ë"]:
            bet = balance
        elif "–∫" in bet_str:
            bet = parse_bet_input(bet_str)
        elif parts[1].isdigit():
            bet = int(parts[1])
        else:
            return await message.reply(
                f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n{gline()}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫–æ—Å—Ç–∏ 250 –º')}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫–æ—Å—Ç–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ')}")

        if bet <= 0 or balance < bet:
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")

        # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä ¬´–º¬ª, ¬´–±¬ª –∏–ª–∏ ¬´—Ä–∞–≤–Ω–æ¬ª
        choice = parts[2]
        if choice not in ["–º", "–±", "—Ä–∞–≤–Ω–æ"]:
            return await message.reply(
                f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n{gline()}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫–æ—Å—Ç–∏ 250 –º')}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫–æ—Å—Ç–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ')}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–æ–∫
        d1_raw = await message.reply_dice(emoji="üé≤")
        d2_raw = await message.reply_dice(emoji="üé≤")
        d1 = d1_raw.dice.value
        d2 = d2_raw.dice.value
        total = d1 + d2

        # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        data["coins"] = balance - bet

        result_lines = [f"üé≤ –ö–æ—Å—Ç–∏: {d1} + {d2} = {total}"]
        win = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
        if choice == "–º" and total < 7:
            win = round(bet * 2.25)
            result_lines.append(f"‚úÖ –í—ã —É–≥–∞–¥–∞–ª–∏ ¬´–º–µ–Ω—å—à–µ¬ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_balance(win)} mDrops")
            data["won_coins"] += int(bet)
        elif choice == "–±" and total > 7:
            win = round(bet * 2.25)
            result_lines.append(f"‚úÖ –í—ã —É–≥–∞–¥–∞–ª–∏ ¬´–±–æ–ª—å—à–µ¬ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_balance(win)} mDrops")
            data["won_coins"] += int(bet)
        elif choice == "—Ä–∞–≤–Ω–æ" and total == 7:
            win = round(bet * 5)
            result_lines.append(f"üéØ –í—ã —É–≥–∞–¥–∞–ª–∏ ¬´—Ä–∞–≤–Ω–æ¬ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_balance(win)} mDrops")
            data["won_coins"] += int(bet)
        else:
            result_lines.append(f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_balance(bet)} mDrops.")
            data["lost_coins"] += int(bet)

        # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if win > 0:
            data["coins"] += win

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ data
        await save_data(user_id, data)
        await asyncio.sleep(4)
        await message.reply("\n".join(result_lines))
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 117)


# –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —ñ–≤–µ–Ω—Ç—ñ–≤ –ø–æ –∫–æ–∂–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é (–≤ –ø–∞–º'—è—Ç—ñ –ø—Ä–æ—Ü–µ—Å—É)
user_gold_locks = {}  # user_id -> asyncio.Lock()


def _get_user_lock(user_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ asyncio.Lock –¥–ª—è user_id (–ª–µ–Ω–∏–≤–æ, –±–µ–∑ —è–≤–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤)."""
    lock = user_gold_locks.get(user_id)
    if lock is None:
        lock = __import__("asyncio").Lock()
        user_gold_locks[user_id] = lock
    return lock


def generate_game_id():
    try:
        return __import__("uuid").uuid4().hex
    except Exception:
        generate_game_id._cnt = getattr(generate_game_id, "_cnt", 0) + 1
        return f"g{generate_game_id._cnt}"


# ---- –†–µ–Ω–¥–µ—Ä–∏ ----
def render_gold_game(game):
    stake = int(game["stake"])
    level = int(game["current_level"])
    levels = len(GOLD_MULTIPLIERS)

    current_multiplier = GOLD_MULTIPLIERS[level - 1] if level > 0 and (level - 1) < levels else 0
    next_multiplier = GOLD_MULTIPLIERS[level] if level < levels else GOLD_MULTIPLIERS[-1]

    current_amount = int(round(stake * current_multiplier))
    next_amount = int(round(stake * next_multiplier))

    rows = []
    for i in reversed(range(levels)):
        if i < len(game["path"]):
            left = "üí∞" if game["path"][i] == 0 else "‚ùì"
            right = "üí∞" if game["path"][i] == 1 else "‚ùì"
        else:
            left = right = "‚ùì"

        value = f" {format_balance(int(round(stake * GOLD_MULTIPLIERS[i])))}"
        rows.append(f"|{left}|{right}|{value} mDrops ({GOLD_MULTIPLIERS[i]}x)")

    text = (
            "–í—ã–±–µ—Ä–∏ —è—á–µ–π–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É –ó–æ–ª–æ—Ç–æ!\n"
            f"{gline()}\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑: {current_multiplier}x / {format_balance(current_amount)} mDrops\n"
            f"‚ö°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —è—á–µ–π–∫–∞: {next_multiplier}x / {format_balance(next_amount)} mDrops\n\n"
            + "\n".join(rows)
    )
    return text


async def render_gold_result(game, lost=False, collected=False, winnings=None, multiplier=None):
    stake = int(game["stake"])
    bad_cells = game.get("bad_cells", [])
    path = game.get("path", [])
    levels = len(GOLD_MULTIPLIERS)

    rows = []
    for i in reversed(range(levels)):
        bad = bad_cells[i] if i < len(bad_cells) else 0
        value = f" {format_balance(int(round(stake * GOLD_MULTIPLIERS[i])))}"

        if i < len(path):
            picked = path[i]
            if picked == bad:
                # –≤–∏–±—Ä–∞–Ω–∞ –±–æ–º–±–∞
                left = "üí•" if picked == 0 else "üí∏"
                right = "üí∏" if picked == 0 else "üí•"
            else:
                left = "üí∞" if picked == 0 else "üß®"
                right = "üí∞" if picked == 1 else "üß®"
        else:
            # –í–ê–ñ–õ–ò–í–û: –∫–æ–ª–∏ –ø—Ä–æ–≥—Ä–∞—à ‚Äî —ñ–Ω–¥–µ–∫—Å –ø—Ä–æ–≥—Ä–∞–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ = len(path) - 1
            if lost and i == len(path) - 1:
                # –ø–æ–∫–∞–∂–µ–º–æ —Å–∞–º–µ —Ç—É –±–æ–º–±—É, —è–∫–∞ –≤–∏–±–∏–ª–∞—Å—å
                if bad == 0:
                    left, right = "üí•", "üí∏"
                else:
                    left, right = "üí∏", "üí•"
            else:
                left = "üí∏" if bad == 0 else "üß®"
                right = "üí∏" if bad == 1 else "üß®"

        rows.append(f"|{left}|{right}| {value} mDrops ({GOLD_MULTIPLIERS[i]}x)")

    if lost:
        head = "üí• –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
        plyr_data = await load_data(game["player_id"])
        plyr_data["lost_coins"] = int(plyr_data.get("lost_coins", 0)) + int(game["stake"])
        # –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –ø–æ—Ä–∞–∑–∫–∏
        if "gold_games" in plyr_data:
            # —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ gold_games -> –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ game_id (—è–∫—â–æ —î)
            gid = game.get("game_id")
            if gid and gid in plyr_data["gold_games"]:
                del plyr_data["gold_games"][gid]
            # —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑—ñ —Å—Ç–∞—Ä–∏–º –ø–æ–ª–µ–º:
            if "gold_game" in plyr_data:
                del plyr_data["gold_game"]
        await save_data(game["player_id"], plyr_data)
    elif collected:
        head = f"ü§ë –¢—ã –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à!\n–°—Ç–∞–≤–∫–∞: {format_balance(stake)} mDrops\n–í—ã–∏–≥—Ä—ã—à: {format_balance(winnings)} mDrops (x{multiplier})"
        plyr_data = await load_data(game["player_id"])
        if "gold_games" in plyr_data:
            gid = game.get("game_id")
            if gid and gid in plyr_data["gold_games"]:
                del plyr_data["gold_games"][gid]
            if "gold_game" in plyr_data:
                del plyr_data["gold_game"]
        await save_data(game["player_id"], plyr_data)
    else:
        head = "üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:"

    return head + f"\n{gline()}\n" + "\n".join(rows)


# ---- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ (–ø–æ–≤–µ—Ä—Ç–∞—î InlineKeyboardMarkup; –ø—Ä–∏–ø—É—Å–∫–∞—î—Ç—å—Å—è, —â–æ InlineKeyboardMarkup/InlineKeyboardButton –¥–æ—Å—Ç—É–ø–Ω—ñ) ----
def gold_keyboard(player_id: str, game_id: str, level: int):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î InlineKeyboardMarkup (—Å—Ç–≤–æ—Ä—ñ—Ç—å InlineKeyboardButton –∑ callback_data —É –≤–∏–≥–ª—è–¥—ñ:
    gold_choose:{player_id}:{game_id}:{level}:{choice}, gold_collect:{player_id}:{game_id}, gold_cancel:{player_id}:{game_id})
    """
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    if level == 0:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ùì", callback_data=f"gold_choose:{player_id}:{game_id}:{level}:0"),
                    InlineKeyboardButton(text="‚ùì", callback_data=f"gold_choose:{player_id}:{game_id}:{level}:1")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"gold_cancel:{player_id}:{game_id}")
                ]
            ]
        )
    else:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ùì", callback_data=f"gold_choose:{player_id}:{game_id}:{level}:0"),
                    InlineKeyboardButton(text="‚ùì", callback_data=f"gold_choose:{player_id}:{game_id}:{level}:1")
                ],
                [
                    InlineKeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", callback_data=f"gold_collect:{player_id}:{game_id}")
                ]
            ]
        )


# ---- –û–±—Ä–æ–±–Ω–∏–∫–∏ (–≤—Å—Ç–∞–≤—Ç–µ —è–∫ handlers –≤ –≤–∞—à–æ–º—É –±–æ—Ç—ñ) ----
@dp.message(F.text.lower().startswith("–∑–æ–ª–æ—Ç–æ"))
async def start_gold_game_handler(message: Message):
    try:
        parts = (message.text or "").strip().split()
        user_id = str(message.from_user.id)
        data = await load_data(user_id)

        if len(parts) != 2:
            return await message.reply(
                f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n{gline()}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∑–æ–ª–æ—Ç–æ 25–∫')}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∑–æ–ª–æ—Ç–æ –≤—Å–µ')}")
        # –ø–∞—Ä—Å–∏–º —Å—Ç–∞–≤–∫—É
        arg = parts[1].lower()
        if arg in ["–≤—Å–µ", "–≤—Å—ë"]:
            stake = int(data.get("coins", 0))
        elif "–∫" in arg or arg.endswith("k"):
            stake = parse_bet_input(arg)
        elif arg.replace(".", "", 1).isdigit():
            stake = int(float(arg))
        else:
            await message.reply(
                f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n{gline()}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∑–æ–ª–æ—Ç–æ 25–∫')}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∑–æ–ª–æ—Ç–æ –≤—Å–µ')}")

        if stake <= 0 or stake > int(data.get("coins", 0)):
            return await message.reply("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")

        levels = len(GOLD_MULTIPLIERS)
        if levels <= 0:
            return await message.reply("‚ö†Ô∏è –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Ä–∞–∑—Ä–∞–± –¥–∞—É–Ω).")

        rnd = __import__("random")
        bad_cells = [rnd.randint(0, 1) for _ in range(levels)]
        game_id = generate_game_id()

        game_data = {
            "game_id": game_id,
            "stake": int(stake),
            "bad_cells": bad_cells,
            "current_level": 0,
            "path": [],
            "state": "playing",
            "player_id": user_id,
            "started_at": int(__import__("time").time())
        }

        # —Å–ø–∏—Å—É—î–º–æ —Å—Ç–∞–≤–∫—É —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä—É —É —Å–ª–æ–≤–Ω–∏–∫—É gold_games
        data["coins"] = int(data.get("coins", 0)) - int(stake)
        if "gold_games" not in data or not isinstance(data["gold_games"], dict):
            data["gold_games"] = {}
        data["gold_games"][game_id] = game_data
        await save_data(user_id, data)

        msg_wait = await message.reply("üîó –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...")
        game = await message.reply(
            render_gold_game(game_data),
            reply_markup=gold_keyboard(user_id, game_id, game_data["current_level"])
        )
        await asyncio.sleep(0.5)
        if game:
            return await msg_wait.delete()
        for i in range(8):
            await asyncio.sleep(0.5)
            if game:
                return await msg_wait.delete()
        await asyncio.sleep(1)
        if not game:
            await msg_wait.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã, —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞")
            data["coins"] += stake
            await save_data(user_id, data)

    except Exception as e:
        await handle_error(getattr(message.from_user, "username", None), e, message.from_user.id, 118)


@dp.callback_query(F.data.startswith("gold_choose"))
@flood_protect(min_delay=0.5)
async def handle_gold_choice(callback: CallbackQuery):
    try:
        parts = (callback.data or "").split(":")  # ["gold_choose", player_id, game_id, level, choice]
        if len(parts) != 5:
            return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

        _, player_id, game_id, level_str, choice_str = parts
        user_id = str(callback.from_user.id)

        if user_id != player_id:
            return await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∏–≥—Ä–∞ –∏–ª–∏ —Ç—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª!", show_alert=True)

        lock = _get_user_lock(player_id)
        async with lock:
            data = await load_data(player_id)
            games = data.get("gold_games", {}) or {}
            game = games.get(game_id)

            if not game or game.get("state") != "playing":
                return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

            try:
                choice = int(choice_str)
                level = int(level_str)
            except ValueError:
                return await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)

            if game["current_level"] != level:
                return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã.", show_alert=True)

            levels = len(GOLD_MULTIPLIERS)
            if level < 0 or level >= levels:
                return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.", show_alert=True)

            # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–æ–º–±—É
            if game["bad_cells"][level] == choice:
                game["state"] = "lost"
                game["path"].append(choice)
                data["lost_coins"] = int(data.get("lost_coins", 0)) + int(game["stake"])
                # –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É
                if "gold_games" in data and game_id in data["gold_games"]:
                    del data["gold_games"][game_id]
                await save_data(player_id, data)
                return await callback.message.edit_text(await render_gold_result(game, lost=True))

            # –≤–¥–∞–ª–∏–π –≤–∏–±—ñ—Ä
            game["path"].append(choice)
            game["current_level"] += 1

            # –ø–µ—Ä–µ–º–æ–≥–∞ ‚Äî –ø—Ä–æ–π—à–æ–≤ –≤—Å—ñ —Ä—ñ–≤–Ω—ñ
            if game["current_level"] >= levels:
                game["state"] = "won"
                multiplier = GOLD_MULTIPLIERS[levels - 1]
                winnings = int(round(game["stake"] * multiplier))
                data["coins"] = int(data.get("coins", 0)) + int(winnings)
                data["won_coins"] = int(data.get("won_coins", 0)) + int(winnings)
                # –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –≤–∏–≥—Ä–∞—à—É
                if "gold_games" in data and game_id in data["gold_games"]:
                    del data["gold_games"][game_id]
                await save_data(player_id, data)
                return await callback.message.edit_text(
                    f"üéâ –¢—ã –ø—Ä–æ—à–µ–ª –≤—Å–µ —É—Ä–æ–≤–Ω–∏!\n–í—ã–∏–≥—Ä—ã—à: {format_balance(winnings)} mDrops"
                )

            # –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≥—Ä—É
            data["gold_games"][game_id] = game
            await save_data(player_id, data)
            await callback.message.edit_text(
                render_gold_game(game),
                reply_markup=gold_keyboard(player_id, game_id, game["current_level"])
            )

    except Exception as e:
        await handle_error(getattr(callback.from_user, "username", None), e, callback.from_user.id, 119)


@dp.callback_query(F.data.startswith("gold_collect"))
@flood_protect(min_delay=0.5)
async def collect_prize(callback: CallbackQuery):
    try:
        parts = (callback.data or "").split(":")
        if len(parts) != 3:
            return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        _, player_id, game_id = parts
        user_id = str(callback.from_user.id)

        if user_id != player_id:
            return await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)

        lock = _get_user_lock(player_id)
        async with lock:
            data = await load_data(player_id)
            games = data.get("gold_games", {}) or {}
            game = games.get(game_id)

            if not game or game.get("state") != "playing":
                return await callback.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)

            level = int(game["current_level"])
            if level <= 0:
                return await callback.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ ‚Äî –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–æ–¥.", show_alert=True)

            multiplier = GOLD_MULTIPLIERS[level - 1]
            winnings = int(round(game["stake"] * multiplier))

            data["coins"] = int(data.get("coins", 0)) + int(winnings)
            data["won_coins"] = int(data.get("won_coins", 0)) + int(winnings)
            game["state"] = "collected"

            if "gold_games" in data and game_id in data["gold_games"]:
                del data["gold_games"][game_id]
            await save_data(player_id, data)

            return await callback.message.edit_text(
                await render_gold_result(game, collected=True, winnings=winnings, multiplier=multiplier))
    except Exception as e:
        await handle_error(getattr(callback.from_user, "username", None), e, callback.from_user.id, 120)


@dp.callback_query(F.data.startswith("gold_cancel"))
@flood_protect(min_delay=0.5)
async def cancel_gold_game(callback: CallbackQuery):
    try:
        parts = (callback.data or "").split(":")
        if len(parts) != 3:
            return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        _, player_id, game_id = parts
        user_id = str(callback.from_user.id)

        if user_id != player_id:
            return await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∏–≥—Ä–∞ –∏–ª–∏ —Ç—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª!", show_alert=True)

        lock = _get_user_lock(player_id)
        async with lock:
            data = await load_data(player_id)
            games = data.get("gold_games", {}) or {}
            game = games.get(game_id)

            if not game or game.get("state") != "playing":
                return await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)

            # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–≤–∫—É —ñ –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É
            data["coins"] = int(data.get("coins", 0)) + int(game["stake"])
            game["state"] = "cancelled"
            if "gold_games" in data and game_id in data["gold_games"]:
                del data["gold_games"][game_id]
            await save_data(player_id, data)

            await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞–≤–∫—É –≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.")
    except Exception as e:
        await handle_error(getattr(callback.from_user, "username", None), e, callback.from_user.id, 121)


user_tower_locks: Dict[str, asyncio.Lock] = {}


def _get_tower_lock(user_id: str) -> asyncio.Lock:
    lock = user_tower_locks.get(user_id)
    if lock is None:
        lock = asyncio.Lock()
        user_tower_locks[user_id] = lock
    return lock


# --- –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def _migrate_single_tower_to_multi(data: dict) -> None:
    """–Ø–∫—â–æ —É data —î —Å—Ç–∞—Ä–∏–π –∫–ª—é—á 'tower', –º—ñ–≥—Ä—É—î–º–æ –π–æ–≥–æ –≤ 'towers' –∑ –Ω–æ–≤–∏–º id."""
    if not data:
        return
    if 'towers' not in data and 'tower' in data:
        single = data.pop('tower')
        gid = uuid.uuid4().hex[:8]
        data.setdefault('towers', {})[gid] = single


# ---------- START GAME ----------
async def start_tower_game(user_id: str, bet: int, game_id: str = None) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ game_id (—Ä—è–¥–æ–∫). –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫.
    –ë—ñ–ª—å—à–µ –Ω–µ –±–ª–æ–∫—É—î–º–æ —Å—Ç–∞—Ä—Ç –Ω–æ–≤–æ—ó –≥—Ä–∏ —è–∫—â–æ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω—ñ ‚Äî –º–æ–∂–Ω–∞ –º–∞—Ç–∏ –±—É–¥—å-—è–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–≥–æ—Ä.
    """
    if bet is None:
        raise ValueError("bet is required")

    data = await load_data(user_id) or {}

    # –º—ñ–≥—Ä–∞—Ü—ñ—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    _migrate_single_tower_to_multi(data)

    bombs: List[List[int]] = []
    for _ in range(9):
        row = [0] * 5
        bomb_index = random.randint(0, 4)
        row[bomb_index] = 1
        bombs.append(row)

    game_id = game_id or uuid.uuid4().hex[:8]

    tower = {
        "bet": int(bet),
        "level": 0,
        "bombs": bombs,
        "selected": [],
        "lost": False,
        "state": "playing",
        "started_at": int(time.time()),
        "last_action_ts": 0,
        "game_id": game_id,
    }

    data.setdefault('towers', {})[game_id] = tower
    await save_data(user_id, data)
    return game_id


# ---------- BUILD KEYBOARD ----------
async def build_tower_keyboard(user_id: str, game_id: str) -> InlineKeyboardMarkup:
    data = await load_data(user_id) or {}
    _migrate_single_tower_to_multi(data)
    towers = data.get('towers', {})
    tower = towers.get(game_id)
    if not tower:
        return InlineKeyboardMarkup(inline_keyboard=[])

    level = int(tower.get("level", 0))
    selected = tower.get("selected", [])
    lost = bool(tower.get("lost", False))

    if lost or level >= 9:
        return InlineKeyboardMarkup(inline_keyboard=[])

    kb_rows = []

    # –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
    kb_rows.append([
        InlineKeyboardButton(text="‚ùì", callback_data=f"tower:{game_id}:choose:{j}") for j in range(5)
    ])

    # –ü—Ä–æ–π–¥–µ–Ω—ñ —Ä—ñ–≤–Ω—ñ (–≤–≥–æ—Ä—É)
    for i in range(level - 1, -1, -1):
        choice = selected[i] if i < len(selected) else None
        row_buttons = []
        for j in range(5):
            emoji = "üí∞" if (choice is not None and j == choice) else "‚ùì"
            row_buttons.append(InlineKeyboardButton(text=emoji, callback_data="noop"))
        kb_rows.append(row_buttons)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    if level == 0:
        kb_rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"tower:{game_id}:cancel")])
    else:
        kb_rows.append([InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", callback_data=f"tower:{game_id}:collect")])

    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


# ---------- BUILD FINAL ----------
async def build_final_tower_keyboard(user_id: str, game_id: str) -> InlineKeyboardMarkup:
    data = await load_data(user_id) or {}
    _migrate_single_tower_to_multi(data)
    towers = data.get('towers', {})
    tower = towers.get(game_id)
    if not tower:
        return InlineKeyboardMarkup(inline_keyboard=[])

    bombs = tower.get("bombs", [])
    selected = tower.get("selected", [])

    if tower.get("lost"):
        last = len(selected) - 1
    else:
        last = min(len(selected) - 1, 8)

    if last < 0:
        return InlineKeyboardMarkup(inline_keyboard=[])

    reveal_mines = tower.get("state") in ("collected", "won")

    kb_rows = []
    for i in range(last, -1, -1):
        row = bombs[i] if i < len(bombs) else [0, 0, 0, 0, 0]
        choice = selected[i] if i < len(selected) else None
        buttons_row = []
        for j in range(5):
            if tower.get("lost"):
                if row[j] == 1:
                    if choice is not None and j == choice:
                        emoji = "üí•"
                    else:
                        emoji = "üí£"
                else:
                    if choice is not None and j == choice:
                        emoji = "üí∞"
                    else:
                        emoji = "üíº"
            elif reveal_mines:
                if row[j] == 1:
                    emoji = "üí£"
                else:
                    if choice is not None and j == choice:
                        emoji = "üí∞"
                    else:
                        emoji = "üíº"
            else:
                if choice is not None and j == choice:
                    emoji = "üí∞"
                else:
                    emoji = "üíº"
            buttons_row.append(InlineKeyboardButton(text=emoji, callback_data="noop"))
        kb_rows.append(buttons_row)

    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


# ---------- UNIVERSAL CALLBACK HANDLER ----------
@dp.callback_query(F.data.startswith("tower:"))
@flood_protect(min_delay=0.5)
async def on_tower_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    lock = _get_tower_lock(user_id)
    async with lock:
        try:
            parts = callback.data.split(":")
            # expected patterns:
            # tower:<game_id>:choose:<index>
            # tower:<game_id>:collect
            # tower:<game_id>:cancel
            # tower:<game_id>:noop (or noop by itself)
            if len(parts) < 3:
                # fallback for noop or malformed
                return await callback.answer()

            _, game_id, action = parts[0:3]
            extra = parts[3] if len(parts) > 3 else None

            data = await load_data(user_id) or {}
            _migrate_single_tower_to_multi(data)
            towers = data.get('towers', {})
            tower = towers.get(game_id)

            if not tower:
                await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∏–≥—Ä–∞ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
                return

            if tower.get('state') != 'playing':
                await callback.answer("‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
                return

            # simple server-side throttle
            now = int(time.time() * 1000)
            last_ts = tower.get("last_action_ts", 0)
            if now - last_ts < 200:
                await callback.answer()
                return
            tower['last_action_ts'] = now

            # CANCEL
            if action == 'cancel':
                if int(tower.get('level', 0)) != 0 or tower.get('selected'):
                    return await callback.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞", show_alert=True)
                bet = int(tower.get('bet', 0))
                data['coins'] = int(data.get('coins', 0)) + bet
                towers.pop(game_id, None)
                if not towers:
                    data.pop('towers', None)
                await save_data(user_id, data)
                return await callback.message.edit_text(
                    f"‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å—Ç–∞–≤–∫–∞ {format_balance(bet)} mDrops –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", reply_markup=None)

            # COLLECT
            if action == 'collect':
                if int(tower.get('level', 0)) == 0:
                    return await callback.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ, –≤—ã –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥!", show_alert=True)
                if tower.get('lost', False):
                    return await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", show_alert=True)

                lvl = int(tower.get('level', 0))
                mult = TOWER_MULTIPLIERS[lvl - 1]
                win = round(int(tower.get('bet', 0)) * mult)

                tower['state'] = 'collected'
                data['coins'] = int(data.get('coins', 0)) + int(win)
                data['won_coins'] = int(data.get('won_coins', 0)) + int(win)
                towers[game_id] = tower
                # remove finished game
                towers.pop(game_id, None)
                if not towers:
                    data.pop('towers', None)
                await save_data(user_id, data)

                final_kb = await build_final_tower_keyboard(user_id, game_id)
                await callback.message.edit_text(f"üí∏ –í—ã –∑–∞–±—Ä–∞–ª–∏ {format_balance(win)} mDrops!", reply_markup=final_kb)
                return

            # NOOP
            if action == 'noop':
                return await callback.answer()

            # OTHERWISE ‚Äî action should be 'choose' with extra index OR numeric index (legacy)
            choice = None
            if action == 'choose' and extra is not None:
                try:
                    choice = int(extra)
                except Exception:
                    return await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞", show_alert=True)
            else:
                # legacy: tower:<index> (not expected in new format)
                try:
                    choice = int(action)
                except Exception:
                    return await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

            # –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            if choice is None or choice < 0 or choice > 4:
                return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)

            level = int(tower.get('level', 0))
            if level < 0 or level > 8:
                return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã", show_alert=True)

            if len(tower.get('selected', [])) > level:
                return await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ", show_alert=True)

            # –¥–æ–¥–∞—Ç–∏ –≤–∏–±—ñ—Ä
            tower.setdefault('selected', []).append(choice)

            bombs = tower.get('bombs', [])
            if level >= len(bombs):
                tower['lost'] = True
                tower['state'] = 'lost'
                towers[game_id] = tower
                await save_data(user_id, data)
                await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–≥—Ä—ã ‚Äî –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏–Ω–¥–µ–∫—Å.")
                # –ø—Ä–∏–±—Ä–∞—Ç–∏ –≥—Ä—É
                towers.pop(game_id, None)
                if not towers:
                    data.pop('towers', None)
                await save_data(user_id, data)
                return

            if bombs[level][choice] == 1:
                # –ø–æ—Ä–∞–∑–∫–∞
                tower['lost'] = True
                tower['state'] = 'lost'
                data['lost_coins'] = int(data.get('lost_coins', 0)) + int(tower.get('bet', 0))
                towers[game_id] = tower
                await save_data(user_id, data)

                final_kb = await build_final_tower_keyboard(user_id, game_id)
                await callback.message.edit_text(
                    f"üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n\nüí∏ –°—Ç–∞–≤–∫–∞: {format_balance(int(tower.get('bet', 0)))} mDrops",
                    reply_markup=final_kb
                )
                # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≥—Ä—É
                towers.pop(game_id, None)
                if not towers:
                    data.pop('towers', None)
                await save_data(user_id, data)
                return

            # –±–µ–∑–ø–µ—á–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
            tower['level'] = level + 1
            towers[game_id] = tower
            data['towers'] = towers
            await save_data(user_id, data)

            # –¥—ñ–π—à–ª–∏ –¥–æ –≤–µ—Ä—à–∏–Ω–∏?
            if tower['level'] >= 9:
                mult = TOWER_MULTIPLIERS[8]
                win = round(int(tower.get('bet', 0)) * mult)
                if tower.get('state') == 'playing':
                    tower['state'] = 'won'
                    data['coins'] = int(data.get('coins', 0)) + int(win)
                    data['won_coins'] = int(data.get('won_coins', 0)) + int(win)
                    towers[game_id] = tower
                    await save_data(user_id, data)

                    final_kb = await build_final_tower_keyboard(user_id, game_id)
                    await callback.message.edit_text(
                        f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—à–ª–∏ –¥–æ –≤–µ—Ä—à–∏–Ω—ã –∏ –∑–∞–±—Ä–∞–ª–∏ {format_balance(win)} mDrops!",
                        reply_markup=final_kb
                    )

                # –ø—Ä–∏–±—Ä–∞—Ç–∏ –≥—Ä—É
                towers.pop(game_id, None)
                if not towers:
                    data.pop('towers', None)
                await save_data(user_id, data)
                return

            # —ñ–Ω–∞–∫—à–µ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
            new_level = tower['level']
            mult = TOWER_MULTIPLIERS[new_level - 1]
            await callback.message.edit_text(
                f"üìà –£—Ä–æ–≤–µ–Ω—å: {new_level}/9\n"
                f"üí∞ –í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {format_balance(int(tower.get('bet', 0) * mult))} mDrops\n"
                f"üî• –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{mult:.1f}",
                reply_markup=await build_tower_keyboard(user_id, game_id)
            )

        except Exception as e:
            await handle_error(callback.from_user.username, e, callback.from_user.id, 201)


# ---------- START MESSAGE ----------
@dp.message(F.text.lower().startswith("–±–∞—à–Ω—è"))
async def start_tower(message: Message):
    uid = str(message.from_user.id)
    args = message.text.split()

    if len(args) != 2:
        return await message.reply(
            f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–±–∞—à–Ω—è 300')}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–±–∞—à–Ω—è –≤—Å–µ')}")

    user_data = await load_data(uid) or {"coins": 0}
    balance = int(user_data.get("coins", 0))

    # –°—Ç–∞–≤–∫–∞
    if args[1].lower() == "–≤—Å–µ":
        bet = balance
    elif "–∫" in args[1].lower():
        bet = parse_bet_input(args[1].lower())
    elif args[1].isdigit():
        bet = int(args[1])
    else:
        return await message.reply(
            f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–±–∞—à–Ω—è 300')}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–±–∞—à–Ω—è –≤—Å–µ')}")

    if bet > balance:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

    if bet <= 9:
        return await message.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops")

    # –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏
    user_data["coins"] = int(user_data.get("coins", 0)) - int(bet)
    await save_data(uid, user_data)

    game_id = await start_tower_game(uid, bet)
    if not game_id:
        # –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–≤–∫—É —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        user_data = await load_data(uid) or {}
        user_data["coins"] = int(user_data.get("coins", 0)) + int(bet)
        await save_data(uid, user_data)
        return await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    msg_wait = await message.reply("üîó –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
    game = await message.reply(
        f"üéÆ –ò–≥—Ä–∞ ¬´–ë–∞—à–Ω—è¬ª –Ω–∞—á–∞–ª–∞—Å—å!\n"
        f"üìà –£—Ä–æ–≤–µ–Ω—å: 1/9\n"
        f"üíµ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops\n",
        reply_markup=await build_tower_keyboard(uid, game_id)
    )
    await asyncio.sleep(0.5)
    if game:
        return await msg_wait.delete()
    for i in range(8):
        await asyncio.sleep(0.5)
        if game:
            return await msg_wait.delete()
    await asyncio.sleep(1)
    if not game:
        await msg_wait.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã, —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞")
        user_data["coins"] += bet
        await save_data(uid, user_data)


# noop handler (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ callback_data == 'noop')
@dp.callback_query(F.data == "noop")
async def do_nothing(callback: CallbackQuery):
    await callback.answer()


MINES_GAMES: Dict[str, dict] = {}

# per-user locks to avoid race conditions (lock by owner id)
user_mines_locks: Dict[str, asyncio.Lock] = {}


def _get_mines_lock(user_id: str) -> asyncio.Lock:
    lock = user_mines_locks.get(user_id)
    if lock is None:
        lock = asyncio.Lock()
        user_mines_locks[user_id] = lock
    return lock


# ---------------- multipliers ----------------
def get_multipliers_for_mines_count(mines_count: int, house_edge: float = 1.0) -> List[float]:
    CELLS = 25
    if not (1 <= mines_count <= 24):
        raise ValueError("mines_count must be between 1 and 24")
    if not (0.0 < house_edge <= 1.0):
        raise ValueError("house_edge must be in (0.0, 1.0]")

    safe_cells = CELLS - mines_count
    multipliers: List[float] = []
    p_survive = 1.0
    multipliers.append(round(1.0 * house_edge, 4))  # k = 0

    for k in range(1, safe_cells + 1):
        numerator = safe_cells - (k - 1)
        denominator = CELLS - (k - 1)
        if denominator <= 0:
            p_step = 0.0
        else:
            p_step = numerator / denominator
        p_survive *= p_step
        if p_survive <= 0:
            mult = float('inf')
        else:
            mult = (1.0 / p_survive) * house_edge
        multipliers.append(round(mult, 4))
    return multipliers


# ---------- helpers ----------
def _new_game_id() -> str:
    return uuid.uuid4().hex


def _cb_cell(game_id: str, idx: int) -> str:
    return f"mines:cell:{game_id}:{idx}"


def _cb_collect(game_id: str) -> str:
    return f"mines:collect:{game_id}"


def _cb_cancel(game_id: str) -> str:
    return f"mines:cancel:{game_id}"


# ---------------- start handler ----------------
@dp.message(F.text.lower().startswith("–º–∏–Ω—ã"))
async def start_mines(message: Message):
    try:
        parts = message.text.strip().split()
        if len(parts) < 2:
            return await message.reply(
                f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
                f"{gline()}\n"
                f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–º–∏–Ω—ã 300')}\n"
                f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–º–∏–Ω—ã 300 3')}  # –≤—Ç–æ—Ä–∞—è —Ü–∏—Ñ—Ä–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω (1-6)\n"
                f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–º–∏–Ω—ã –≤—Å–µ')}"
            )

        user_id = str(message.from_user.id)
        data = await load_data(user_id) or {"coins": 0}
        balance = int(data.get("coins", 0))

        # –°—Ç–∞–≤–∫–∞
        bet_str = parts[1].lower()
        if bet_str in ("–≤—Å–µ", "–≤—Å—ë"):
            bet = balance
        elif "–∫" in bet_str:
            bet = parse_bet_input(bet_str)
        elif bet_str.isdigit():
            bet = int(bet_str)
        else:
            return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.")

        if bet < 10:
            return await message.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops")
        if bet > balance:
            return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")

        # mines_count (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        mines_count = 1
        if len(parts) >= 3:
            try:
                mcnt = int(parts[2])
            except ValueError:
                return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")
            if not (1 <= mcnt <= 6):
                return await message.reply("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6.")
            mines_count = mcnt

        # reserve bet (—Å–ø–∏—Å–∞–Ω–∏–µ) ‚Äî –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        data["coins"] = int(data.get("coins", 0)) - int(bet)
        await save_data(user_id, data)

        msg_wait = await message.reply("üîó –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ")

        # —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª–µ —Ç–∞ –º—ñ–Ω–∏
        field = ["‚ùì"] * 25
        mines = random.sample(range(25), mines_count)
        print(f"{user_id} (mines {mines_count}): {mines}")

        # —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É –≤ –ø–∞–º'—è—Ç—ñ
        game_id = _new_game_id()
        now_ms = int(time.time() * 1000)
        MINES_GAMES[game_id] = {
            "game_id": game_id,
            "bet": int(bet),
            "field": field,
            "opened": [],  # list of opened indices
            "mines": mines,  # list of mine indices (int)
            "mines_count": mines_count,
            "owner": user_id,
            "state": "playing",  # playing | lost | won | collected | cancelled
            "started_at": now_ms,
            "last_action_ts": 0
        }

        multipliers = get_multipliers_for_mines_count(mines_count)
        initial_multiplier = multipliers[1] if len(multipliers) > 1 else multipliers[0]
        potential_prize = round(bet * initial_multiplier)

        text = (
            "üí£ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"üíµ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops\n"
            f"üí∞ –í–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–∏–∑ (–∑–∞ 1 –æ—Ç–∫—Ä—ã—Ç–∏–µ): {format_balance(potential_prize)} mDrops\n"
            f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω: {mines_count}  |  x{round(initial_multiplier, 2)}"
        )

        keyboard = build_mines_keyboard(game_id)
        game = await message.reply(text, reply_markup=keyboard)
        await asyncio.sleep(0.5)
        if game:
            return await msg_wait.delete()
        for i in range(8):
            await asyncio.sleep(0.5)
            if game:
                return await msg_wait.delete()
        await asyncio.sleep(1)
        if not game:
            await msg_wait.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã, —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞")
            data["coins"] += bet
            await save_data(user_id, data)

    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 300)


# ---------------- keyboard builder ----------------
def build_mines_keyboard(game_id: str) -> InlineKeyboardMarkup:
    game = MINES_GAMES.get(game_id)
    if not game:
        return InlineKeyboardMarkup(inline_keyboard=[])

    buttons = []
    for row in range(5):
        row_buttons = []
        for col in range(5):
            i = row * 5 + col
            text = game["field"][i]
            row_buttons.append(InlineKeyboardButton(text=text, callback_data=_cb_cell(game_id, i)))
        buttons.append(row_buttons)

    opened = len(game.get("opened", []))
    multipliers = get_multipliers_for_mines_count(game["mines_count"])
    idx = opened if opened < len(multipliers) else (len(multipliers) - 1)
    prize_next = round(game["bet"] * multipliers[idx])

    if opened > 0:
        buttons.append([InlineKeyboardButton(text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å ({format_balance(prize_next)} mDrops)",
                                             callback_data=_cb_collect(game_id))])
    else:
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=_cb_cancel(game_id))])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ---------------- final keyboard builder ----------------
def build_final_mines_keyboard(field: List[str], include_noop: bool = True) -> InlineKeyboardMarkup:
    rows = []
    for r in range(5):
        row_buttons = []
        for c in range(5):
            i = r * 5 + c
            txt = field[i]
            row_buttons.append(InlineKeyboardButton(text=txt, callback_data="noop"))
        rows.append(row_buttons)
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ---------------- callback handler ----------------
@dp.callback_query(F.data.startswith("mines:"))
@flood_protect(min_delay=0.5)
async def handle_mines(callback: CallbackQuery):
    # format: mines:action:game_id[:idx]
    try:
        parts = callback.data.split(":")
        if len(parts) < 3:
            return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        _, action, game_id = parts[:3]
        caller_id = str(callback.from_user.id)

        game = MINES_GAMES.get(game_id)
        if not game:
            return await callback.answer("‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)

        owner_id = game.get("owner")
        # —è–∫—â–æ –Ω–µ –≤–ª–∞—Å–Ω–∏–∫ ‚Äî —Ç–∏—Ö–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ
        if caller_id != owner_id:
            return await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∏–≥—Ä–∞ –∏–ª–∏ —Ç—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª!", show_alert=True)

        lock = _get_mines_lock(owner_id)
        async with lock:
            # reload game inside lock
            game = MINES_GAMES.get(game_id)
            if not game or game.get("state") != "playing":
                return await callback.answer("‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

            data = await load_data(owner_id) or {"coins": 0, "won_coins": 0, "lost_coins": 0}

            # server-side quick throttle (200ms)
            now_ms = int(time.time() * 1000)
            last_ts = game.get("last_action_ts", 0)
            if now_ms - last_ts < 200:
                await callback.answer()
                return
            game["last_action_ts"] = now_ms

            bet = int(game["bet"])
            mines_count = int(game.get("mines_count", 1))
            mines_list = [int(x) for x in game.get("mines", [])]
            opened_list = [int(x) for x in game.get("opened", [])]
            multipliers = get_multipliers_for_mines_count(mines_count)

            # COLLECT
            if action == "collect":
                opened = len(opened_list)
                if opened == 0:
                    return await callback.answer("‚ö†Ô∏è –ù–µ—á–µ–≥–æ –∑–∞–±–∏—Ä–∞—Ç—å!")

                coef_index = opened if opened < len(multipliers) else (len(multipliers) - 1)
                coef = multipliers[coef_index]
                reward = round(bet * coef)

                # –ü–æ–±—É–¥—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–ª–µ (–ø–æ–∫–∞–∑–∞—Ç–∏ –ºi–Ω–∏)
                final_field = ["‚ùì"] * 25
                for i in opened_list:
                    final_field[i] = "üí∞"
                for m in mines_list:
                    final_field[m] = "üí£"

                final_keyboard = build_final_mines_keyboard(final_field)

                # –ø–æ–∑–Ω–∞—á–∞—î–º–æ collected —ñ –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ
                game["state"] = "collected"
                data["coins"] = int(data.get("coins", 0)) + int(reward)
                data["won_coins"] = int(data.get("won_coins", 0)) + int(reward)
                await save_data(owner_id, data)

                await callback.message.edit_text(f"üí∞ –í—ã –∑–∞–±—Ä–∞–ª–∏ {format_balance(reward)} mDrops! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
                                                 reply_markup=final_keyboard)
                MINES_GAMES.pop(game_id, None)
                return

            # CANCEL
            if action == "cancel":
                # –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–≤–∫—É
                data["coins"] = int(data.get("coins", 0)) + bet
                await save_data(owner_id, data)
                await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
                MINES_GAMES.pop(game_id, None)
                return

            # CELL CLICK
            if action == "cell":
                if len(parts) != 4:
                    return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
                try:
                    index = int(parts[3])
                except ValueError:
                    return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.", show_alert=True)

                if index < 0 or index >= 25:
                    return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.", show_alert=True)

                if index in opened_list:
                    return await callback.answer("‚õî –£–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ")

                # LOSS
                if index in mines_list:
                    # build final field (opened are üí∞, mines are üí£ with exploded as üí•)
                    final_field = ["‚ùì"] * 25
                    for i in opened_list:
                        final_field[i] = "üí∞"
                    for m in mines_list:
                        final_field[m] = "üí£"
                    final_field[index] = "üí•"

                    final_keyboard = build_final_mines_keyboard(final_field)

                    # –æ–±–ª—ñ–∫ –ø—Ä–æ–≥—Ä–∞—à—É
                    data["lost_coins"] = int(data.get("lost_coins", 0)) + bet
                    await save_data(owner_id, data)

                    game["state"] = "lost"
                    await callback.message.edit_text(f"üí• –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É!\n\nüí∏ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops",
                                                     reply_markup=final_keyboard)
                    MINES_GAMES.pop(game_id, None)
                    return

                # SUCCESSFUL OPEN
                opened_list.append(index)
                game["opened"] = opened_list
                game["field"][index] = "üí∞"

                opened_now = len(opened_list)
                safe_needed = 25 - mines_count

                # WIN (all safe opened)
                if opened_now >= safe_needed:
                    coef_index = opened_now if opened_now < len(multipliers) else (len(multipliers) - 1)
                    reward = round(bet * multipliers[coef_index])

                    # build final field (show all mines)
                    final_field = ["‚ùì"] * 25
                    for i in opened_list:
                        final_field[i] = "üí∞"
                    for m in mines_list:
                        final_field[m] = "üí£"

                    final_keyboard = build_final_mines_keyboard(final_field)

                    game["state"] = "won"
                    data["coins"] = int(data.get("coins", 0)) + int(reward)
                    data["won_coins"] = int(data.get("won_coins", 0)) + int(reward)
                    await save_data(owner_id, data)

                    await callback.message.edit_text(f"üèÜ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –º–∏–Ω—ã! –ù–∞–≥—Ä–∞–¥–∞: {format_balance(reward)} mDrops",
                                                     reply_markup=final_keyboard)
                    MINES_GAMES.pop(game_id, None)
                    return

                # CONTINUE: show updated info and keyboard
                idx = opened_now if opened_now < len(multipliers) else (len(multipliers) - 1)
                multiplier = multipliers[idx]
                potential = round(bet * multiplier)

                text = (
                    "üí£ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!\n"
                    f"üíµ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops\n"
                    f"üí∞ –í–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–∏–∑: {format_balance(potential)} mDrops\n"
                    f"üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{round(multiplier, 2)}"
                )

                await callback.message.edit_text(text, reply_markup=build_mines_keyboard(game_id))
                return

            return await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)

    except Exception as e:
        try:
            await handle_error(callback.from_user.username, e, callback.from_user.id, 301)
        except Exception:
            pass


@dp.message(F.text.lower().startswith("—Ä—É–ª"))
async def roulette_game(message: Message):
    uid = str(message.from_user.id)
    args = message.text.lower().split()

    # –®–∞–±–ª–æ–Ω –ø–æ–º–∏–ª–∫–∏/–ø—Ä–∏–∫–ª–∞–¥—É (—â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –±–∞–≥–∞—Ç–æ —Ä—è–¥–∫—ñ–≤)
    usage = (
        f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
        f"{html.code(gline())}\n"
        f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Ä—É–ª 300 —á–µ—Ç')}\n"
        f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Ä—É–ª –≤—Å–µ —á–µ—Ä')}\n"
        f"–í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞–≤–∫–∏: {html.code('–∫—Ä–∞')}, {html.code('—á–µ—Ä')}, {html.code('—á–µ—Ç')}, {html.code('–Ω–µ—á–µ—Ç')}, "
        f"{html.code('0-11')}, {html.code('12-22')}, {html.code('23-35')}, {html.code('–∑–µ—Ä–æ')}, {html.code('–∑–µ–ª')}."
    )

    if len(args) < 3:
        return await message.reply(usage, parse_mode="HTML")

    bet_raw, target = args[1], args[2]
    data = await load_data(uid)
    if not data:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞ - —Å—Ç–≤–æ—Ä–∏–º–æ
        await create_user_data(uid)
        data = await load_data(uid)

    balance = data["coins"]

    bets = ["–∫—Ä–∞", "—á–µ—Ä", "—á–µ—Ç", "–Ω–µ—á–µ—Ç", "0-11", "12-22", "23-35", "–∑–µ—Ä–æ", "–∑–µ–ª"]

    # –†–æ–∑–±—ñ—Ä —Å—Ç–∞–≤–∫–∏
    if bet_raw == "–≤—Å–µ":
        bet = balance
    elif "–∫" in bet_raw.lower():
        bet = parse_bet_input(bet_raw)
    elif bet_raw.isdigit():
        bet = int(bet_raw)
    else:
        return await message.reply(usage, parse_mode="HTML")

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if bet > balance:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", parse_mode="HTML")

    if bet <= 9:
        return await message.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops!", parse_mode="HTML")

    if target not in bets:
        return await message.reply(usage, parse_mode="HTML")

    # –°–ø–∏—Å—É—î–º–æ —Å—Ç–∞–≤–∫—É –≤—ñ–¥—Ä–∞–∑—É
    data["coins"] -= bet

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —á–∏—Å–ª–æ —Ä—É–ª–µ—Ç–∫–∏ 0..35
    number = random.randint(0, 35)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä —ñ –ø–∞—Ä–Ω—ñ—Å—Ç—å (type -> parity)
    color = ""
    parity = ""
    if number == 0:
        color = "–∑–µ–ª–µ–Ω—ã–π"
        parity = ""
    else:
        if number % 2 == 0:
            color = "—á–µ—Ä"
            parity = "—á–µ—Ç"
        else:
            color = "–∫—Ä–∞"
            parity = "–Ω–µ—á–µ—Ç"

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä–µ–º–æ–≥—É —Ç–∞ –º–Ω–æ–∂–Ω–∏–∫
    multiplier = 2

    def is_win():
        nonlocal multiplier
        # –∑–µ—Ä–æ / –∑–µ–ª
        if target in ("–∑–µ—Ä–æ", "–∑–µ–ª"):
            if number == 0:
                multiplier = 35
                return True
            return False

        # —á–µ—Ä/–∫—Ä–∞/—á–µ—Ç/–Ω–µ—á–µ—Ç
        if target == "—á–µ—Ä":
            return number != 0 and number % 2 == 0
        if target == "–∫—Ä–∞":
            return number % 2 == 1
        if target == "—á–µ—Ç":
            return number != 0 and number % 2 == 0
        if target == "–Ω–µ—á–µ—Ç":
            return number % 2 == 1

        # –¥—ñ–∞–ø–∞–∑–æ–Ω–∏
        if target == "0-11":
            multiplayer = 2.8
            return 0 <= number <= 11
        if target == "12-22":
            multiplayer = 2.8
            return 12 <= number <= 22
        if target == "23-35":
            multiplayer = 2.8
            return 23 <= number <= 35

        return False

    win = is_win()

    # –ü—ñ–¥–±—ñ—Ä –µ–º–æ–¥–∑—ñ –¥–ª—è –∫–æ–ª—å–æ—Ä—É
    if number == 0:
        color_emoji = "üü¢"
        color_label = "–ó–ï–õ–Å–ù–´–ô"
    elif color == "—á–µ—Ä":
        color_emoji = "‚¨õ"
        color_label = "–ß–Å–†–ù–´–ô"
    else:
        color_emoji = "üî¥"
        color_label = "–ö–†–ê–°–ù–´–ô"

    # –§–æ—Ä–º—É—î–º–æ —Å—Ç–∏–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # –í–µ—Ä—Ö–Ω—ñ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = (
            html.bold("üé∞ –†–£–õ–ï–¢–ö–ê ‚Äî –†–ï–ó–£–õ–¨–¢–ê–¢")
            + "\n"
            + html.code("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            + "\n"
    )

    # –û—Å–Ω–æ–≤–Ω–∞ ¬´–∫–∞—Ä—Ç–∞¬ª –≤–∏–ø–∞–≤—à–æ–≥–æ —á–∏—Å–ª–∞
    number_block = (
            f"{color_emoji}  {html.bold(str(number))}  ‚Äî  {html.bold(color_label)}"
            + (f", {html.bold(parity.upper())}" if parity else "")
            + "\n"
    )

    # –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Ü–∏—Ç–∞—Ç–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ blockquote –¥–ª—è –∞–∫—Ü–µ–Ω—Ç—É)
    if win:
        reward = bet * multiplier
        data["coins"] += reward
        data["won_coins"] = data.get("won_coins", 0) + int(reward)

        quote = html.blockquote(f"üéâ –í—ã —É–≥–∞–¥–∞–ª–∏ —Å—Ç–∞–≤–∫—É: {target} ({color}{', ' + parity if parity else ''})")
        result_label = html.bold("–í–´–ò–ì–†–´–®")
        result_value = format_balance(reward)
    else:
        reward = 0
        data["lost_coins"] = data.get("lost_coins", 0) + int(bet)

        quote = html.blockquote(f"üòî –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —Å—Ç–∞–≤–∫—É: {target} ({color}{', ' + parity if parity else ''})")
        result_label = html.bold("–ü–†–û–ò–ì–†–´–®")
        result_value = format_balance(bet)

    # –¢–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—ñ –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ <pre> —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è; —Ç–µ–≥–∏ –±–µ–∑–ø–µ—á–Ω—ñ –ø—Ä–∏ parse_mode="HTML"
    table = (
        "<pre>"
        f"–°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops\n"
        f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å:{' x' + str(multiplier)}\n"
        f"{result_label}: {result_value} mDrops\n"
        f"–ë–∞–ª–∞–Ω—Å: {format_balance(data['coins'])} mDrops\n"
        "</pre>"
    )

    # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å/–ø–æ—Ä–∞–¥–∞
    footer = (
        "\n"
    )

    # –°–∫–ª–µ—é—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
    result_text = header + number_block + "\n" + quote + "\n" + table + footer

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
    await save_data(uid, data)
    await message.reply(result_text, parse_mode="HTML")


# ----------- –ö–ù–ë -----------
RPS_CHOICES = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
RPS_WIN = {
    "–∫–∞–º–µ–Ω—å": "–Ω–æ–∂–Ω–∏—Ü—ã",  # –∫–∞–º–µ–Ω—å beats –Ω–æ–∂–Ω–∏—Ü—ã
    "–Ω–æ–∂–Ω–∏—Ü—ã": "–±—É–º–∞–≥–∞",
    "–±—É–º–∞–≥–∞": "–∫–∞–º–µ–Ω—å"
}

# store active games: chat_id -> game dict
# game structure: {"user1": uid, "user2": uid_or_None, "bet": int, "choice1": None|str, "choice2": None|str}
rps_challenges: Dict[str, Dict] = {}


def build_rps_choice_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü™® –ö–∞–º–µ–Ω—å", callback_data="rps_choice_–∫–∞–º–µ–Ω—å")],
        [InlineKeyboardButton(text="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_choice_–Ω–æ–∂–Ω–∏—Ü—ã")],
        [InlineKeyboardButton(text="üìÑ –ë—É–º–∞–≥–∞", callback_data="rps_choice_–±—É–º–∞–≥–∞")],
    ])


def build_rps_choice_with_cancel() -> InlineKeyboardMarkup:
    kb = build_rps_choice_keyboard()
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="rps_cancel")])
    return kb


def build_rps_accept_keyboard(user_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëä –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"rps_accept_{user_id}")]
    ])


def build_rps_accept_with_cancel(user_id: str) -> InlineKeyboardMarkup:
    kb = build_rps_accept_keyboard(user_id)
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="rps_cancel")])
    return kb


# ---------- START CHALLENGE ----------
# @dp.message(F.text.lower().startswith("–∫–Ω–±"))
async def start_rps_challenge(message: Message):
    # Only in groups
    if message.chat.type == "private":
        return await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

    uid = str(message.from_user.id)
    chat_id = str(message.chat.id)
    parts = (message.text or "").split()

    if len(parts) < 2:
        return await message.reply(
            f"{html.italic(f'ü§® {message.from_user.first_name}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{html.code(gline())}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫–Ω–± 300')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫–Ω–± –≤—Å–µ')}"
        )

    bet_str = parts[1].lower()

    # load user balance
    user_data = await load_data(uid) or {}
    balance = int(user_data.get("coins", 0))

    if bet_str == "–≤—Å–µ":
        bet = balance
    elif "–∫" in bet_str.lower():
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.")

    if bet <= 9:
        return await message.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops!")

    if bet > balance:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

    # deduct stake from user1
    user_data["coins"] = balance - bet
    await save_data(uid, user_data)

    # create challenge
    rps_challenges[chat_id] = {
        "user1": uid,
        "bet": bet,
        "choice1": None,
        "choice2": None,
        "user2": None
    }

    await message.reply(
        f"üéÆ {await gsname(message.from_user.first_name, message.from_user.id)} –Ω–∞—á–∞–ª –∏–≥—Ä—É –ö–ù–ë –Ω–∞ {format_balance(bet)} mDrops!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–¥:",
        reply_markup=build_rps_choice_with_cancel()
    )


# ---------- PLAYER CHOICE ----------
@dp.callback_query(lambda c: c.data and c.data.startswith("rps_choice_"))
@flood_protect(min_delay=0.5)
async def handle_rps_choice(callback: CallbackQuery):
    uid = str(callback.from_user.id)
    chat_id = str(callback.message.chat.id)
    game = rps_challenges.get(chat_id)

    if not game:
        return await callback.answer("üòï –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    choice = callback.data.split("_", 2)[2]  # after prefix

    # If user1 selects first (and hasn't yet)
    if uid == game.get("user1") and game["choice1"] is None:
        game["choice1"] = choice
        # If no second player yet, present accept button with cancel
        if not game.get("user2"):
            return await callback.message.edit_text(
                f"üëä –ò–≥—Ä–æ–∫ 1 –≤—ã–±—Ä–∞–ª —Ö–æ–¥. –ö—Ç–æ –ø—Ä–∏–º–µ—Ç –≤—ã–∑–æ–≤ –Ω–∞ {format_balance(game['bet'])} mDrops?",
                reply_markup=build_rps_accept_with_cancel(game["user1"])
            )
        else:
            # user2 exists but hasn't chosen -> wait for user2 to choose
            return await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ö–æ–¥. –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")

    # If choosing as user2 (joined)
    if uid == game.get("user2") and game["choice2"] is None:
        game["choice2"] = choice
    # If user2 not set, maybe the challenger pressed a choice second time: treat accordingly
    elif uid == game.get("user1") and not game.get("choice2") and game.get("user2"):
        # this case is rare: user1 attempts to set choice2 when user2 is set; disallow
        return await callback.answer("ü§® –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
    # If someone else (not participant) pressed and user2 not set, disallow
    elif uid != game.get("user1") and uid != game.get("user2"):
        return await callback.answer("ü§® –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)

    # Both choices present?
    if game.get("choice1") and game.get("choice2"):
        c1 = game["choice1"]
        c2 = game["choice2"]
        bet = game["bet"]

        # Tie
        if c1 == c2:
            # return stakes to both players
            for u_key in ("user1", "user2"):
                u = game.get(u_key)
                if u:
                    d = await load_data(u) or {}
                    d["coins"] = d.get("coins", 0) + bet
                    await save_data(u, d)
            # reset choices for new round (user1 starts again)
            game["choice1"] = None
            game["choice2"] = None
            # If user2 still present, keep him; otherwise keep game waiting
            return await callback.message.edit_text(
                f"‚öñÔ∏è –ù–∏—á—å—è! –•–æ–¥—ã: {c1} vs {c2}\nüîÅ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥: –∏–≥—Ä–æ–∫ 1 –≤—ã–±–∏—Ä–∞–µ—Ç —Ö–æ–¥...",
                reply_markup=build_rps_choice_with_cancel()
            )

        # determine winner: if RPS_WIN[c1] == c2 -> user1 wins, else user2 wins
        winner_key, loser_key = ("user1", "user2") if RPS_WIN.get(c1) == c2 else ("user2", "user1")
        total_win = bet * 2

        winner_id = game.get(winner_key)
        loser_id = game.get(loser_key)

        # update winner
        if winner_id:
            winner_data = await load_data(winner_id) or {}
            winner_data["won_coins"] = winner_data.get("won_coins", 0) + total_win
            winner_data["coins"] = winner_data.get("coins", 0) + total_win
            await save_data(winner_id, winner_data)

        # update loser stats
        if loser_id:
            loser_data = await load_data(loser_id) or {}
            loser_data["lost_coins"] = loser_data.get("lost_coins", 0) + bet
            await save_data(loser_id, loser_data)

        # remove game
        rps_challenges.pop(chat_id, None)

        winner_num = 1 if winner_key == "user1" else 2
        await callback.message.edit_text(
            f"üèÜ –ü–æ–±–µ–¥–∏–ª –∏–≥—Ä–æ–∫ {winner_num}!\n–•–æ–¥—ã: {c1} vs {c2}\nüí∞ –í—ã–∏–≥—Ä—ã—à: {format_balance(total_win)} mDrops"
        )
        return

    # If not both choices yet, just confirm the click
    await callback.answer("–•–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", show_alert=False)


# ---------- ACCEPT CHALLENGE ----------
@dp.callback_query(lambda c: c.data and c.data.startswith("rps_accept_"))
@flood_protect(min_delay=0.5)
async def player_two_accept(callback: CallbackQuery):
    chat_id = str(callback.message.chat.id)
    uid = str(callback.from_user.id)
    # extract target user id from callback (the challenger)
    parts = callback.data.split("_", 2)
    if len(parts) < 3:
        return await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
    target_user = parts[2]

    game = rps_challenges.get(chat_id)
    if not game:
        return await callback.answer("üòï –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    if uid == game.get("user1"):
        return await callback.answer("ü§® –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π –≤—ã–∑–æ–≤!", show_alert=True)

    user_data = await load_data(uid) or {}
    balance = int(user_data.get("coins", 0))

    if balance < game["bet"]:
        return await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)

    # deduct stake from user2
    user_data["coins"] = balance - game["bet"]
    await save_data(uid, user_data)

    # set user2 and prompt choices
    game["user2"] = uid
    # Show choice keyboard to both (edit message)
    try:
        await callback.message.edit_text(
            f"‚úä –ò–≥—Ä–æ–∫ 2 ({await gsname(callback.from_user.first_name, callback.from_user.id)}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:",
            reply_markup=build_rps_choice_with_cancel()
        )
    except Exception:
        # fallback: send as new message
        await callback.message.answer(
            f"‚úä –ò–≥—Ä–æ–∫ 2 ({await gsname(callback.from_user.first_name, callback.from_user.id)}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:",
            reply_markup=build_rps_choice_with_cancel()
        )


# ---------- CANCEL GAME ----------
@dp.callback_query(F.data == "rps_cancel")
@flood_protect(min_delay=0.5)
async def handle_rps_cancel(callback: CallbackQuery):
    chat_id = str(callback.message.chat.id)
    caller_id = str(callback.from_user.id)
    game = rps_challenges.get(chat_id)

    if not game:
        await callback.answer("üòï –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # allow cancel by: creator (user1), joined user (user2), or chat admin
    allowed = False
    if caller_id == game.get("user1") or caller_id == game.get("user2"):
        allowed = True

    # check admin privileges in chat
    try:
        member = await bot.get_chat_member(int(chat_id), int(caller_id))
        if getattr(member, "status", None) in ("administrator", "creator"):
            allowed = True
    except Exception:
        pass

    if not allowed:
        await callback.answer("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É.", show_alert=True)
        return

    bet = int(game.get("bet", 0))

    # return stakes to user1
    u1 = game.get("user1")
    if u1:
        d1 = await load_data(u1) or {}
        d1["coins"] = d1.get("coins", 0) + bet
        await save_data(u1, d1)

    # return stake to user2 if joined
    u2 = game.get("user2")
    if u2:
        d2 = await load_data(u2) or {}
        d2["coins"] = d2.get("coins", 0) + bet
        await save_data(u2, d2)

    # remove game
    rps_challenges.pop(chat_id, None)

    # edit message to inform cancellation
    try:
        await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception:
        # ignore edit errors
        pass

    await callback.answer("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=False)


# --------- –ë–û–£–õ–ò–ù–ì -----------

MIN_BET = 10

bowling_games: Dict[str, Dict] = {}


def build_bowling_accept_keyboard(user_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëä –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"bowling_accept_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data="bowling_cancel")]
    ])


def build_bowling_initial_cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëä –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data="bowling_noop")],
        # noop placeholder (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data="bowling_cancel")]
    ])


# –•–µ–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã (—Ç—Ä–∏–≥–≥–µ—Ä: —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å "–±–æ—É–ª")
@dp.message(F.text.lower().startswith("–±–æ—É–ª"))
async def bowling_start(message: Message):
    if message.chat.type == "private":
        return await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∏–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

    uid = str(message.from_user.id)
    chat_id = str(message.chat.id)
    parts = (message.text or "").split()

    user_data = await load_data(uid)
    if not user_data:
        await create_user_data(uid)
        user_data = await load_data(uid)

    if len(parts) < 2:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"–ü—Ä–∏–º–µ—Ä: {html.code('–±–æ—É–ª 300')}\n"
            f"–ü—Ä–∏–º–µ—Ä: {html.code('–±–æ—É–ª –≤—Å–µ')}"
        )

    bet_str = parts[1].lower()
    balance = int(user_data.get("coins", 0))

    if bet_str == "–≤—Å–µ":
        bet = balance
    elif "–∫" in bet_str.lower():
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{html.code(gline())}\n"
            f"–ü—Ä–∏–º–µ—Ä: {html.code('–±–æ—É–ª 300')}\n"
            f"–ü—Ä–∏–º–µ—Ä: {html.code('–±–æ—É–ª –≤—Å–µ')}"
        )

    if bet <= 0 or bet > balance:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

    if bet < MIN_BET:
        return await message.reply(f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî {MIN_BET} mDrops!")

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —É –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    user_data["coins"] = balance - bet
    await save_data(uid, user_data)

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    score1 = random.randint(1, 10)
    bowling_games[chat_id] = {
        "user1": uid,
        "score1": score1,
        "bet": bet,
        "user2": None,
        "score2": None
    }

    await message.reply(
        f"üé≥ {await gsname(message.from_user.first_name, message.from_user.id)} –±—Ä–æ—Å–∏–ª —à–∞—Ä –∏ –≤—ã–±–∏–ª {html.spoiler("?")} –æ—á–∫–æ–≤!\n"
        f"–ö—Ç–æ –ø—Ä–∏–º–µ—Ç –≤—ã–∑–æ–≤ –Ω–∞ {format_balance(bet)} mDrops?",
        reply_markup=build_bowling_accept_keyboard(uid)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("bowling_accept_"))
@flood_protect(min_delay=0.5)
async def bowling_accept(callback: CallbackQuery):
    chat_id = str(callback.message.chat.id)
    uid = str(callback.from_user.id)
    game = bowling_games.get(chat_id)

    if not game:
        return await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)

    if uid == game["user1"]:
        return await callback.answer("ü§® –¢—ã –Ω–µ –º–æ–∂–µ—à—å –±—Ä–æ—Å–∞—Ç—å —Å–∞–º –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è!", show_alert=True)

    user2_data = await load_data(uid)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if not user2_data:
        await create_user_data(uid)
        user2_data = await load_data(uid)

    balance2 = int(user2_data.get("coins", 0))
    bet = int(game["bet"])

    if balance2 < bet:
        return await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    user2_data["coins"] = balance2 - bet
    await save_data(uid, user2_data)

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    score2 = random.randint(1, 10)
    game["user2"] = uid
    game["score2"] = score2

    user1 = game["user1"]
    user2 = game["user2"]
    score1 = game["score1"]

    # —É–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    bowling_games.pop(chat_id, None)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏—á—å–∏
    if score1 == score2:
        # –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–≤–∫–∏ –æ–±–æ–∏–º
        p1 = await load_data(user1) or {}
        p1["coins"] = p1.get("coins", 0) + bet
        await save_data(user1, p1)

        p2 = await load_data(user2) or {}
        p2["coins"] = p2.get("coins", 0) + bet
        await save_data(user2, p2)

        return await callback.message.edit_text(
            f"üé≥ –ù–∏—á—å—è! –û–±–∞ –≤—ã–±–∏–ª–∏ –ø–æ {score1} –æ—á–∫–æ–≤. –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."
        )

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if score1 > score2:
        winner = user1
        loser = user2
    else:
        winner = user2
        loser = user1

    total_win = bet * 2

    # –Ω–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    wdata = await load_data(winner) or {}
    wdata["coins"] = wdata.get("coins", 0) + total_win
    wdata["won_coins"] = wdata.get("won_coins", 0) + total_win
    await save_data(winner, wdata)

    ldata = await load_data(loser) or {}
    ldata["lost_coins"] = ldata.get("lost_coins", 0) + bet
    await save_data(loser, ldata)

    # –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    winner_num = "–ò–≥—Ä–æ–∫ 1" if winner == user1 else "–ò–≥—Ä–æ–∫ 2"
    await callback.message.edit_text(
        "üé≥ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        f"–ò–≥—Ä–æ–∫ 1: {score1} –æ—á–∫–æ–≤\n"
        f"–ò–≥—Ä–æ–∫ 2: {score2} –æ—á–∫–æ–≤\n"
        f"üèÜ –ü–æ–±–µ–¥–∞ –∑–∞ {winner_num}! üí∞ +{format_balance(total_win)} mDrops"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–≥—Ä—ã (–≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–æ–∫)
@dp.callback_query(F.data == "bowling_cancel")
@flood_protect(min_delay=0.5)
async def bowling_cancel(callback: CallbackQuery):
    chat_id = str(callback.message.chat.id)
    caller_id = str(callback.from_user.id)
    game = bowling_games.get(chat_id)

    if not game:
        await callback.answer("‚ùå –ò–≥—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
        return

    # —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä (user1), –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫ (user2), –∏–ª–∏ –∞–¥–º–∏–Ω/–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞
    allowed = False
    if caller_id == game.get("user1") or caller_id == game.get("user2"):
        allowed = True

    try:
        member = await bot.get_chat_member(int(chat_id), int(caller_id))
        if getattr(member, "status", None) in ("administrator", "creator"):
            allowed = True
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å allowed –∫–∞–∫ –µ—Å—Ç—å
        pass

    if not allowed:
        await callback.answer("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É.", show_alert=True)
        return

    bet = int(game.get("bet", 0))

    # –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–≤–∫—É –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
    u1 = game.get("user1")
    if u1:
        d1 = await load_data(u1) or {}
        d1["coins"] = d1.get("coins", 0) + bet
        await save_data(u1, d1)

    # –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–≤–∫—É –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
    u2 = game.get("user2")
    if u2:
        d2 = await load_data(u2) or {}
        d2["coins"] = d2.get("coins", 0) + bet
        await save_data(u2, d2)

    # —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É
    bowling_games.pop(chat_id, None)

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    except Exception:
        pass

    await callback.answer("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", show_alert=False)


chest_games = {}  # chat_id: {user, bet, correct}


@dp.message(F.text.lower().startswith("—Å—É–Ω–¥—É–∫–∏"))
async def chest_start(message: Message):
    uid = str(message.from_user.id)
    chat_id = str(message.chat.id)
    parts = message.text.split()

    data = await load_data(uid)

    if len(parts) < 2:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Å—É–Ω–¥—É–∫–∏ 300')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Å—É–Ω–¥—É–∫–∏ –≤—Å–µ')}"
        )

    bet_str = parts[1].lower()
    balance = data["coins"]

    if bet_str == "–≤—Å–µ":
        bet = balance
    elif "–∫" in bet_str.lower():
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Å—É–Ω–¥—É–∫–∏ 300')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Å—É–Ω–¥—É–∫–∏ –≤—Å–µ')}"
        )

    if bet <= 0 or bet > balance:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")

    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    data["coins"] -= bet
    await save_data(uid, data)

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫
    correct = random.randint(1, 4)
    chest_games[chat_id] = {"user": uid, "bet": bet, "correct": correct}

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –°—É–Ω–¥—É–∫ 1", callback_data=f"chest_1")],
        [InlineKeyboardButton(text="üì¶ –°—É–Ω–¥—É–∫ 2", callback_data=f"chest_2")],
        [InlineKeyboardButton(text="üì¶ –°—É–Ω–¥—É–∫ 3", callback_data=f"chest_3")],
        [InlineKeyboardButton(text="üì¶ –°—É–Ω–¥—É–∫ 4", callback_data=f"chest_4")],
    ])

    await message.reply(
        f"üì¶ {await gsname(message.from_user.first_name, message.from_user.id)} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É {format_balance(bet)} mDrops!\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ 4 —Å—É–Ω–¥—É–∫–æ–≤, –≤ –æ–¥–Ω–æ–º –∏–∑ –Ω–∏—Ö —Å–ø—Ä—è—Ç–∞–Ω –ø—Ä–∏–∑ üí∞",
        reply_markup=kb
    )


@dp.callback_query(F.data.startswith("chest_"))
@flood_protect(min_delay=0.5)
async def chest_pick(callback: CallbackQuery):
    chat_id = str(callback.message.chat.id)
    uid = str(callback.from_user.id)
    game = chest_games.get(chat_id)

    if not game:
        return await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª!", show_alert=True)

    if uid != game["user"]:
        return await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∏–≥—Ä–∞ –∏–ª–∏ —Ç—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª!", show_alert=True)

    pick = int(callback.data.split("_")[1])
    bet = game["bet"]
    correct = game["correct"]

    chest_games.pop(chat_id)

    if pick == correct:
        win = int(bet * 2.5)
        data = await load_data(uid)
        data["coins"] += win
        data["won_coins"] += win
        await save_data(uid, data)

        await callback.message.edit_text(
            f"üéâ –¢—ã –≤—ã–±—Ä–∞–ª —Å—É–Ω–¥—É–∫ {pick} –∏ —É–≥–∞–¥–∞–ª! –ü—Ä–∏–∑: +{format_balance(win)} mDrops üí∞"
        )
    else:
        looser_data = await load_data(uid)
        looser_data["lost_coins"] += bet
        await save_data(uid, looser_data)

        await callback.message.edit_text(
            f"üò¢ –¢—ã –≤—ã–±—Ä–∞–ª —Å—É–Ω–¥—É–∫ {pick}, –Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—ã–ª —Å—É–Ω–¥—É–∫ {correct}.\n\nüí∏ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops"
        )


# --------- –†–† -----------
active_rr_games = {}


def build_rr_keyboard(user_id: int, first_round: bool = False):
    kb = InlineKeyboardBuilder()
    kb.button(text="üî´ –í—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", callback_data=f"rr_shoot:{user_id}")
    if first_round:  # —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–û—Ç–º–µ–Ω–∏—Ç—å"
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"rr_cancel:{user_id}")
    else:
        kb.button(text="üõë –°—Ç–æ–ø", callback_data=f"rr_stop:{user_id}")
    return kb.as_markup()


def compute_rr_multiplier(game: dict) -> float:
    """
    –û–±—á–∏—Å–ª—é—î –º–Ω–æ–∂–Ω–∏–∫ –ø–æ —Ñ–æ—Ä–º—É–ª—ñ: 6 / (6 - used_count)
    –ü–æ–≤–µ—Ä—Ç–∞—î –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π –¥–æ 2 –∑–Ω–∞–∫—ñ–≤ float.
    –ë–µ–∑–ø–µ—á–Ω–∏–π –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –¥–∏–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
    """
    used_count = len(set(game.get("used", [])))
    remaining = 6 - used_count
    if remaining <= 0:
        return 6.0  # —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ –Ω–µ –º–∞—î —Ç—Ä–∞–ø–∏—Ç–∏—Å—å, –∞–ª–µ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
    return round(6.0 / remaining, 2)


def render_baraban(game: dict, reveal: bool = False):
    total = 6
    used_set = set(game.get("used", []))

    if not reveal:
        # –ø–æ–∫–∞–∑—É—î–º–æ —Ö—Ä–µ—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º—ñ—Ä–æ–∫, –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö—Ä–µ—Å—Ç–∏–∫—ñ–≤ = –∑–∞–ª–∏—à–æ–∫
        return "[ " + "  ".join(["√ó"] * (total - len(used_set))) + " ]"

    # –ø—Ä–∏ reveal –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Å–ª–æ—Ç–∏: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ ‚Äî "‚óã", –ø–æ—Ä–æ–∂–Ω—ñ ‚Äî "√ó", –∫—É–ª—è ‚Äî "‚Åç"
    slots = ["√ó"] * total
    for idx in used_set:
        if 0 <= idx < total:
            slots[idx] = "‚óã"
    bullet_idx = game.get("bullet_index")
    if isinstance(bullet_idx, int) and 0 <= bullet_idx < total:
        slots[bullet_idx] = "‚Åç"
    return "[ " + "  ".join(slots) + " ]"


@dp.message(F.text.lower().startswith("—Ä—Ä"))
async def handle_rr(message: Message):
    user_id = str(message.from_user.id)
    name = message.from_user.first_name

    if not await load_data(user_id):
        await create_user_data(user_id)
    data = await load_data(user_id)

    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Ä—Ä 2–∫')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Ä—Ä –≤—Å–µ')}"
        )

    bet_str = parts[1].lower()
    balance = data["coins"]

    if bet_str == "–≤—Å–µ":
        bet = balance
    elif "–∫" in bet_str.lower():
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{html.code(gline())}\n"
            f"–ü—Ä–∏–º–µ—Ä: {html.code('—Ä—Ä 2–∫')}\n"
            f"–ü—Ä–∏–º–µ—Ä: {html.code('—Ä—Ä –≤—Å–µ')}"
        )

    if bet <= 0 or bet > balance:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

    # —Å–ø–∏—Å—É—î–º–æ —Å—Ç–∞–≤–∫—É
    data["coins"] -= bet
    await save_data(user_id, data)

    bullet_index = random.randint(0, 5)

    active_rr_games[user_id] = {
        "bet": bet,
        "multiplier": 1.0,  # —Ç–∏–º—á–∞—Å–æ–≤–æ, –æ–¥—Ä–∞–∑—É –Ω–∏–∂—á–µ –ø–µ—Ä–µ—Ä–∞—Ö—É—î–º–æ
        "bullet_index": bullet_index,
        "current_slot": 0,
        "shots": 0,
        "used": [],
        "finished": False,
        "first_round": True  # –ø–æ–∑–Ω–∞—á–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
    }

    # –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –º–Ω–æ–∂–Ω–∏–∫
    active_rr_games[user_id]["multiplier"] = compute_rr_multiplier(active_rr_games[user_id])

    await message.answer(
        f"üî´ {name}, –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∏–≥—Ä—É\n\n"
        f"üî´ –ë–∞—Ä–∞–±–∞–Ω: {render_baraban(active_rr_games[user_id])}\n"
        f"ü§ë –í—ã–∏–≥—Ä—ã—à: x{active_rr_games[user_id]['multiplier']} (+{int(bet * (active_rr_games[user_id]['multiplier'] - 1))} mDrops)",
        reply_markup=build_rr_keyboard(message.from_user.id, first_round=True)
    )


@dp.callback_query(F.data.startswith("rr_"))
@flood_protect(min_delay=0.5)
async def rr_callback(call: CallbackQuery):
    action, owner_id = call.data.split(":")
    owner_id = int(owner_id)
    key = str(owner_id)

    if call.from_user.id != owner_id:
        return await call.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∏–≥—Ä–∞ –∏–ª–∏ —Ç—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª!", show_alert=True)

    game = active_rr_games.get(key)
    if not game:
        return await call.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    name = call.from_user.first_name
    bet = game["bet"]

    if action == "rr_cancel":
        # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–≤–∫—É –±–µ–∑ –º–Ω–æ–∂–Ω–∏–∫–∞
        data = await load_data(key)
        data["coins"] += bet
        await save_data(key, data)

        await call.message.edit_text(
            f"‚ùå {name}, –≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ {bet} mDrops."
        )
        active_rr_games.pop(key, None)
        return

    if action == "rr_shoot":
        # –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—Å—Ç—Ä—ñ–ª—É –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" –ø—Ä–∏–±–∏—Ä–∞—î–º–æ
        game["first_round"] = False

        slot = game["current_slot"]
        game["shots"] += 1

        if slot == game["bullet_index"]:
            text = (
                f"‚ùå {name}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n\n"
                f"üî´ {game['shots']}-–π –ø–∞—Ç—Ä–æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º\n\n"
                f"–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {format_balance(bet)} mDrops\n\n"
                f"üî´ –ë–∞—Ä–∞–±–∞–Ω: {render_baraban(game, reveal=True)}"
            )
            await call.message.edit_text(text)
            active_rr_games.pop(key, None)
            return

        # —è–∫—â–æ —Ö–æ–ª–æ—Å—Ç–∏–π ‚Äî –¥–æ–¥–∞—î–º–æ –≤ used, –ø–µ—Ä–µ—Å—É–≤–∞—î–º–æ —Å–ª–æ—Ç —ñ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –º–Ω–æ–∂–Ω–∏–∫ –ø–æ —Ñ–æ—Ä–º—É–ª—ñ
        game.setdefault("used", []).append(slot)
        game["current_slot"] = (slot + 1) % 6
        # –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –º–Ω–æ–∂–Ω–∏–∫–∞:
        game["multiplier"] = compute_rr_multiplier(game)
        # –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –≤–∏–≥—Ä–∞—à-–ø—Ä–∏–±—É—Ç–æ–∫ (–ø—Ä–∏–±—É—Ç–æ–∫ = bet * (multiplier - 1))
        win_amount = int(bet * (game["multiplier"] - 1))

        await call.message.edit_text(
            f"üî´ {name}, {game['shots']}-–π –≤—ã—Å—Ç—Ä–µ–ª –±—ã–ª —Ö–æ–ª–æ—Å—Ç—ã–º\n\n"
            f"üî´ –ë–∞—Ä–∞–±–∞–Ω: {render_baraban(game)}\n"
            f"ü§ë –í—ã–∏–≥—Ä—ã—à: x{game['multiplier']} (+{win_amount} mDrops)",
            reply_markup=build_rr_keyboard(owner_id, first_round=False)
        )
        return

    elif action == "rr_stop":
        # –≤–∏–ø–ª–∞—Ç–∞: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ bet * multiplier (–≤–∫–ª—é—á–∞—é—á–∏ —Å—Ç–∞–≤–∫—É)
        win_amount = int(bet * game["multiplier"])
        data = await load_data(key)
        data["coins"] += win_amount
        await save_data(key, data)

        text = (
            f"‚úÖ {name}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} mDrops (x{game['multiplier']})\n\n"
            f"üî´ –ë–∞—Ä–∞–±–∞–Ω: {render_baraban(game, reveal=True)}"
        )
        await call.message.edit_text(text)
        active_rr_games.pop(key, None)
        return


@dp.message(F.text.lower().startswith("–±–∞—Å–∫"))
async def handle_basketball(message: Message):
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) < 2:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–±–∞—Å–∫–µ—Ç–±–æ–ª 5–∫')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–±–∞—Å–∫–µ—Ç–±–æ–ª –≤—Å–µ')}"
        )

    bet_str = args[1]
    data = await load_data(str(user_id))
    balance = data["coins"]

    if bet_str == "–≤—Å–µ":
        bet = balance
    elif "–∫" in bet_str.lower():
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–±–∞—Å–∫–µ—Ç–±–æ–ª 5–∫')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–±–∞—Å–∫–µ—Ç–±–æ–ª –≤—Å–µ')}"
        )

    if bet > balance:
        return await message.reply(
            f"ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç mDrops!")

    if bet < 10:
        return await message.reply(
            f"ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops!")

    # –°–ø–∏—Å—É—î–º–æ —Å—Ç–∞–≤–∫—É
    data["coins"] -= bet
    await save_data(str(user_id), data)

    # –ö–∏–¥–∞—î–º–æ –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π –µ–º–æ–¥–∑—ñ üèÄ
    dice = await message.answer_dice(emoji="üèÄ")

    # –ß–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = dice.dice.value
    if result == 5 or result == 4:  # –ø–µ—Ä–µ–º–æ–≥–∞
        win_amount = int(bet * 2.2)
        data["coins"] += win_amount
        await save_data(str(user_id), data)
        await message.reply(
            f"üèÄ {await gsname(message.from_user.first_name, message.from_user.id)}, –≥–æ–ª! –¢—ã –≤—ã–∏–≥—Ä–∞–ª {format_balance(win_amount)} mDrops\n–ë–∞–ª–∞–Ω—Å: {format_balance(data["coins"])} mDrops")
    else:
        await message.reply(
            f"‚ùå {await gsname(message.from_user.first_name, message.from_user.id)}, –ø—Ä–æ–º–∞—Ö! –¢—ã –ø—Ä–æ–≥—Ä–∞–ª {format_balance(bet)} mDrops\n–ë–∞–ª–∞–Ω—Å: {format_balance(data["coins"])} mDrops")


FOOTBALL_MULTIPLIERS = {
    "gol": 1.6,
    "mimo": 2.2
}


@dp.message(F.text.lower().startswith("—Ñ—É—Ç–±–æ–ª"))
async def handle_football(message: Message):
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) < 2:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, user_id)}, —Ç–∏ –≤–≤—ñ–≤(–ª–∞) —â–æ—Å—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–∫–ª–∞–¥:</b> {html.code('—Ñ—É—Ç–±–æ–ª 5–∫')}\n"
            f"<b>–ü—Ä–∏–∫–ª–∞–¥:</b> {html.code('—Ñ—É—Ç–±–æ–ª 2–∫ –º–∏–º–æ')}"
        )

    bet_str = args[1]
    # –ø–∞—Ä—Å–∏–º —Å—Ç–∞–≤–∫—É
    if bet_str == "–≤—Å–µ":
        data = await load_data(str(user_id))
        if not data:
            await create_user_data(str(user_id))
            data = await load_data(str(user_id))
        bet = data.get("coins", 0)
    elif "–∫" in bet_str.lower():
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, user_id)}, —Ç–∏ –≤–≤—ñ–≤(–ª–∞) —â–æ—Å—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–∫–ª–∞–¥:</b> {html.code('—Ñ—É—Ç–±–æ–ª 5–∫')}\n"
            f"<b>–ü—Ä–∏–∫–ª–∞–¥:</b> {html.code('—Ñ—É—Ç–±–æ–ª 2–∫ –º–∏–º–æ')}"
        )

    # –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –±–∞–ª–∞–Ω—Å
    data = await load_data(str(user_id))
    if not data:
        await create_user_data(str(user_id))
        data = await load_data(str(user_id))

    balance = data.get("coins", 0)

    if bet > balance:
        return await message.reply(f"ü§® {await gsname(message.from_user.first_name, user_id)}, —Ç–æ–±—ñ –±—Ä–∞–∫—É—î mDrops!")

    if bet < 10:
        return await message.reply(
            f"ü§® {await gsname(message.from_user.first_name, user_id)}, –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ - 10 mDrops!")

    # —Å–ø–∏—Å—É—î–º–æ —Å—Ç–∞–≤–∫—É –≤—ñ–¥—Ä–∞–∑—É (—è–∫ —ñ —Ä–∞–Ω—ñ—à–µ) ‚Äî —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–º—ñ–Ω—è—î, –ø–æ–≤–µ—Ä–Ω–µ–º–æ –Ω–∞–∑–∞–¥
    data["coins"] = balance - bet
    await save_data(str(user_id), data)

    # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–¥—Ä–∞–∑—É –≤–∫–∞–∑–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    chosen = None
    if len(args) >= 3:
        chosen_raw = args[2].lower()
        if chosen_raw in ("–≥–æ–ª", "gol", "goal"):
            chosen = "gol"
        elif chosen_raw in ("–º–∏–º–æ", "mimo", "miss"):
            chosen = "mimo"
        else:
            chosen = None

    # –≤–∏–ø–∞–¥–æ–∫: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∫–∞–∑–∞–≤ –≤–∏–±—ñ—Ä ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é, —Ä–æ–±–∏–º–æ –ø–∞—É–∑—É, –≤–∏–¥–∞–ª—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –Ω–æ–≤–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    if chosen:
        dice_msg = None
        try:
            dice_msg = await message.answer_dice(emoji="‚öΩ")
        except Exception:
            dice_msg = None

        # –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await asyncio.sleep(3)

        # –≤–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–µ –±–æ—Ç-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∞–Ω—ñ–º–∞—Ü—ñ—é), —è–∫—â–æ –≤–æ–Ω–æ —î
        if dice_msg is not None:
            try:
                await dice_msg.delete()
            except Exception:
                pass

        # –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –≤–∞–≥–∏)
        outcome = random.choices(["gol", "mimo"], weights=[50, 50], k=1)[0]

        # –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –≤–∏–ø–ª–∞—Ç–∏
        data = await load_data(str(user_id))
        if not data:
            await create_user_data(str(user_id))
            data = await load_data(str(user_id))

        if outcome == chosen:
            mult = FOOTBALL_MULTIPLIERS[chosen]
            win_amount = int(bet * mult)
            data["coins"] = data.get("coins", 0) + win_amount
            await save_data(str(user_id), data)

            await message.answer(
                f"‚öΩÔ∏è {await gsname(message.from_user.first_name, user_id)}, –ø–æ–¥—ñ—è: <b>{'–ì–æ–ª' if outcome == 'gol' else '–ú–∏–º–æ'}</b> ‚Äî —Ç–∏ –≤–≥–∞–¥–∞–≤(–ª–∞)! üéâ\n"
                f"–¢–∏ –≤–∏–≥—Ä–∞–≤(–ª–∞) {format_balance(win_amount)} mDrops\n"
                f"–ë–∞–ª–∞–Ω—Å: {format_balance(data['coins'])} mDrops",
                parse_mode="HTML"
            )
        else:
            # –ø—Ä–æ–≥—Ä–∞—à ‚Äî —Å—Ç–∞–≤–∫–∞ –≤–∂–µ —Å–ø–∏—Å–∞–Ω–∞
            await message.answer(
                f"‚ùå {await gsname(message.from_user.first_name, user_id)}, –ø–æ–¥—ñ—è: <b>{'–ì–æ–ª' if outcome == 'gol' else '–ú–∏–º–æ'}</b>\n"
                f"–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤(–ª–∞) —Å—Ç–∞–≤–∫—É {format_balance(bet)} mDrops\n"
                f"–ë–∞–ª–∞–Ω—Å: {format_balance(data.get('coins', 0))} mDrops",
                parse_mode="HTML"
            )

        return

    # —ñ–Ω–∞–∫—à–µ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –ø–∞–Ω–µ–ª—å –≤–∏–±–æ—Ä—É (–∫–Ω–æ–ø–∫–∏)
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚öΩÔ∏è –ì–æ–ª - {FOOTBALL_MULTIPLIERS['gol']}—Ö",
                                  callback_data=f"football_play:{user_id}:{bet}:gol")],
            [InlineKeyboardButton(text=f"ü•Ö –ú–∏–º–æ - {FOOTBALL_MULTIPLIERS['mimo']}—Ö",
                                  callback_data=f"football_play:{user_id}:{bet}:mimo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"football_cancel:{user_id}:{bet}")]
        ])

        await message.reply(
            f"‚öΩÔ∏è –§—É—Ç–±–æ–ª ¬∑ –≤–∏–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
            f"{gline()}\n"
            f"üí∏ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops",
            reply_markup=kb
        )


@dp.callback_query(F.data.startswith("football_play:"))
async def football_play(cb: CallbackQuery):
    parts = cb.data.split(":")
    if len(parts) < 4:
        uid = int(parts[1])
        if cb.from_user.id != uid:
            return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")
        bet = int(parts[2])
        data = await load_data()
        data["coins"] += bet
        await save_data(uid, data)
        await cb.message.delete()
        return await cb.answer("–û—à–∏–±–∫–∞, —Å—Ç–∞–≤–∫—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ, –∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)

    uid = int(parts[1])
    bet = int(parts[2])
    choice = parts[3]  # 'gol' –∞–±–æ 'mimo'

    # –∑–∞—Ö–∏—Å—Ç ‚Äî –∫–Ω–æ–ø–∫—É –Ω–∞—Ç–∏—Å–Ω—É–≤ –Ω–µ —Ç–æ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if cb.from_user.id != uid:
        return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    # —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    try:
        await cb.message.delete()
    except Exception:
        pass

    # –¥–ª—è —Ñ–∞–Ω—É –ø–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é (–Ω–æ–≤–µ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
    dice_msg = None
    try:
        dice_msg = await cb.message.answer_dice(emoji="‚öΩ")
    except Exception:
        dice_msg = None

    # –ø–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥–∏
    await asyncio.sleep(3)

    # –≤–∏–¥–∞–ª—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–ª–∞
    if dice_msg is not None:
        try:
            await dice_msg.delete()
        except Exception:
            pass

    # –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if int(dice_msg.dice.value) <= 2:
        outcome = "mimo"
    else:
        outcome = "gol"

    data = await load_data(str(uid))
    if not data:
        await create_user_data(str(uid))
        data = await load_data(str(uid))

    if outcome == choice:
        mult = FOOTBALL_MULTIPLIERS[choice]
        win_amount = int(bet * mult)
        data["coins"] = data.get("coins", 0) + win_amount
        await save_data(str(uid), data)

        await cb.message.answer(
            f"üî• {await gsname(cb.from_user.first_name, uid)} | <b>–§—É—Ç–±–æ–ª ¬∑ –ü–æ–±–µ–¥–∞!</b> ‚úÖ\n"
            f"{gline()}\n"
            f"üí∏ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops\n"
            f"üé≤ –í—ã–±—Ä–∞–Ω–æ: {'–ì–æ–ª' if outcome == 'gol' else '–ú–∏–º–æ'}\n"
            f"üí∞ –í—ã–∏–≥—Ä—ã—à: x{FOOTBALL_MULTIPLIERS[choice]} / {format_balance(win_amount)} mDrops\n"
            f"{gline()}\n"
            f"{html.blockquote(f"‚ö°Ô∏è –ò—Ç–æ–≥: {'–ì–æ–ª' if outcome == 'gol' else '–ú–∏–º–æ'}")}",
            parse_mode="HTML"
        )
    else:
        await cb.message.answer(
            f"üí• {await gsname(cb.from_user.first_name, uid)} | <b>–§—É—Ç–±–æ–ª ¬∑ –ü—Ä–æ–∏–≥—Ä—ã—à!</b>\n"
            f"{gline()}\n"
            f"üí∏ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops\n"
            f"üé≤ –í—ã–±—Ä–∞–Ω–æ: <b>{'–ú–∏–º–æ' if outcome == 'gol' else '–ì–æ–ª'}</b>\n"
            f"{gline()}\n"
            f"{html.blockquote(f"‚ö°Ô∏è –ò—Ç–æ–≥: {'–ì–æ–ª' if outcome == 'gol' else '–ú–∏–º–æ'}")}",
            parse_mode="HTML"
        )


@dp.callback_query(F.data.startswith("football_cancel:"))
async def football_cancel(cb: CallbackQuery):
    parts = cb.data.split(":")
    if len(parts) < 3:
        return await cb.answer("–û—à–∏–±–∫–∞")

    uid = int(parts[1])
    bet = int(parts[2])

    if cb.from_user.id != uid:
        return await cb.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–≤–∫—É
    data = await load_data(str(uid))
    if not data:
        await create_user_data(str(uid))
        data = await load_data(str(uid))

    data["coins"] = data.get("coins", 0) + bet
    await save_data(str(uid), data)

    # –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–±–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏)
    try:
        await cb.message.delete()
    except Exception:
        pass

    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=BACK, callback_data=f"back_to_menu:{uid}")]])
    await cb.message.answer(
        f"‚ÑπÔ∏è {await gsname(cb.from_user.first_name, uid)}, —Å—Ç–∞–≤–∫–∞ {format_balance(bet)} mDrops –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(data['coins'])} mDrops",
        reply_markup=kb
    )


active_duels = {}


@dp.message(F.text.lower().startswith("–¥—É—ç–ª—å"))
async def start_duel(message: Message):
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) < 2:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–¥—É—ç–ª—å 3–∫')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–¥—É—ç–ª—å –≤—Å–µ')}"
        )

    bet_str = args[1]
    data = await load_data(str(user_id))
    balance = data["coins"]

    if bet_str == "–≤—Å–µ":
        bet = balance
    elif "–∫" in bet_str.lower():
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await message.reply(
            f"{html.italic(f'ü§® {await gsname(message.from_user.first_name, message.from_user.id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–¥—É—ç–ª—å 3–∫')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–¥—É—ç–ª—å –≤—Å–µ')}"
        )

    if bet <= 0 or bet > balance:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏!")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", callback_data=f"accept_duel:{bet}:{user_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_duel:{user_id}")]
        ]
    )
    msg = await message.reply(
        f"‚öîÔ∏è {await gsname(message.from_user.first_name, user_id)} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å!\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops",
        reply_markup=kb
    )

    active_duels[msg.message_id] = {"initiator": user_id, "bet": bet}
    active_duels[msg.message_id] = {"initiator": user_id, "bet": bet}


@dp.callback_query(F.data.startswith("accept_duel:"))
@flood_protect(min_delay=0.5)
async def accept_duel(callback: CallbackQuery):
    _, bet_str, initiator_id = callback.data.split(":")
    bet = int(bet_str)
    initiator_id = int(initiator_id)
    opponent_id = callback.from_user.id

    if not await load_data(str(opponent_id)):
        await create_user_data(opponent_id)

    if initiator_id == opponent_id:
        return await callback.answer("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∂–µ –¥—É—ç–ª—å!", show_alert=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
    initiator_data = await load_data(str(initiator_id))
    opponent_data = await load_data(str(opponent_id))

    chatg = await bot.get_chat(initiator_id)
    initiator_name = chatg.first_name
    opponent_name = callback.from_user.first_name

    if initiator_data["coins"] < bet:
        return await callback.answer("‚ùå –£ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ —É–∂–µ –Ω–µ—Ç –¥–µ–Ω–µ–≥!", show_alert=True)
    if opponent_data["coins"] < bet:
        return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!", show_alert=True)

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏
    initiator_data["coins"] -= bet
    opponent_data["coins"] -= bet
    await save_data(str(initiator_id), initiator_data)
    await save_data(str(opponent_id), opponent_data)

    await callback.message.edit_text(
        f"‚öîÔ∏è –î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å!\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops\n\n"
        f"üë§ {await gsname(opponent_name, opponent_id)} –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ –æ—Ç {await gsname(initiator_name, initiator_id)}!"
    )

    # –ö–∏–¥–∞–µ–º –∫—É–±–∏–∫–∏
    msg = await callback.message.answer(f"üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ –¥–ª—è {await gsname(initiator_name, initiator_id)}...")
    dice1 = await callback.message.answer_dice(emoji="üé≤")
    await asyncio.sleep(3)

    msg2 = await callback.message.answer(f"üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ –¥–ª—è {await gsname(opponent_name, opponent_id)}...")
    dice2 = await callback.message.answer_dice(emoji="üé≤")

    await asyncio.sleep(4)

    val1, val2 = dice1.dice.value, dice2.dice.value

    if val1 > val2:
        initiator_data["coins"] += bet * 2
        initiator_data["won_coins"] += bet * 2
        opponent_data["lost_coins"] += bet
        await save_data(str(opponent_id), opponent_data)
        await save_data(str(initiator_id), initiator_data)
        await callback.message.answer(
            f"üèÜ –ü–æ–±–µ–¥–∏–ª {await gsname(initiator_name, initiator_id)}!\n–í—ã–∏–≥—Ä—ã—à: {format_balance(bet * 2)} mDrops"
        )
    elif val2 > val1:
        opponent_data["coins"] += bet * 2
        opponent_data["won_coins"] += bet * 2
        initiator_data["lost_coins"] += bet
        await save_data(str(initiator_id), initiator_data)
        await save_data(str(opponent_id), opponent_data)
        await callback.message.answer(
            f"üèÜ –ü–æ–±–µ–¥–∏–ª {await gsname(opponent_name, opponent_id)}!\n–í—ã–∏–≥—Ä—ã—à: {format_balance(bet * 2)} mDrops"
        )
    else:
        initiator_data["coins"] += bet
        opponent_data["coins"] += bet
        await save_data(str(initiator_id), initiator_data)
        await save_data(str(opponent_id), opponent_data)
        await callback.message.answer("ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")


@dp.callback_query(F.data.startswith("cancel_duel:"))
@flood_protect(min_delay=0.5)
async def cancel_duel(callback: CallbackQuery):
    _, initiator_id = callback.data.split(":")
    initiator_id = int(initiator_id)

    if callback.from_user.id != initiator_id:
        return await callback.answer("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ—ë —Å–æ–∑–¥–∞—Ç–µ–ª—å!", show_alert=True)

    # –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å
    if callback.message.message_id in active_duels:
        del active_duels[callback.message.message_id]

    await callback.message.edit_text("‚öîÔ∏è –î—É—ç–ª—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
    await callback.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥—É—ç–ª—å ‚úÖ")


coin_games: Dict[Tuple[int, int], Dict[str, Any]] = {}

# TTL –¥–ª—è —ñ–≥–æ—Ä (—Å–µ–∫—É–Ω–¥) ‚Äî –ø–æ –±–∞–∂–∞–Ω–Ω—é, —â–æ–± –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—ñ—á–Ω–æ
GAME_TTL = 300  # 5 —Ö–≤–∏–ª–∏–Ω


@dp.message(F.text.lower().startswith("–º–æ–Ω–µ—Ç–∫–∞"))
async def handle_coin_game(msg: Message):
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply(
            f"{html.italic(f'ü§® {await gsname(msg.from_user.first_name, user_id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–º–æ–Ω–µ—Ç–∫–∞ 2.5–∫')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–º–æ–Ω–µ—Ç–∫–∞ –≤—Å–µ')}"
        )

    bet_str = parts[1].strip()

    # –ó–∞–≥—Ä—É–∂–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–≤–∫–∏
    if bet_str.lower() == "–≤—Å–µ":
        bet = data["coins"]
    elif "–∫" in bet_str.lower():
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await msg.reply(
            f"{html.italic(f'ü§® {await gsname(msg.from_user.first_name, user_id)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–º–æ–Ω–µ—Ç–∫–∞ 2.5–∫')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–º–æ–Ω–µ—Ç–∫–∞ –≤—Å–µ')}"
        )

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞–≤–∫–∏
    if bet <= 0:
        return await msg.reply(f"‚ùå {await gsname(name, user_id)}, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞.")
    if bet < 10:
        return await msg.reply(f"‚ùå {await gsname(name, user_id)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops")
    if bet > data["coins"]:
        return await msg.reply(
            f"‚ùå {await gsname(name, user_id)}, —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞!\n\nüí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {format_balance(data['coins'])}")

    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É –≤—ñ–¥—Ä–∞–∑—É
    data["coins"] -= bet
    await save_data(user_id, data)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîº –û—Ä–µ–ª", callback_data="coin_game:eagle"),
            InlineKeyboardButton(text="üîΩ –†–µ—à–∫–∞", callback_data="coin_game:tails")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="coin_game:cancel")]
    ])

    sent = await msg.reply(
        f"ü™ô {await gsname(name, user_id)}, –≤—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É! –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops",
        reply_markup=kb
    )

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä—É –≤ —Å–ª–æ–≤–Ω–∏–∫—É –ø–æ –∫–ª—é—á—É (chat_id, message_id)
    game_key = (sent.chat.id, sent.message_id)
    coin_games[game_key] = {
        "owner_id": user_id,
        "bet": int(bet),
        "created_at": asyncio.get_event_loop().time()
    }

    # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ ‚Äî –ø–ª–∞–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ GAME_TTL
    async def expire_game_after_ttl(key):
        await asyncio.sleep(GAME_TTL)
        g = coin_games.get(key)
        if not g:
            return
        # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–≤–∫—É –≥—Ä–∞–≤—Ü—é —ñ —ñ–Ω—Ñ–æ—Ä–º—É—î–º–æ (—è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–µ)
        try:
            owner = g["owner_id"]
            # –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –¥–∞–Ω—ñ —ñ –ø–æ–≤–µ—Ä–Ω–µ–º–æ —Å—Ç–∞–≤–∫—É
            data_owner = await load_data(owner)
            if data_owner is None:
                await create_user_data(owner)
                data_owner = await load_data(owner)
            data_owner["coins"] += g["bet"]
            await save_data(owner, data_owner)
            # –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            try:
                # —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–µ —ñ—Å–Ω—É—î ‚Äî –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                await bot.edit_message_text(
                    chat_id=key[0],
                    message_id=key[1],
                    text=f"‚ùå –ò–≥—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ). –°—Ç–∞–≤–∫–∞ {format_balance(g['bet'])} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
                )
            except Exception:
                pass
        except Exception:
            pass
        # –≤–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É
        coin_games.pop(key, None)

    # –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞—Å–∫ –¥–ª—è TTL (–Ω–µ –±–ª–æ–∫—É—é—á–∏)
    asyncio.create_task(expire_game_after_ttl(game_key))


@dp.callback_query(F.data.startswith("coin_game:"))
@flood_protect(min_delay=0.5)
async def coin_game_callback(query: CallbackQuery):
    # callback_data —É —Ñ–æ—Ä–º–∞—Ç—ñ coin_game:action
    parts = query.data.split(":")
    if len(parts) != 2:
        return await query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)

    _, action = parts

    # –ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤ —è–∫–æ–º—É –±—É–ª–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ id —è–∫ –∫–ª—é—á
    if not query.message:
        return await query.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    key = (query.message.chat.id, query.message.message_id)
    game = coin_games.get(key)
    if not game:
        return await query.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)

    owner_id = game["owner_id"]
    bet = int(game["bet"])

    # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å
    if query.from_user.id != owner_id:
        return await query.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è —Å—Ç–∞–≤–∫–∞!", show_alert=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if action == "cancel":
        # –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–≤–∫—É
        data = await load_data(owner_id)
        if not data:
            await create_user_data(owner_id)
            data = await load_data(owner_id)
        data["coins"] += bet
        await save_data(owner_id, data)

        # —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        coin_games.pop(key, None)
        try:
            await query.message.edit_text(f"‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞–≤–∫–∞ {format_balance(bet)} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
        except Exception:
            pass
        return await query.answer()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏—è (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏")
    await query.answer()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—Ä–æ—Å–∞–µ–º
    try:
        await query.message.edit_text("ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...")
    except:
        pass

    await asyncio.sleep(3)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 50/50
    result_side = random.choice(["eagle", "tails"])
    nice_result = "üîº –û—Ä–µ–ª" if result_side == "eagle" else "üîΩ –†–µ—à–∫–∞"

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–≥–∞–¥–∞–ª
    if action == result_side:
        reward = bet * 2
        data = await load_data(owner_id)
        if not data:
            await create_user_data(owner_id)
            data = await load_data(owner_id)
        data["coins"] += reward
        data["won_coins"] = data.get("won_coins", 0) + int(reward)
        await save_data(owner_id, data)

        # —É–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        coin_games.pop(key, None)

        try:
            await query.message.edit_text(
                f"ü™ô –†–µ–∑—É–ª—å—Ç–∞—Ç: {nice_result}\n\n"
                f"üéâ {await gsname(query.from_user.first_name, owner_id)}, —Ç—ã –ø–æ–±–µ–¥–∏–ª! –í—ã–∏–≥—Ä—ã—à: {format_balance(reward)} mDrops\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(data['coins'])}"
            )
        except:
            pass
        return await query.answer("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", show_alert=False)

    # –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
    data = await load_data(owner_id)
    if not data:
        await create_user_data(owner_id)
        data = await load_data(owner_id)
    data["lost_coins"] = data.get("lost_coins", 0) + int(bet)
    await save_data(owner_id, data)

    # —É–¥–∞–ª—è–µ–º –∏–≥—Ä—É
    coin_games.pop(key, None)

    try:
        await query.message.edit_text(
            f"ü™ô –†–µ–∑—É–ª—å—Ç–∞—Ç: {nice_result}\n\n"
            f"üòî {await gsname(query.from_user.first_name, owner_id)}, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –°—Ç–∞–≤–∫–∞ {format_balance(bet)} mDrops –ø–æ—Ç–µ—Ä—è–Ω–∞.\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(data['coins'])}"
        )
    except:
        pass
    return await query.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.", show_alert=False)


@dp.message(F.text.lower().startswith("–∫—É–±–∏–∫"))
async def handle_cube_game(msg: Message):
    uid = msg.from_user.id
    name = msg.from_user.first_name

    _, bet_str, bet_type = msg.text.split(" ")
    bets_types = ["1", "2", "3", "4", "5", "6", "—á–µ—Ç", "–Ω–µ—á–µ—Ç", "–±", "–º"]
    if not bet_str:
        return await msg.reply(
            f"{html.italic(f'ü§® {await gsname(name, uid)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—É–±–∏–∫ 500 5')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—É–±–∏–∫ –≤—Å–µ –Ω–µ—á–µ—Ç')}\n"
            f"<b>–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫:</b> {", ".join(bets_types)}"
        )

    if not bet_type or not bet_type in bets_types:
        return await msg.reply(
            f"{html.italic(f'ü§® {await gsname(name, uid)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—É–±–∏–∫ 500 5')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—É–±–∏–∫ –≤—Å–µ –Ω–µ—á–µ—Ç')}\n"
            f"<b>–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫:</b> {", ".join(bets_types)}"
        )

    multiplayer = 2
    data = await load_data(uid)

    bet = 0
    if bet_str.lower() == "–≤—Å–µ":
        bet = int(data["coins"])
    elif bet_str.isdigit():
        bet = int(bet_str)
    elif "–∫" in bet_str:
        try:
            bet = parse_bet_input(bet_str)
        except Exception:
            return await msg.reply(
                f"{html.italic(f'ü§® {await gsname(name, uid)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
                f"{gline()}\n"
                f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—É–±–∏–∫ 500 5')}\n"
                f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—É–±–∏–∫ –≤—Å–µ –Ω–µ—á–µ—Ç')}\n"
                f"<b>–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫:</b> {", ".join(bets_types)}"
            )

    else:
        return await msg.reply(
            f"{html.italic(f'ü§® {await gsname(name, uid)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—É–±–∏–∫ 500 5')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∫—É–±–∏–∫ –≤—Å–µ –Ω–µ—á–µ—Ç')}\n"
            f"<b>–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫:</b> {", ".join(bets_types)}"
        )

    if bet < 10:
        return await msg.reply(f"‚ùå {await gsname(name, uid)}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops")
    if bet > data["coins"]:
        return await msg.reply(f"‚ùå {await gsname(name, uid)}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mDrops –¥–ª—è —Å—Ç–∞–≤–∫–∏")

    data["coins"] -= bet
    await save_data(uid, data)

    number = random.randint(1, 6)
    win = False

    if str(bet_type) == str(number):
        multiplayer = 3.5
        win = True
    elif str(bet_type) == "—á–µ—Ç" and number % 2 == 0:
        multiplayer = 1.9
        win = True
    elif str(bet_type) == "–Ω–µ—á–µ—Ç" and number % 2 == 1:
        multiplayer = 1.9
        win = True
    elif str(bet_type) == "–±" and number >= 4:
        multiplayer = 1.9
        win = True
    elif str(bet_type) == "–º" and number <= 3:
        multiplayer = 1.9
        win = True
    else:
        win = False

    b_or_m = "–º–µ–Ω—å—à–µ" if number <= 3 else "–±–æ–ª—å—à–µ"
    c_or_n = "—á–µ—Ç" if number % 2 == 0 else "–Ω–µ—á–µ—Ç"

    win_sum = bet * multiplayer
    if win:
        data["won_coins"] += bet
        data["coins"] += win_sum
        await save_data(uid, data)
        return await msg.reply(
            f"üéâ {await gsname(name, uid)} —Ç—ã –≤—ã–∏–≥—Ä–∞–ª!\n{gline()}\nüé≤ –ß–∏—Å–ª–æ: {html.bold(number)} ({html.code(f"{b_or_m}")}, {html.code(f"{c_or_n}")})\n\nüí∞ –í—ã–∏–≥—Ä—ã—à: {format_balance(win_sum)} mDrops (x{multiplayer})")
    else:
        data["lost_coins"] += bet
        await save_data(uid, data)
        return await msg.reply(
            f"üò¢ {await gsname(name, uid)} —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!\n{gline()}\nüé≤ –ß–∏—Å–ª–æ: {html.bold(number)} ({html.code(f"{b_or_m}")}, {html.code(f"{c_or_n}")})\n\nüí∏ –°—Ç–∞–≤–∫–∞: {format_balance(bet)} mDrops")


DIAMOND_GAMES: Dict[str, dict] = {}  # game_id -> state
user_diamond_locks: Dict[str, asyncio.Lock] = {}  # locks per user (to avoid races)

TOTAL_ROWS = 50
COLUMNS = 3
SHOW_PREV_ROWS = 8
HOUSE_EDGE = 0.985


def _get_diamond_lock(user_id: str) -> asyncio.Lock:
    lock = user_diamond_locks.get(user_id)
    if lock is None:
        lock = asyncio.Lock()
        user_diamond_locks[user_id] = lock
    return lock


# ---------- Multipliers ----------
def calc_next_multiplier(state: dict) -> float:
    level = int(state.get("level", 0))
    bombs = state.get("bombs", [])
    if level < 0 or level >= len(bombs):
        return 0.0
    row = bombs[level]
    mines_in_row = sum(1 for x in row if int(x) == 1)
    cells_in_row = len(row)
    safe = max(0, cells_in_row - mines_in_row)
    if cells_in_row <= 0 or safe <= 0:
        return 0.0
    p_safe = safe / cells_in_row
    mult = (1.0 / p_safe) * HOUSE_EDGE
    return round(mult, 6)


def product_multipliers(state: dict) -> float:
    prod = 1.0
    for m in state.get("multipliers_history", []):
        prod *= m
    return round(prod, 6)


# ---------- Game lifecycle (in-memory) ----------
def _new_game_id() -> str:
    return uuid.uuid4().hex


async def start_diamonds_game(user_id: str, bet: int, mines_amount: int = 1) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–≥—Ä—É –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç game_id.
    """
    if bet is None:
        raise ValueError("bet is required")
    if mines_amount < 1 or mines_amount > min(2, COLUMNS - 1):
        raise ValueError("mines_amount must be 1..2")

    bombs: List[List[int]] = []
    for _ in range(TOTAL_ROWS):
        row = [0] * COLUMNS
        mine_positions = random.sample(range(COLUMNS), mines_amount)
        for p in mine_positions:
            row[p] = 1
        bombs.append(row)

    game_id = _new_game_id()
    DIAMOND_GAMES[game_id] = {
        "game_id": game_id,
        "uid": str(user_id),
        "bet": int(bet),
        "mines_amount": int(mines_amount),
        "level": 0,
        "bombs": bombs,
        "selected": [],
        "lost": False,
        "state": "playing",
        "started_at": int(time.time()),
        "last_action_ts": 0,
        "multipliers_history": []
    }
    return game_id


def _get_state_for_game(game_id: str) -> Optional[dict]:
    return DIAMOND_GAMES.get(game_id)


def _end_and_cleanup(game_id: str):
    DIAMOND_GAMES.pop(game_id, None)


# ---------- Keyboard builder ----------
def build_diamonds_keyboard_for_game(game_id: str) -> InlineKeyboardMarkup:
    state = _get_state_for_game(game_id)
    if not state:
        return InlineKeyboardMarkup(inline_keyboard=[])

    level = int(state.get("level", 0))
    selected = state.get("selected", [])
    lost = bool(state.get("lost", False))

    if lost or level >= TOTAL_ROWS:
        return InlineKeyboardMarkup(inline_keyboard=[])

    kb_rows = []

    start_prev = max(0, level - SHOW_PREV_ROWS)
    for i in range(start_prev, level):
        choice = selected[i] if i < len(selected) else None
        row_buttons = []
        for j in range(COLUMNS):
            emoji = "üí†" if (choice is not None and j == choice) else "‚ùì"
            row_buttons.append(InlineKeyboardButton(text=emoji, callback_data="noop"))
        kb_rows.append(row_buttons)

    # current row (clickable)
    kb_rows.append([InlineKeyboardButton(text="‚ùì", callback_data=f"diam_choose:{game_id}:{j}") for j in range(COLUMNS)])

    # actions (attach game_id so each game has its own action buttons)
    if level == 0:
        kb_rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"diam_cancel:{game_id}")])
    else:
        kb_rows.append([InlineKeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å", callback_data=f"diam_collect:{game_id}")])

    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


# ---------- Handlers ----------
@dp.callback_query(F.data.startswith("diam_choose:"))
@flood_protect(min_delay=0.5)
async def on_diam_choose(cb: CallbackQuery):
    # parse game_id and idx
    try:
        _, game_id, idx_s = cb.data.split(":")
        idx = int(idx_s)
    except Exception:
        await cb.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    state = _get_state_for_game(game_id)
    if not state:
        await cb.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
        return

    uid = state["uid"]
    if str(cb.from_user.id) != uid:
        await cb.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞", show_alert=True)
        return

    lock = _get_diamond_lock(uid)
    async with lock:
        try:
            if state.get("state") != "playing":
                await cb.answer("‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
                return

            now = int(time.time() * 1000)
            last_ts = state.get("last_action_ts", 0)
            if now - last_ts < 200:
                await cb.answer()
                return
            state["last_action_ts"] = now

            if idx < 0 or idx >= COLUMNS:
                await cb.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
                return

            level = int(state.get("level", 0))
            if level < 0 or level >= TOTAL_ROWS:
                await cb.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã", show_alert=True)
                return

            if state.get("lost", False):
                await cb.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", show_alert=True)
                return

            # –≤—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –î–û –æ—Ç–∫—Ä—ã—Ç–∏—è
            mult_for_move = calc_next_multiplier(state)
            if mult_for_move <= 0:
                mult_for_move = 1.0

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
            if len(state.get("selected", [])) <= level:
                state.setdefault("selected", []).append(idx)

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É
            bombs = state.get("bombs", [])
            if bombs[level][idx] == 1:
                # –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
                state["lost"] = True
                state["state"] = "lost"

                # –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î: lost_coins += bet
                try:
                    data = await load_data(uid) or {}
                    data["lost_coins"] = int(data.get("lost_coins", 0)) + int(state.get("bet", 0))
                    await save_data(uid, data)
                except Exception:
                    # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏–º handle_error
                    pass

                final_kb = build_final_diamonds_keyboard_for_game(game_id)
                await cb.message.edit_text(
                    f"üí• <b>{await gsname(cb.from_user.first_name, cb.from_user.id)}, —Ç—ã –ø–æ–ø–∞–ª –Ω–∞ –º–∏–Ω—É!</b>\n{gline()}\n"
                    f"<b>üß® –ú–∏–Ω</b>: {state.get('mines_amount')}\n"
                    f"<b>üí∏ –°—Ç–∞–≤–∫–∞</b>: {format_balance(state.get('bet', 0))}\n"
                    f"{html.blockquote(f'<b>ü™ú –†—è–¥:</b> {level + 1}')}",
                    reply_markup=final_kb
                )
                _end_and_cleanup(game_id)
                return

            # –±–µ–∑–æ–ø–∞—Å–Ω–æ
            state.setdefault("multipliers_history", []).append(mult_for_move)
            state["level"] = level + 1

            # –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞
            if state["level"] >= TOTAL_ROWS:
                current_total_mult = product_multipliers(state)
                win = int(state.get("bet", 0) * current_total_mult)

                # –Ω–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –≤ –ë–î
                try:
                    data = await load_data(uid) or {}
                    data["coins"] = int(data.get("coins", 0)) + int(win)
                    data["won_coins"] = int(data.get("won_coins", 0)) + int(win)
                    await save_data(uid, data)
                except Exception:
                    pass

                state["state"] = "won"
                final_kb = build_final_diamonds_keyboard_for_game(game_id)
                await cb.message.edit_text(
                    f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ {TOTAL_ROWS} —É—Ä–æ–≤–Ω–µ–π –∏ –∑–∞–±—Ä–∞–ª–∏ {format_balance(win)} mDrops!",
                    reply_markup=final_kb
                )
                _end_and_cleanup(game_id)
                return

            # –∏–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ —Ç–µ–∫—É—â–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ (–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)
            current_total_mult = product_multipliers(state)
            bet = state.get('bet', 0)
            available_prize = round(current_total_mult, 2) * bet

            next_mult = calc_next_multiplier(state)
            kb = build_diamonds_keyboard_for_game(game_id)
            await cb.message.edit_text(
                f"üí†<b> {await gsname(cb.from_user.first_name, uid)}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É!</b>\n{gline()}\n"
                f"<b>üß® –ú–∏–Ω:</b> {state.get('mines_amount', 1)}\n"
                f"<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> {format_balance(state.get('bet', 0))} mDrops\n"
                f"<b>üìä –í—ã–∏–≥—Ä—ã—à:</b> x{round(current_total_mult, 2)} / {format_balance(available_prize)} mDrops\n"
                f"{html.blockquote(f'<b>ü™ú –†—è–¥:</b> {state['level']}')}",
                reply_markup=kb
            )
        except Exception as e:
            try:
                await handle_error(cb.from_user.username, e, cb.from_user.id, 600)
            except Exception:
                await cb.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("diam_cancel:"))
@flood_protect(min_delay=0.5)
async def on_diam_cancel(cb: CallbackQuery):
    try:
        _, game_id = cb.data.split(":")
    except Exception:
        await cb.answer();
        return
    state = _get_state_for_game(game_id)
    if not state:
        await cb.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True);
        return
    uid = state["uid"]
    if str(cb.from_user.id) != uid:
        await cb.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞", show_alert=True);
        return

    lock = _get_diamond_lock(uid)
    async with lock:
        if int(state.get("level", 0)) != 0 or state.get("selected"):
            await cb.answer("‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞", show_alert=True)
            return
        # –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–≤–∫—É –≤ DB
        try:
            data = await load_data(uid) or {}
            bet = int(state.get("bet", 0))
            data["coins"] = int(data.get("coins", 0)) + bet
            await save_data(uid, data)
        except Exception:
            pass

        _end_and_cleanup(game_id)
        await cb.message.edit_text(f"‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", reply_markup=None)


@dp.callback_query(F.data.startswith("diam_collect:"))
@flood_protect(min_delay=0.5)
async def on_diam_collect(cb: CallbackQuery):
    try:
        _, game_id = cb.data.split(":")
    except Exception:
        await cb.answer();
        return
    state = _get_state_for_game(game_id)
    if not state:
        await cb.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True);
        return
    uid = state["uid"]
    if str(cb.from_user.id) != uid:
        await cb.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞", show_alert=True);
        return

    lock = _get_diamond_lock(uid)
    async with lock:
        if int(state.get("level", 0)) == 0:
            await cb.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ, –≤—ã –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥!", show_alert=True)
            return
        if state.get("lost", False):
            await cb.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏", show_alert=True)
            return

        bet = state.get('bet', 0)
        current_total_mult = product_multipliers(state)
        win = int(state.get("bet", 0) * current_total_mult)

        # –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –≤ –ë–î
        try:
            data = await load_data(uid) or {}
            data["coins"] = int(data.get("coins", 0)) + int(win)
            data["won_coins"] = int(data.get("won_coins", 0)) + int(win)
            await save_data(uid, data)
        except Exception:
            pass

        # –æ—Ç–º–µ—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ collected, —á—Ç–æ–±—ã —Ñ–∏–Ω–∞–ª –ø–æ–∫–∞–∑–∞–ª –º–∏–Ω—ã
        state["state"] = "collected"
        final_kb = build_final_diamonds_keyboard_for_game(game_id)

        await cb.message.edit_text(
            f"üéâ <b>{await gsname(cb.from_user.first_name, cb.from_user.id)}, —Ç—ã –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à!</b> ‚úÖ\n{gline()}\n"
            f"<b>üß® –ú–∏–Ω:</b> {state.get('mines_amount')}\n"
            f"<b>üí∏ –°—Ç–∞–≤–∫–∞:</b> {format_balance(int(state.get('bet', 0)))} mDrops\n"
            f"<b>üí∞ –í—ã–∏–≥—Ä—ã—à:</b> x{round(current_total_mult, 2)} / {format_balance(win)} mDrops\n",
            reply_markup=final_kb
        )

        _end_and_cleanup(game_id)


@dp.callback_query(F.data == "noop")
async def do_nothing(cb: CallbackQuery):
    await cb.answer()


# ---------- Final keyboard builder (read-only, —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω—ã –ø—Ä–∏ collected –∏–ª–∏ lost) ----------
def build_final_diamonds_keyboard_for_game(game_id: str) -> InlineKeyboardMarkup:
    state = _get_state_for_game(game_id)
    if not state:
        return InlineKeyboardMarkup(inline_keyboard=[])

    bombs = state.get("bombs", [])
    selected = state.get("selected", [])
    lost = state.get("lost", False)
    collected = state.get("state") == "collected" or state.get("state") == "won"

    if lost:
        last = len(selected) - 1
    else:
        last = min(len(selected) - 1, TOTAL_ROWS - 1)

    if last < 0:
        return InlineKeyboardMarkup(inline_keyboard=[])

    kb_rows = []
    # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä—è–¥—ã —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑: 0..last
    for i in range(0, last + 1):
        row = bombs[i] if i < len(bombs) else [0] * COLUMNS
        choice = selected[i] if i < len(selected) else None
        buttons_row = []
        for j in range(COLUMNS):
            if lost:
                # –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—ã, –∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–∏–Ω—É ‚Äî üí•
                if row[j] == 1:
                    emoji = "üí•" if (choice is not None and j == choice) else "üß®"
                else:
                    emoji = "üí†" if (choice is not None and j == choice) else "üí∞"
            elif collected:
                # –ø—Ä–∏ —Å–±–æ—Ä–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–¥–µ –±—ã–ª–∏ –º–∏–Ω—ã (üß®), –≤—ã–±—Ä–∞–Ω–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é ‚Äî üí†, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî üí∞
                if row[j] == 1:
                    emoji = "üß®"
                else:
                    emoji = "üí†" if (choice is not None and j == choice) else "üí∞"
            else:
                # –æ–±—ã—á–Ω—ã–π —Ñ–∏–Ω–∞–ª –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è (–Ω–µ –¥–æ–ª–∂–Ω–æ –æ–±—ã—á–Ω–æ –ø–æ–ø–∞–¥–∞—Ç—å —Å—é–¥–∞)
                emoji = "üí†" if (choice is not None and j == choice) else "üí∞"
            buttons_row.append(InlineKeyboardButton(text=emoji, callback_data="noop"))
        kb_rows.append(buttons_row)
    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


# ---------- Start command (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤—É —Å game_id) ----------
@dp.message(F.text.lower().startswith("–∞–ª–º–∞–∑—ã"))
async def start_diamonds(msg: Message):
    uid = str(msg.from_user.id)
    parts = msg.text.split()
    if len(parts) != 3:
        return await msg.reply(
            f"{html.italic(f'ü§® {await gsname(msg.from_user.first_name, uid)}, —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∞–ª–º–∞–∑—ã 5–∫ 2')}\n"
            f"<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('–∞–ª–º–∞–∑—ã –≤—Å–µ 1')}"
        )

    _, bet_str, mines_str = parts
    user_data = await load_data(uid) or {"coins": 0}
    balance = int(user_data.get("coins", 0))

    # parse bet
    if bet_str.lower() == "–≤—Å–µ":
        bet = balance
    elif "–∫" in bet_str:
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await msg.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.")

    if bet > balance:
        return await msg.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
    if bet <= 9:
        return await msg.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops")

    # parse mines_amount
    if not mines_str.isdigit():
        return await msg.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–∏–Ω.")
    mines_amount = int(mines_str)
    if mines_amount < 1 or mines_amount > 2:
        return await msg.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –≤ —Ä—è–¥—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 –∏–ª–∏ 2.")

    # reserve bet in DB
    user_data["coins"] = int(user_data.get("coins", 0)) - int(bet)
    await save_data(uid, user_data)

    # start game (in-memory)
    game_id = await start_diamonds_game(uid, bet, mines_amount)

    kb = build_diamonds_keyboard_for_game(game_id)
    state = _get_state_for_game(game_id)
    next_mult = calc_next_multiplier(state) if state else 0.0

    await msg.reply(
        f"üçÄ<b> {await gsname(msg.from_user.first_name, uid)}, –≤—ã–±–µ—Ä–∏ —è—á–µ–π–∫—É!</b>\n{gline()}\n"
        f"üß®<b> –ú–∏–Ω:</b> {mines_amount}\n"
        f"<b>üí∏ –°—Ç–∞–≤–∫–∞</b>: {format_balance(bet)} mDrops\n",
        reply_markup=kb
    )


@dp.message(F.text.startswith("—Å–ª–æ—Ç—ã"))
async def handle_slots_game(msg: Message):
    uid = msg.from_user.id
    name = msg.from_user.first_name

    data = await load_data(uid)
    if not data:
        await create_user_data(uid)
        data = await load_data(uid)

    parts = msg.text.split(" ")

    if len(parts) < 2:
        return await msg.reply(
            f"{html.italic(f'ü§® {await gsname(name, uid)}, —Ç—ã –≤–≤—ë–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!')}\n"
            f"{gline()}\n<b>–ü—Ä–∏–º–µ—Ä:</b> {html.code('—Å–ª–æ—Ç—ã 1–∫')}"
        )

    bet_str = parts[1]

    # parse bet
    if bet_str.lower() == "–≤—Å–µ":
        bet = data["coins"]
    elif "–∫" in bet_str:
        bet = parse_bet_input(bet_str)
    elif bet_str.isdigit():
        bet = int(bet_str)
    else:
        return await msg.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.")

    if bet > data["coins"]:
        return await msg.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
    if bet <= 9:
        return await msg.reply("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 mDrops")

    data["coins"] -= bet

    slot = await msg.answer_dice(emoji="üé∞")
    result = int(slot.dice.value)
    idx = result - 1

    symbols = ["üî≤", "üçá", "üçã", "7Ô∏è‚É£"]

    left = idx % 4
    middle = (idx // 4) % 4
    right = (idx // 16) % 4

    s_left = symbols[left]
    s_middle = symbols[middle]
    s_right = symbols[right]

    combo_str = f"{s_left}{s_middle}{s_right}"

    await asyncio.sleep(2)
    if result == 64:
        win = bet * 16
        await msg.reply(
            f"<b>üéâ {await gsname(name, id)}, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª!</b>\n{gline()}\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£\n<b>–í—ã–∏–≥—Ä—ã—à:</b> x16/{format_balance(win)} mDrops")

        data["coins"] += win
        data["won_coins"] += win
        await save_data(uid, data)
    elif result == 22:
        win = bet * 16
        await msg.reply(
            f"<b>üéâ {await gsname(name, id)}, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª!</b>\n{gline()}\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> üçáüçáüçá\n<b>–í—ã–∏–≥—Ä—ã—à:</b> x16/{format_balance(win)} mDrops")

        data["coins"] += win
        data["won_coins"] += win
        await save_data(uid, data)
    elif result == 43:
        win = bet * 16
        await msg.reply(
            f"<b>üéâ {await gsname(name, id)}, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª!</b>\n{gline()}\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> üçãüçãüçã\n<b>–í—ã–∏–≥—Ä—ã—à:</b> x16/{format_balance(win)} mDrops")

        data["coins"] += win
        data["won_coins"] += win
        await save_data(uid, data)
    elif result == 1:
        win = bet * 16
        await msg.reply(
            f"<b>üéâ {await gsname(name, id)}, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª!</b>\n{gline()}\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> üî≤üî≤üî≤\n<b>–í—ã–∏–≥—Ä—ã—à:</b> x16/{format_balance(win)} mDrops")

        data["coins"] += win
        data["won_coins"] += win
        await save_data(uid, data)
    else:
        await msg.reply(
            f"<b>üòî {await gsname(name, id)}, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!</b>\n{gline()}\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {combo_str}\n<b>–°—Ç–∞–≤–∫–∞:</b> {format_balance(bet)} mDrops")

        data["lost_coins"] += bet
        await save_data(uid, data)


# -------------- PROMOTION -------------- #
import urllib.parse

TASKS_FILE = "tasks.json"  # file for promo tasks
_tasks_lock = asyncio.Lock()
CHECK_INTERVAL_SECONDS = 60 * 10  # background loop check interval
GRACE_PERIOD = timedelta(hours=24)
REQUIRED_DAYS = 7
PRICE_PER_SUB = 1


def _read_tasks_sync() -> List[Dict]:
    if not os.path.exists(TASKS_FILE):
        return []
    try:
        with open(TASKS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data if isinstance(data, list) else []
    except Exception:
        return []


def _write_tasks_sync(tasks: List[Dict]):
    os.makedirs(os.path.dirname(TASKS_FILE) or ".", exist_ok=True)
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)


async def init_tasks_file():
    async with _tasks_lock:
        if not os.path.exists(TASKS_FILE):
            await asyncio.to_thread(_write_tasks_sync, [])


async def load_tasks() -> List[Dict]:
    return await asyncio.to_thread(_read_tasks_sync)


async def save_tasks(tasks: List[Dict]):
    await asyncio.to_thread(_write_tasks_sync, tasks)


async def add_task(channel_id: int, owner_id: str, count: int, title: Optional[str] = None) -> Dict:
    if count <= 0:
        raise ValueError("count must be positive")
    task = {
        "channel_id": int(channel_id),
        "owner": str(owner_id),
        "remaining": int(count),
        "price_per_sub": PRICE_PER_SUB,
        "title": title or str(channel_id),
        "created_at": datetime.utcnow().isoformat()
    }
    async with _tasks_lock:
        tasks = await load_tasks()
        tasks.append(task)
        await save_tasks(tasks)
    return task


async def find_task(channel_id: int, created_at: Optional[str] = None) -> Optional[Dict]:
    async with _tasks_lock:
        tasks = await load_tasks()
        for t in tasks:
            if int(t.get("channel_id")) == int(channel_id):
                if created_at is None or t.get("created_at") == created_at:
                    return t
    return None


async def decrement_task(channel_id: int, created_at: str) -> Tuple[Optional[Dict], bool]:
    async with _tasks_lock:
        tasks = await load_tasks()
        for idx, t in enumerate(tasks):
            if int(t.get("channel_id")) == int(channel_id) and t.get("created_at") == created_at:
                t["remaining"] = max(0, int(t.get("remaining", 0)) - 1)
                if t["remaining"] <= 0:
                    removed = tasks.pop(idx)
                    await save_tasks(tasks)
                    return removed, True
                else:
                    tasks[idx] = t
                    await save_tasks(tasks)
                    return t, False
    return None, False


async def remove_task_exact(channel_id: int, created_at: str) -> Optional[Dict]:
    async with _tasks_lock:
        tasks = await load_tasks()
        for idx, t in enumerate(tasks):
            if int(t.get("channel_id")) == int(channel_id) and t.get("created_at") == created_at:
                removed = tasks.pop(idx)
                await save_tasks(tasks)
                return removed
    return None


# ------------------ FSM States ------------------
class PromoStates(StatesGroup):
    waiting_for_count = State()


# ------------------ PROMOTION HANDLERS ------------------
@dp.message(F.text.lower().in_(["/promotion", "–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", "–ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å", "—Ä–µ–∫–ª–∞–º–∞", "/promotion@gmegadbot"]))
async def cmd_promotion(message: Message):
    if message.chat.type != "private":
        kb = InlineKeyboardMarkup(
            inline_keyboard=([[InlineKeyboardButton(text="üçì –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url="t.me/gmegadbot")]]))
        return await message.reply(
            f"üçì {await gsname(message.from_user.first_name, message.from_user.id)}, –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ {html.link("–õ–° —Å –±–æ—Ç–æ–º", "t.me/gmegadbot")}!",
            reply_markup=kb, disable_web_page_preview=True)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="promo_add_channel")]
    ])
    await message.answer(
        "üì¢ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º).",
        reply_markup=kb)


@dp.callback_query(lambda c: c.data == "promo_add_channel")
async def promo_add_channel_cb(query: CallbackQuery):
    await query.answer()
    await query.message.answer("üëâ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –≥–¥–µ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")


@dp.message(lambda m: getattr(m, "forward_from_chat", None) is not None)
async def handle_forward_from_channel(message: Message, state: FSMContext):
    channel = message.forward_from_chat
    if not channel or getattr(channel, "type", None) != "channel":
        return
    user_id = str(message.from_user.id)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω
    try:
        me = await bot.get_me()
        member = await bot.get_chat_member(channel.id, me.id)
        if getattr(member, "status", None) not in ("administrator", "creator"):
            return await message.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
    except Exception:
        return await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

    user = await load_data(user_id) or {}
    pending = user.setdefault("pending", {})
    pending["promo_channel_id"] = int(channel.id)
    pending["promo_channel_title"] = channel.title or str(channel.id)
    await save_data(user_id, user)

    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: <b>{pending['promo_channel_title']}</b>\n"
        "–°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)"
    )

    # ---- –û—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —á–µ—Ä–µ–∑ FSMContext ----
    await state.set_state(PromoStates.waiting_for_count)


@dp.message(StateFilter(PromoStates.waiting_for_count))
async def receive_count_for_promo(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    text = (message.text or "").strip()
    try:
        count = int(text)
        if count <= 0:
            raise ValueError()
    except Exception:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å–æ–∫.")

    user = await load_data(user_id) or {}
    pending = user.get("pending", {})
    channel_id = pending.get("promo_channel_id")
    channel_title = pending.get("promo_channel_title")
    if not channel_id:
        await state.clear()
        return await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /promotion.")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—è—Ç—å –ø—Ä–∞–≤–∞
    try:
        me = await bot.get_me()
        member = await bot.get_chat_member(int(channel_id), me.id)
        if getattr(member, "status", None) not in ("administrator", "creator"):
            await state.clear()
            return await message.answer("‚ùå –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –∫–∞–Ω–∞–ª–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
    except Exception:
        await state.clear()
        return await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")

    # —Å–ø–∏—Å—ã–≤–∞–µ–º GGs
    user_ = await load_data(user_id) or {}
    ggs = int(user_.get("GGs", 0))
    cost = count * PRICE_PER_SUB
    if ggs < cost:
        await state.clear()
        return await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GGs. –ù—É–∂–Ω–æ {cost}, —É –≤–∞—Å {ggs}.")

    user_["GGs"] = ggs - cost
    user_.setdefault("pending", {}).pop("promo_channel_id", None)
    user_.setdefault("pending", {}).pop("promo_channel_title", None)
    await save_data(user_id, user_)

    # add task
    await init_tasks_file()
    task = await add_task(channel_id=int(channel_id), owner_id=user_id, count=count, title=channel_title)

    await state.clear()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: <b>{channel_title}</b> ‚Äî {count} –ø–æ–¥–ø–∏—Å–æ–∫. –°–ø–∏—Å–∞–Ω–æ {cost} GGs.")


# ------------------ EARN HANDLERS ------------------
import urllib.parse
from math import ceil

PAGE_SIZE = 5  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–¥–∞—á –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É


@dp.message(F.text.lower().in_(["/earn", "–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "/earn@gmegadbot"]))
async def cmd_earn(message: Message):
    if message.chat.type != "private":
        kb = InlineKeyboardMarkup(
            inline_keyboard=([[InlineKeyboardButton(text="üçì –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url="t.me/gmegadbot")]]))
        return await message.reply(
            f"üçì {await gsname(message.from_user.first_name, message.from_user.id)}, –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ {html.link('–õ–° —Å –±–æ—Ç–æ–º', 't.me/gmegadbot')}!",
            reply_markup=kb, disable_web_page_preview=True
        )

    user_id = str(message.from_user.id)
    user = await load_data(user_id) or {}
    if user.get("earn_ban"):
        return await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.")

    tasks = await load_tasks()
    available = [t for t in tasks if t.get("remaining", 0) > 0]
    if not available:
        return await message.answer("üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    total = len(available)
    last_page = max(1, ceil(total / PAGE_SIZE))
    page = 1

    # –§–æ—Ä–º—É—î–º–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await send_earn_page(message.chat.id, available, page, last_page)


async def send_earn_page(chat_id: int | str, available: list, page: int, last_page: int,
                         edit_message: Message | None = None):
    """
    –§–æ—Ä–º—É—î —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î (–∞–±–æ —Ä–µ–¥–∞–≥—É—î) —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.
    –Ø–∫—â–æ edit_message –∑–∞–¥–∞–Ω–æ ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ –π–æ–≥–æ, —ñ–Ω–∞–∫—à–µ ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ.
    (–í–µ—Ä—Å—ñ—è –ë–ï–ó html.escape)
    """
    # –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤
    page = max(1, page)
    offset = (page - 1) * PAGE_SIZE
    page_tasks = available[offset: offset + PAGE_SIZE]

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
    header = f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{last_page}\n\n"
    lines = []
    for i, t in enumerate(page_tasks, start=offset + 1):
        ch_id = int(t["channel_id"])
        title = t.get("title") or str(ch_id)
        # –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É
        try:
            chat = await bot.get_chat(ch_id)
            title = getattr(chat, "title", title) or title
        except Exception as e:
            pass

        remaining = t.get("remaining", 0)
        reward = t.get("price_per_sub", PRICE_PER_SUB)
        # –ë–µ–∑ –µ—Å–∫–µ–π–ø—ñ–Ω–≥—É ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞–∑–≤—É –ø—Ä—è–º–æ
        lines.append(f"{i}. <b>{str(title)}</b>\n   –û—Å—Ç–∞–ª–æ—Å—å: {remaining} ‚Äî –ù–∞–≥—Ä–∞–¥–∞: {reward} GGs/–ø–æ–¥–ø–∏—Å–∫–∞")

    text = header + ("\n\n".join(lines) if lines else "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

    # –§–æ—Ä–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    kb_rows = []

    for t in page_tasks:
        ch_id = int(t["channel_id"])
        username = None
        try:
            chat = await bot.get_chat(ch_id)
            username = getattr(chat, "username", None)
        except Exception:
            pass

        created_encoded = urllib.parse.quote_plus(str(t.get("created_at", "")))
        row = []
        if username:
            # –∫–Ω–æ–ø–∫–∞ url
            row.append(InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url=f"https://t.me/{username}"))
        # –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
        row.append(InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"check_sub:{ch_id}:{created_encoded}"))

        kb_rows.append(row)

    # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    nav_row = []
    if page > 1:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"earn_page:{page - 1}"))
    if last_page > 1 and page < last_page:
        nav_row.append(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data=f"earn_page:{page + 1}"))
    if nav_row:
        kb_rows.append(nav_row)

    kb_rows.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="earn_close")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    try:
        if edit_message:
            await edit_message.edit_text(text, reply_markup=kb, disable_web_page_preview=True, parse_mode="HTML")
        else:
            await bot.send_message(chat_id, text, reply_markup=kb, disable_web_page_preview=True, parse_mode="HTML")
    except Exception:
        if not edit_message:
            await bot.send_message(chat_id, text, disable_web_page_preview=True, parse_mode="HTML")


@dp.callback_query(F.data.startswith("earn_page:"))
async def handle_earn_page(callback: CallbackQuery):
    # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è ‚Äî –ø–µ—Ä–µ–ø—Ä–æ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    try:
        page = int(callback.data.split(":", 1)[1])
    except Exception:
        page = 1

    tasks = await load_tasks()
    available = [t for t in tasks if t.get("remaining", 0) > 0]
    if not available:
        return await callback.message.edit_text("üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")

    total = len(available)
    last_page = max(1, ceil(total / PAGE_SIZE))
    page = max(1, min(page, last_page))

    await send_earn_page(callback.message.chat.id, available, page, last_page, edit_message=callback.message)
    await callback.answer()  # –∑–∞–∫—Ä–∏–≤–∞—î "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è" —É –∫–ª—ñ—î–Ω—Ç–∞


@dp.callback_query(F.data == "earn_close")
async def handle_earn_close(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        try:
            await callback.message.edit_text("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")
        except Exception:
            pass
    await callback.answer()


@dp.callback_query(lambda c: c.data and c.data.startswith("check_sub:"))
@flood_protect(min_delay=0.5)
async def cb_check_sub(callback: CallbackQuery):
    await callback.answer()
    parts = callback.data.split(":", 2)
    if len(parts) != 3:
        return await callback.message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
    try:
        channel_id = int(parts[1])
    except Exception:
        return await callback.message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–µ–≤–µ—Ä–Ω—ã–π id –∫–∞–Ω–∞–ª–∞.")
    created_at = urllib.parse.unquote_plus(parts[2])
    user_id = str(callback.from_user.id)

    user = await load_data(user_id) or {}
    if user.get("earn_ban"):
        return await callback.message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.")

    try:
        try:
            member = await bot.get_chat_member(channel_id, int(user_id))
        except ChatNotFound:
            return await callback.message.answer("‚ùó –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")
        except BadRequest as e:
            # –ù–∞–ø—Ä–∏–º–µ—Ä: "USER_ID_INVALID" –∏–ª–∏ "CHAT_ADMIN_REQUIRED" –∏ —Ç.–ø.
            return await callback.message.answer(
                "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É.")
        except Unauthorized:
            return await callback.message.answer("‚ùó –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É.")
        except RetryAfter as e:

            await callback.answer("–°–µ—Ä–≤–µ—Ä Telegram –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", show_alert=True)
            return
        except Exception as e:

            return await callback.message.answer(
                "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–æ—à–∏–±–∫–∞ API). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

        status = getattr(member, "status", None)
        if status in ("member", "administrator", "creator"):
            subs = user.setdefault("subscriptions", {})
            sub_key = str(channel_id)
            now = datetime.utcnow()

            if subs.get(sub_key, {}).get("active"):
                return await callback.message.answer(
                    "–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ —É –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.")

            user["GGs"] = user.get("GGs", 0) + PRICE_PER_SUB
            subs[sub_key] = {
                "start": now.isoformat(),
                "end": (now + timedelta(days=REQUIRED_DAYS)).isoformat(),
                "active": True,
                "grace_until": None,
                "task_created_at": created_at
            }
            await save_data(user_id, user)

            removed_or_updated, deleted = await decrement_task(channel_id, created_at)
            if deleted:
                owner_id = removed_or_updated.get("owner")
                try:
                    await bot.send_message(int(owner_id),
                                           f"‚úÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–∞–Ω–∞–ª—É <b>{removed_or_updated.get('title')}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.")
                except Exception:
                    pass
            else:
                if removed_or_updated:
                    owner_id = removed_or_updated.get("owner")
                    try:
                        await bot.send_message(int(owner_id),
                                               f"‚ÑπÔ∏è –£ –∑–∞–¥–∞—á–∏ –¥–ª—è <b>{removed_or_updated.get('title')}</b> –æ—Å—Ç–∞–ª–æ—Å—å {removed_or_updated.get('remaining')} –ø–æ–¥–ø–∏—Å–æ–∫.")
                    except Exception:
                        pass

            await callback.message.answer(
                f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! +{PRICE_PER_SUB} GGs. –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ {REQUIRED_DAYS} –¥–Ω–µ–π.")
        else:
            return await callback.message.answer("‚ùó –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
    except Exception:
        # –õ–æ–≥–∏—Ä—É–µ–º –±—É–¥—å-—è–∫—É —ñ–Ω—à—É –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—É –ø–æ–º–∏–ª–∫—É —ñ –≤—ñ–¥–¥–∞—î–º–æ –¥—Ä—É–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        return await callback.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ------------------ BACKGROUND CHECKER ------------------
async def check_subscriptions_loop():
    # wait until bot ready
    await bot.get_me()
    while True:
        try:
            now = datetime.utcnow()
            # iterate all numeric keys in sqlite json_data
            with sqlite3.connect(DB_PATH) as conn:
                conn.row_factory = sqlite3.Row
                cur = conn.cursor()
                cur.execute("SELECT key, value FROM json_data")
                rows = cur.fetchall()

            for row in rows:
                key = row["key"]
                if not key.isdigit():
                    continue
                user_id = key
                try:
                    user = json.loads(row["value"])
                except Exception:
                    continue
                subs = user.get("subscriptions", {})
                if user.get("earn_ban"):
                    continue

                user_changed = False
                for ch_id, s in list(subs.items()):
                    try:
                        ch_int = int(ch_id)
                    except Exception:
                        continue

                    end = None
                    grace = None
                    try:
                        end = datetime.fromisoformat(s.get("end")) if s.get("end") else None
                    except Exception:
                        end = None
                    try:
                        grace = datetime.fromisoformat(s.get("grace_until")) if s.get("grace_until") else None
                    except Exception:
                        grace = None

                    # finished allowed period
                    if end and now >= end:
                        subs[ch_id]["active"] = False
                        subs[ch_id].pop("grace_until", None)
                        user_changed = True
                        continue

                    # still within protected period
                    if end and now < end:
                        try:
                            member = await bot.get_chat_member(ch_int, int(user_id))
                            is_member = getattr(member, "status", None) in ("member", "administrator", "creator")
                        except ChatNotFound:
                            # –ö–∞–Ω–∞–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π ‚Äî –≤–≤–∞–∂–∞—î–º–æ, —â–æ —é–∑–µ—Ä –Ω–µ –≤ –∫–∞–Ω–∞–ª—ñ
                            is_member = False
                        except BadRequest as e:

                            is_member = False
                        except Unauthorized:

                            is_member = False
                        except RetryAfter as e:
                            # –Ø–∫—â–æ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ—Å–∏—Ç—å –ø–æ—á–µ–∫–∞—Ç–∏ ‚Äî —á–µ–∫–∞—î–º–æ —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ü–∏–∫–ª

                            await asyncio.sleep(getattr(e, "timeout", 1))
                            # –ø—ñ—Å–ª—è –ø–∞—É–∑–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø—Ä–æ—Ö–æ–¥—ñ
                            is_member = False
                        except Exception as e:

                            is_member = False

                        if is_member:
                            if s.get("grace_until"):
                                subs[ch_id]["grace_until"] = None
                                user_changed = True
                        else:
                            if not s.get("grace_until"):
                                subs[ch_id]["grace_until"] = (now + GRACE_PERIOD).isoformat()
                                user_changed = True
                                try:
                                    await bot.send_message(int(user_id),
                                                           f"‚ö† –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ {ch_id}. –£ –≤–∞—Å –µ—Å—Ç—å 24 —á–∞—Å–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –∏–Ω–∞—á–µ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞.")
                                except Exception:
                                    pass
                            else:
                                grace_dt = None
                                try:
                                    grace_dt = datetime.fromisoformat(s.get("grace_until"))
                                except Exception:
                                    grace_dt = None
                                if grace_dt and now >= grace_dt:
                                    user["earn_ban"] = True
                                    user_changed = True
                                    try:
                                        await bot.send_message(int(user_id),
                                                               "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –æ—Ç–ø–∏—Å–∫—É –∏ –Ω–µ–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")
                                    except Exception:
                                        pass
                                    for kk in list(subs.keys()):
                                        subs[kk]["active"] = False
                                    break
                if user_changed:
                    await save_data(user_id, user)
        except Exception as e:
            print("Error in subscription checker:", e)
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)


def format_duration(future_dt: datetime) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ '3d 4h' –∏–ª–∏ '5h 12m' –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    now = datetime.now()
    if future_dt <= now:
        return "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    delta = future_dt - now
    days = delta.days
    hours = delta.seconds // 3600
    minutes = (delta.seconds % 3600) // 60
    parts = []
    if days > 0:
        parts.append(f"{days}–¥")
    if hours > 0:
        parts.append(f"{hours}—á")
    if minutes > 0 and days == 0:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
        parts.append(f"{minutes}–º")
    return " ".join(parts) if parts else "–º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã"


# ---------------- SHOP ----------------

@dp.message(F.text.in_(["/shop", "–º–∞–≥–∞–∑", "–º–∞–≥–∞–∑–∏–Ω", "—à–æ–ø", "–º–∞—Ä–∫–µ—Ç"]))
async def handle_shop_command(msg: Message):
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    kb = InlineKeyboardBuilder()
    kb.button(
        text="ü™Ö –°—Ç–∞—Ç—É—Å—ã",
        callback_data=f"shop_statuses_view:{user_id}"
    )

    await msg.answer(
        f"üõç {await gsname(name, user_id)}, —Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ!\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=kb.as_markup()
    )


@dp.callback_query(F.data.startswith("shop_callback"))
async def handle_shop_command(query: CallbackQuery):
    user_id = query.from_user.id
    name = query.from_user.first_name
    data = query.data
    caller_id = data.split(":", 1)[1]

    if int(caller_id) != int(user_id):
        return await query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    kb = InlineKeyboardBuilder()
    kb.button(
        text="ü™Ö –°—Ç–∞—Ç—É—Å—ã",
        callback_data=f"shop_statuses_view:{user_id}"
    )

    await query.message.edit_text(
        f"üõç {await gsname(name, user_id)}, —Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ!\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=kb.as_markup()
    )


@dp.callback_query(F.data.startswith("shop_statuses_view"))
async def handle_view_shop_statuses(query: CallbackQuery):
    user_id = query.from_user.id
    name = query.from_user.first_name
    data = query.data
    caller_id = data.split(":", 1)[1]

    if int(caller_id) != int(user_id):
        return await query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    statuses_line = " ‚Ä¢ " + "\n ‚Ä¢ ".join(BUYABLE_STATUSES)

    kb = InlineKeyboardBuilder()
    for i, status in enumerate(BUYABLE_STATUSES):
        kb.button(
            text=status,
            callback_data=f"statuses_view:{i}:{caller_id}"
        )

    # –†–æ–±–∏–º–æ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    kb.adjust(2)

    await query.message.edit_text(
        f"{await gsname(name, user_id)}, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∞—Ç—É—Å—ã:\n{statuses_line}",
        reply_markup=kb.as_markup()
    )


@dp.callback_query(F.data.startswith("statuses_view"))
async def handle_view_shop_statuses(query: CallbackQuery):
    user_id = query.from_user.id
    name = query.from_user.first_name
    data = query.data
    status_id = int(data.split(":")[1])
    caller_id = data.split(":")[2]

    int_price = 0
    price = ""
    price_type = ""

    if int(caller_id) != int(user_id):
        return await query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    if BUYABLE_STATUSES_PRICES[status_id][0] == "m":
        int_price = int(BUYABLE_STATUSES_PRICES[status_id][1:])
        price = f"{format_balance(int(BUYABLE_STATUSES_PRICES[status_id][1:]))} mDrops"
        price_type = "m"
    if BUYABLE_STATUSES_PRICES[status_id][0] == "l":
        int_price = int(BUYABLE_STATUSES_PRICES[status_id][1:])
        price = f"–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        price_type = "l"
    elif BUYABLE_STATUSES_PRICES[status_id][0] == "s":
        int_price = int(BUYABLE_STATUSES_PRICES[status_id][1:])
        price = f"{BUYABLE_STATUSES_PRICES[status_id][1:]} —Ç–µ–ª–µ–≥—Ä–∞–º –∑–≤–µ–∑–¥"
        price_type = "s"

    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    kb = None
    if price_type == "m" and int_price < data["coins"]:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"üí∏ –ö—É–ø–∏—Ç—å {BUYABLE_STATUSES[status_id]}",
                                                                         callback_data=f"sbuy_status:{status_id}:{user_id}")],
                                                   [InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                                         callback_data=f"shop_statuses_view:{user_id}")]])
    elif price_type == "s":
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"üí∏ –ö—É–ø–∏—Ç—å {BUYABLE_STATUSES[status_id]}",
                                                                         callback_data=f"buy_status:{status_id}:{user_id}")],
                                                   [InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                                                         callback_data=f"shop_statuses_view:{user_id}")]])
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"shop_statuses_view:{user_id}")]])

    await query.message.edit_text(
        f"üîó {await gsname(name, user_id)}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å \"{BUYABLE_STATUSES[status_id]}\":\n"
        f"\nüí∞ –¶–µ–Ω–∞: {price}\n"
        f"{"\n–î–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!" if price_type == "l" else ""}", reply_markup=kb)


def get_buy_kb(id: int, handler_balance: str, handler_card: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí∞ –° –±–∞–ª–∞–Ω—Å–∞", callback_data=f"{handler_balance}:{id}")],
                         [InlineKeyboardButton(text="üí≥ –° –∫–∞—Ä—Ç—ã", callback_data=f"{handler_card}:{id}")]])


PAY_TEXT = "‚≠êÔ∏è –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"


@dp.callback_query(F.data.startswith("sbuy_status"))
async def buy_status_choose(cq: CallbackQuery):
    user_id = cq.from_user.id
    name = cq.from_user.first_name
    data_str = cq.data
    status_id = int(data_str.split(":")[1])
    caller_id = data_str.split(":")[2]

    if int(caller_id) != int(user_id):
        return await cq.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    raw_price = BUYABLE_STATUSES_PRICES[status_id]
    if raw_price[0] == "m":
        int_price = int(raw_price[1:])
        price_type = "m"
    elif raw_price[0] == "l":
        return cq.answer("–î–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
    elif raw_price[0] == "s":
        int_price = int(raw_price[1:])
        price_type = "s"
    else:
        return await cq.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞.", show_alert=True)

    # –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    await cq.message.edit_text(f"{PAY_TEXT}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –° –±–∞–ª–∞–Ω—Å–∞", callback_data=f"buy_status_wb:{status_id}:{user_id}")],
        [InlineKeyboardButton(text="üí≥ –° –∫–∞—Ä—Ç—ã", callback_data=f"buy_status_wc:"
                                                              f"{status_id}:{user_id}")]]))


@dp.callback_query(F.data.startswith("buy_status_wb"))
async def handle_buy_status_coins(query: CallbackQuery):
    user_id = query.from_user.id
    name = query.from_user.first_name
    data_str = query.data
    status_id = int(data_str.split(":")[1])
    caller_id = data_str.split(":")[2]

    if int(caller_id) != int(user_id):
        return await query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    raw_price = BUYABLE_STATUSES_PRICES[status_id]
    if raw_price[0] == "m":
        int_price = int(raw_price[1:])
        price_type = "m"
    elif raw_price[0] == "l":
        return query.answer("–î–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
    elif raw_price[0] == "s":
        int_price = int(raw_price[1:])
        price_type = "s"
    else:
        return await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞.", show_alert=True)

    # –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if price_type == "m":
        # –º–∏—Ç—Ç—î–≤–∞ –ø–æ–∫—É–ø–∫–∞ (mDrops)
        if data.get("coins", 0) < int_price:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"shop_statuses_view:{user_id}")]])
            return await query.message.edit_text(
                f"{await gsname(name, user_id)}, —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç mDrops –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞", reply_markup=kb)
        data["coins"] = data.get("coins", 0) - int_price
        data["status"] = status_id + len(STATUSES) - len(BUYABLE_STATUSES)
        await save_data(user_id, data)
        await query.message.edit_text(
            f"{await gsname(name, user_id)}, —Ç–∏ –∫—É–ø–∏–ª —Å—Ç–∞—Ç—É—Å \"{BUYABLE_STATUSES[status_id]}\" –∑–∞ {format_balance(int_price)} mDrops!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–í –ú–∞–≥–∞–∑–∏–Ω", callback_data=f"shop_callback:{user_id}")]])
        )
        return

    # --- –Ø–∫—â–æ —Ç—É—Ç, —Ç–æ price_type == "s" -> –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑—ñ—Ä–∫–∞–º–∏ ---
    status_name = BUYABLE_STATUSES[status_id]
    stars_price = int_price  # —Å–∫—ñ–ª—å–∫–∏ –∑—ñ—Ä–æ–∫ –ø—Ä–æ—Å–∏–º–æ

    prices = [LabeledPrice(label=f"{status_name}", amount=int(stars_price))]

    try:
        await bot.send_invoice(
            chat_id=user_id,
            title="–ü–æ–∫—É–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞",
            description=f"{status_name} –∑–∞ {stars_price} ‚≠êÔ∏è",
            payload=f"buy_status:{user_id}:{status_id}:{stars_price}",
            provider_token="",
            currency="XTR",  # –∑–∞–ª–∏—à–∏–≤ —è–∫ —É –≤–∞—à–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ
            prices=prices,
            start_parameter=f"buy_status_{user_id}_{status_id}"
        )
    except Exception as e:
        # –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω–≤–æ–π—Å—É
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", show_alert=True)
        # –º–æ–∂–Ω–∞ –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏ e
        return

    # –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ —á–µ–∫–∞—Ç–∏ —ñ–Ω–≤–æ–π—Å —É —á–∞—Ç—ñ
    await query.answer("–§–æ—Ä–º–∞ –æ—Ç—Ä–ø–∞–≤–ª–µ–Ω–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=False)


@dp.callback_query(F.data.startswith("buy_status_wc"))
async def handle_buy_status_card(query: CallbackQuery):
    user_id = query.from_user.id
    name = query.from_user.first_name
    data_str = query.data
    status_id = int(data_str.split(":")[1])
    caller_id = data_str.split(":")[2]

    if int(caller_id) != int(user_id):
        return await query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!")

    raw_price = BUYABLE_STATUSES_PRICES[status_id]
    if raw_price[0] == "m":
        int_price = int(raw_price[1:])
        price_type = "m"
    elif raw_price[0] == "l":
        return query.answer("–î–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
    elif raw_price[0] == "s":
        int_price = int(raw_price[1:])
        price_type = "s"
    else:
        return await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞.", show_alert=True)

    # –æ—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    data = await load_data(user_id)
    if not data:
        await create_user_data(user_id)
        data = await load_data(user_id)

    if price_type == "m":
        buy = await pay_with_card(str(user_id), float(int_price), note="–ü–æ–∫—É–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
        if not buy[0]:
            return await query.message.edit_text(f"–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã!\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {buy[1]}")
        data["status"] = status_id + len(STATUSES) - len(BUYABLE_STATUSES)
        await save_data(user_id, data)
        await query.message.edit_text(
            f"{await gsname(name, user_id)}, —Ç–∏ –∫—É–ø–∏–ª —Å—Ç–∞—Ç—É—Å \"{BUYABLE_STATUSES[status_id]}\" –∑–∞ {format_balance(int_price)} mDrops!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–í –ú–∞–≥–∞–∑–∏–Ω", callback_data=f"shop_callback:{user_id}")]])
        )
        return

    # --- –Ø–∫—â–æ —Ç—É—Ç, —Ç–æ price_type == "s" -> –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑—ñ—Ä–∫–∞–º–∏ ---
    status_name = BUYABLE_STATUSES[status_id]
    stars_price = int_price  # —Å–∫—ñ–ª—å–∫–∏ –∑—ñ—Ä–æ–∫ –ø—Ä–æ—Å–∏–º–æ

    prices = [LabeledPrice(label=f"{status_name}", amount=int(stars_price))]

    try:
        await bot.send_invoice(
            chat_id=user_id,
            title="–ü–æ–∫—É–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞",
            description=f"{status_name} –∑–∞ {stars_price} ‚≠êÔ∏è",
            payload=f"buy_status:{user_id}:{status_id}:{stars_price}",
            provider_token="",
            currency="XTR",  # –∑–∞–ª–∏—à–∏–≤ —è–∫ —É –≤–∞—à–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ
            prices=prices,
            start_parameter=f"buy_status_{user_id}_{status_id}"
        )
    except Exception as e:
        # –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω–≤–æ–π—Å—É
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", show_alert=True)
        # –º–æ–∂–Ω–∞ –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏ e
        return

    # –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ —á–µ–∫–∞—Ç–∏ —ñ–Ω–≤–æ–π—Å —É —á–∞—Ç—ñ
    await query.answer("–§–æ—Ä–º–∞ –æ—Ç—Ä–ø–∞–≤–ª–µ–Ω–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=False)


@dp.pre_checkout_query(lambda q: True)
async def process_pre_checkout(pre_checkout_q: PreCheckoutQuery):
    # –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ payload —Ç—É—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.successful_payment)
async def handle_successful_payment(message: Message):
    success: SuccessfulPayment = message.successful_payment
    payload = success.invoice_payload  # –Ω–∞—à payload

    # –û–±—Ä–æ–±–ª—è—î–º–æ payload —Ñ–æ—Ä–º–∞—Ç—É: buy_status:{user_id}:{status_id}:{stars_price}
    if not payload:
        return

    if payload.startswith("buy_status:"):
        try:
            parts = payload.split(":")
            # parts: ["buy_status", "<user_id>", "<status_id>", "<stars_price>"]
            payload_user_id = int(parts[1])
            payload_status_id = int(parts[2])
            payload_price = int(parts[3])
        except Exception:
            # –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π payload
            await message.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã (payload). –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.",
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É", url="t.me/sollamon")]]))
            return

        # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ –ø–ª–∞—Ç–Ω–∏–∫ - —Ü–µ —Ç–æ–π —Å–∞–º–∏–π user_id (—ñ–Ω–æ–¥—ñ –º–æ–∂–Ω–∞ –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ id)
        payer_id = message.from_user.id
        if payer_id != payload_user_id:
            # –ú–æ–∂–Ω–∞ –∞–±–æ –¥–æ–∑–≤–æ–ª–∏—Ç–∏, –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ ‚Äî –≤–∏—Ä—ñ—à—É–π—Ç–µ —Å–∞–º—ñ. –ú–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.
            await message.reply("–°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ")
            # –ú–∏ –≤—Å–µ –æ–¥–Ω–æ –¥–∞–º–æ —Å—Ç–∞—Ç—É—Å —Ç–æ–º—É, —Ö—Ç–æ –æ–ø–ª–∞—Ç–∏–≤:

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø—Ä–∏—Å–≤–æ—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        data = await load_data(payload_user_id)
        if not data:
            await create_user_data(payload_user_id)
            data = await load_data(payload_user_id)

        # –ü—Ä–∏—Å–≤–æ—é—î–º–æ —Å—Ç–∞—Ç—É—Å (–ª–æ–≥—ñ–∫–∞ –∑—Å—É–≤—É —Ç–∞ –∂ —Å–∞–º–∞)
        data["status"] = payload_status_id + len(STATUSES) - len(BUYABLE_STATUSES)
        await save_data(payload_user_id, data)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—Ä–µ–¥–∞–≥—É—î–º–æ / –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
        try:
            # edit message where —ñ–Ω–≤–æ–π—Å –±—É–≤ (–º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏)
            await message.reply(
                f"{await gsname(message.from_user.first_name, payload_user_id)}, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ\n–í–∞–º –≤—ã–¥–∞–Ω–æ —Å—Ç–∞—Ç—É—Å \"{BUYABLE_STATUSES[payload_status_id]}\".")
        except:
            pass

    elif payload.startswith("donate_"):
        # –í–∞—à–∞ —ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –¥–æ–Ω–∞—Ç–∞ (–¥–æ–¥–∞—Ç–∏ GGs, –∞–±–æ —â–æ –≤–∏ —Ä–æ–±–∏—Ç–µ –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏)
        # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: payload = donate_<ggs>_<stars_price>
        parts = payload.split("_")
        # —Ä–µ–∞–ª—ñ–∑—É–π—Ç–µ –ø—ñ–¥ —Å–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏
        return


# ---------------- PARTNERS PROGRAM ----------------
ADMIN_PARTNER_ID = 8493326566
PARTNERS_FILE = "partners.json"
PENDING_FILE = "partners_pending.json"
USERS_FILE = "users.json"
PARTNERS_LOG = "partners_log.json"

# –≤—ã–ø–ª–∞—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º (mDrops)
LEVEL_PAYOUT = {
    1: 100_000,
    2: 150_000,
    3: 250_000,
    4: 350_000,
    5: 500_000,
}


# ====== FSM ======
class PartnerApproveStates(StatesGroup):
    waiting_for_subs = State()


class PartnerCreateStates(StatesGroup):
    waiting_for_channel_link = State()
    waiting_for_user_confirm = State()


# ====== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è JSON ======

def load_json(path: str, default):
    if not os.path.exists(path):
        return default
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default


def save_json(path: str, data) -> None:
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def load_partners():
    return load_json(PARTNERS_FILE, {"channels": {}})


def save_partners(data) -> None:
    save_json(PARTNERS_FILE, data)


def load_pending():
    return load_json(PENDING_FILE, {})


def save_pending(data) -> None:
    save_json(PENDING_FILE, data)


# ====== –õ–æ–≥–∏–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º ======

def subs_to_level(subs: int) -> int:
    if subs <= 150:
        return 1
    if 151 <= subs <= 250:
        return 2
    if 251 <= subs <= 500:
        return 3
    if 501 <= subs <= 1000:
        return 4
    return 5


# ====== –•–µ–ª–ø–µ—Ä—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ======
def find_contract_by_owner(owner_id: int) -> Tuple[Optional[str], Optional[dict]]:
    partners = load_partners()
    for key, v in partners.get("channels", {}).items():
        try:
            if int(v.get("owner_id", -1)) == int(owner_id):
                return key, v
        except Exception:
            continue
    return None, None


def find_contract_by_id(contract_id: int) -> Tuple[Optional[str], Optional[dict]]:
    partners = load_partners()
    for key, v in partners.get("channels", {}).items():
        try:
            if int(v.get("id", -1)) == int(contract_id):
                return key, v
        except Exception:
            continue
    return None, None


# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 7-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ ======
def gen_verify_code(length: int = 7) -> str:
    import string
    alphabet = string.ascii_uppercase + string.digits
    return ''.join(random.choice(alphabet) for _ in range(length))


# ====== –•–µ–Ω–¥–ª–µ—Ä—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏ ======

@dp.message(F.text.lower().in_(["–ø–∞—Ä—Ç–µ–Ω—Ä–∞—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–ø–ø", "–ø–∞—Ä—Ç–Ω–µ—Ä–∫–∞", "/partners"]))
async def handle_partners_program(msg: Message):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /partners ‚Äî –ø–æ–∫–∞–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–ª–∏ –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.
    –ü—Ä–æ—Ü–µ—Å—Å —Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π: "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç" -> –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ -> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    BOT_USERNAME = None
    try:
        if bot is not None:
            me = await bot.get_me()
            BOT_USERNAME = me.username or me.first_name
    except Exception:
        BOT_USERNAME = None

    if msg.chat.type != "private":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üçì –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°",
                                  url=f"https://t.me/{BOT_USERNAME}" if BOT_USERNAME else "https://t.me/yourbot")]
        ])
        return await msg.reply(
            f"üçì {await gsname(name, user_id)}, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º!",
            reply_markup=kb
        )

    key, user_contract = find_contract_by_owner(user_id)
    if user_contract:
        last_ts = int(user_contract.get("last_payment", 0) or 0)
        last_dt = datetime.utcfromtimestamp(last_ts).strftime("%Y-%m-%d %H:%M:%S") if last_ts else "–Ω–∏–∫–æ–≥–¥–∞"
        level = user_contract.get("level", 1)
        subs = user_contract.get("subs", 0)
        link = user_contract.get("link", "‚Äî")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É",
                                  callback_data=f"partners_claim:{user_contract.get('id')}:{user_id}")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç",
                                  callback_data=f"partners_delete:{user_contract.get('id')}:{user_id}")]
        ])
        await msg.answer(
            f"üìÑ –í–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç:\n\nüîó –ö–∞–Ω–∞–ª: {link}\nüë§ –í–ª–∞–¥–µ–ª–µ—Ü: {user_id}\nüìà –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subs}\nüè∑ –£—Ä–æ–≤–µ–Ω—å: {level}\n‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞: {last_dt}",
            reply_markup=kb
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–ª –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ pending
    pending = load_pending()
    if str(user_id) in pending:
        await msg.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç"
    kb_inline = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç", callback_data=f"partners_create:{user_id}")]])
    await msg.answer(
        f"ü§ù {await gsname(name, user_id)}, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
        reply_markup=kb_inline
    )


# ====== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç' (–Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞) ======
@dp.callback_query(F.data.startswith("partners_create"))
async def partners_create_cb(query: CallbackQuery, state: FSMContext):
    requester_id = int(query.data.split(":")[1])
    if query.from_user.id != requester_id:
        return await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)

    pending = load_pending()
    if str(requester_id) in pending:
        return await query.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞.", show_alert=True)

    # —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–æ—Ç–æ–≤–∫—É pending —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "awaiting_channel_link"
    pending[str(requester_id)] = {
        "owner_id": requester_id,
        "status": "awaiting_channel_link",
        "requested_at": int(time.time()),
        # channel_link, verify_code –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ
    }
    save_pending(pending)

    await state.set_state(PartnerCreateStates.waiting_for_channel_link)
    await state.update_data(requester_id=requester_id)
    await query.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/yourchannel –∏–ª–∏ @yourchannel).")


# ====== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–≤ state waiting_for_channel_link) ======
@dp.message(PartnerCreateStates.waiting_for_channel_link)
async def user_sent_channel_link(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    data = await state.get_data()
    requester_id = data.get("requester_id")
    if requester_id is None or requester_id != user_id:
        await msg.reply("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç' –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    text = (msg.text or "").strip()
    if not text:
        await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        return

    # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ / –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    link = text
    if link.startswith("@"):
        link = link[1:]
        link = f"https://t.me/{link}"
    elif link.startswith("t.me/"):
        link = f"https://t.me/{link.split('t.me/')[-1]}"
    elif link.startswith("http://") or link.startswith("https://"):
        # –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ https://t.me/...
        if "t.me/" not in link:
            await msg.reply(
                "–ü–æ—Ö–æ–∂–µ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ https://t.me/yourchannel –∏–ª–∏ @yourchannel.")
            return
    else:
        # –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
        if "/" not in link and "." not in link:
            link = f"https://t.me/{link}"
        else:
            await msg.reply(
                "–ü–æ—Ö–æ–∂–µ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram-–∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ https://t.me/yourchannel –∏–ª–∏ @yourchannel.")
            return

    # –°–æ–∑–¥–∞—ë–º –∫–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º pending
    code = gen_verify_code()
    pending = load_pending()
    p = pending.get(str(requester_id), {})
    p["channel_link"] = link
    p["verify_code"] = code
    p["status"] = "awaiting_user_confirm"  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∂–∞—Ç—å –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    p["requested_at"] = int(time.time())
    pending[str(requester_id)] = p
    save_pending(pending)

    # –ü–∏—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    kb_confirm = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–¥–∞",
                              callback_data=f"partners_user_confirm:{requester_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"partners_user_cancel:{requester_id}")]
    ])
    await msg.reply(
        f"–ì–æ—Ç–æ–≤–æ ‚Äî –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: `{code}`.\n\n–í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–û–ø–∏—Å–∞–Ω–∏–µ/Info). –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å—Ç–∞–≤–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–¥–∞\".\n\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\".",
        reply_markup=kb_confirm
    )

    await state.set_state(PartnerCreateStates.waiting_for_user_confirm)
    # –Ω–µ —É–¥–∞–ª—è–µ–º state –¥–∞–Ω–Ω—ã—Ö ‚Äî –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


# ====== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–¥–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å—Å—ã–ª–∫—É –∏ –∫–æ–¥) ======
@dp.callback_query(F.data.startswith("partners_user_confirm"))
async def partners_user_confirm_cb(query: CallbackQuery):
    parts = query.data.split(":")
    requester_id = int(parts[1])
    caller_id = query.from_user.id
    if caller_id != requester_id:
        return await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)

    pending = load_pending()
    p = pending.get(str(requester_id))
    if not p or p.get("status") != "awaiting_user_confirm":
        return await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º
    p["status"] = "awaiting_admin"
    pending[str(requester_id)] = p
    save_pending(pending)

    channel_link = p.get("channel_link", "<–Ω–µ —É–∫–∞–∑–∞–Ω–∞>")
    code = p.get("verify_code", "<–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç>")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å—Å—ã–ª–∫—É –∏ –∫–æ–¥ (–∞–¥–º–∏–Ω —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏)
    kb_admin = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                              callback_data=f"partners_admin_enter_subs:{requester_id}:0")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"partners_admin_reject:{requester_id}:0")]
    ])
    try:
        await bot.send_message(
            ADMIN_PARTNER_ID,
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∫—É –æ—Ç {query.from_user.full_name} (id: {requester_id}).\n–ö–∞–Ω–∞–ª: {channel_link}\n–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏: `{code}`\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb_admin
        )
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É ‚Äî —Å–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É.", show_alert=True)

    await query.message.edit_text("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    return await query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)


# ====== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É ======
@dp.callback_query(F.data.startswith("partners_user_cancel"))
async def partners_user_cancel_cb(query: CallbackQuery):
    parts = query.data.split(":")
    requester_id = int(parts[1])
    caller_id = query.from_user.id
    if caller_id != requester_id:
        return await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)

    pending = load_pending()
    if str(requester_id) in pending:
        pending.pop(str(requester_id), None)
        save_pending(pending)
    await query.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return await query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)


# ====== –ê–¥–º–∏–Ω: –Ω–∞–∂–∞–ª '–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' ======
@dp.callback_query(F.data.startswith("partners_admin_enter_subs"))
async def admin_enter_subs_cb(query: CallbackQuery, state: FSMContext):
    if query.from_user.id != ADMIN_PARTNER_ID:
        return await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)

    parts = query.data.split(":")
    requester_id = int(parts[1])

    pending = load_pending()
    if str(requester_id) not in pending:
        return await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)

    p = pending.get(str(requester_id), {})
    channel_link = p.get("channel_link")

    # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É —Å—Å—ã–ª–∫—É (—Ç–µ–∫—Å—Ç) –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    await query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∑–∞—è–≤–∏—Ç–µ–ª—è (id: {requester_id}).\n–ö–∞–Ω–∞–ª: {channel_link}")
    await state.set_state(PartnerApproveStates.waiting_for_subs)
    await state.update_data(requester_id=requester_id)


# ====== –ê–¥–º–∏–Ω: –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ======
@dp.message(PartnerApproveStates.waiting_for_subs)
async def admin_received_subs(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_PARTNER_ID:
        return

    data = await state.get_data()
    requester_id = data.get("requester_id")
    if not requester_id:
        await msg.reply("–û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å.")
        await state.clear()
        return

    text = (msg.text or "").strip()
    try:
        subs = int(text)
    except Exception:
        await msg.reply("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 450).")
        return

    pending = load_pending()
    p = pending.get(str(requester_id), {})
    p["subs"] = subs
    p["status"] = "subs_set"
    pending[str(requester_id)] = p
    save_pending(pending)

    channel_info = p.get("channel_link", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    kb_finish = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"partners_admin_finish:{requester_id}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"partners_admin_reject:{requester_id}")]
    ])

    await msg.reply(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è {requester_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {subs}.\n–ö–∞–Ω–∞–ª: {channel_info}\n\n–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–ª–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.",
        reply_markup=kb_finish
    )
    await state.clear()


# ====== –ê–¥–º–∏–Ω: –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É ======
@dp.callback_query(F.data.startswith("partners_admin_reject"))
async def admin_reject_cb(query: CallbackQuery):
    if query.from_user.id != ADMIN_PARTNER_ID:
        return await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)

    parts = query.data.split(":")
    requester_id = int(parts[1])
    pending = load_pending()
    if str(requester_id) in pending:
        pending.pop(str(requester_id), None)
        save_pending(pending)

    try:
        await bot.send_message(requester_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∫—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass

    await query.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


# ====== –ê–¥–º–∏–Ω: –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—è–≤–∫—É -> —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç ======
@dp.callback_query(F.data.startswith("partners_admin_finish"))
async def admin_finish_cb(query: CallbackQuery):
    if query.from_user.id != ADMIN_PARTNER_ID:
        return await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)

    requester_id = int(query.data.split(":")[1])
    pending = load_pending()
    p = pending.get(str(requester_id))
    if not p or p.get("status") not in ("subs_set", "ready_to_finalize", "awaiting_admin"):
        return await query.answer("–ù–µ—Ç –≥–æ—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=True)

    subs = int(p.get("subs", 0))
    channel_link = p.get("channel_link")
    link = channel_link or "<–Ω–µ —É–∫–∞–∑–∞–Ω>"
    level = subs_to_level(subs)

    partners = load_partners()
    existing = partners.get("channels", {})
    max_id = 0
    for v in existing.values():
        try:
            if int(v.get("id", 0)) > max_id:
                max_id = int(v.get("id"))
        except Exception:
            pass
    new_id = max_id + 1

    key = f"{link}_{new_id}"
    partners.setdefault("channels", {})[key] = {
        "id": new_id,
        "link": link,
        "subs": subs,
        "level": level,
        "last_payment": 0,
        "owner_id": requester_id,
        # channel_chat_id –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º, —Ç.–∫. —É –Ω–∞—Å –Ω–µ—Ç chat_id
        "channel_chat_id": None
    }
    save_partners(partners)

    # —É–¥–∞–ª—è–µ–º pending
    pending.pop(str(requester_id), None)
    save_pending(pending)

    # –ª–æ–≥
    append_log({
        "time": int(time.time()),
        "action": "create_contract",
        "owner_id": requester_id,
        "contract_id": new_id,
        "subs": subs,
        "level": level,
        "link": link
    })

    try:
        await bot.send_message(requester_id,
                               f"‚úÖ –í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ö–∞–Ω–∞–ª: {link}\n–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subs}\n–£—Ä–æ–≤–µ–Ω—å: {level}\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ –∫–æ–º–∞–Ω–¥–æ–π /partners -> –ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É.")
    except Exception:
        pass

    await query.message.edit_text(
        f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {requester_id}.\n–ö–∞–Ω–∞–ª: {link}\n–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subs}\n–£—Ä–æ–≤–µ–Ω—å: {level}")


# ====== –í–ª–∞–¥–µ–ª–µ—Ü: –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É ======
@dp.callback_query(F.data.startswith("partners_claim"))
async def partners_claim_cb(query: CallbackQuery):
    parts = query.data.split(":")
    contract_id = int(parts[1])
    requester_id = int(parts[2])
    caller_id = query.from_user.id
    if caller_id != requester_id:
        return await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)

    key, found = find_contract_by_id(contract_id)
    if not found:
        return await query.answer("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    last_ts = int(found.get("last_payment", 0) or 0)
    now_ts = int(time.time())
    if now_ts - last_ts < 24 * 3600:
        left = 24 * 3600 - (now_ts - last_ts)
        hrs = left // 3600
        mins = (left % 3600) // 60
        return await query.answer(f"–í—ã–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hrs}h {mins}m.", show_alert=True)

    level = int(found.get("level", 1))
    payout = LEVEL_PAYOUT.get(level, 0)

    # –Ω–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é coins (mDrops)
    user_data = await load_data(requester_id)
    if not user_data:
        await create_user_data(requester_id)
        user_data = await load_data(requester_id)

    user_data["coins"] = user_data.get("coins", 0) + payout
    await save_data(requester_id, user_data)

    # –æ–±–Ω–æ–≤–ª—è–µ–º last_payment
    partners = load_partners()
    if key and key in partners.get("channels", {}):
        partners["channels"][key]["last_payment"] = now_ts
        save_partners(partners)

    append_log({
        "time": now_ts,
        "action": "payout",
        "owner_id": requester_id,
        "contract_id": contract_id,
        "level": level,
        "amount": payout
    })

    await query.answer(f"–í—ã–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {payout} mDrops.", show_alert=True)
    try:
        await bot.send_message(requester_id,
                               f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {payout} mDrops –∑–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É (—É—Ä–æ–≤–µ–Ω—å {level}).")
    except Exception:
        pass


# ====== –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ======
@dp.callback_query(F.data.startswith("partners_delete"))
async def partners_delete_cb(query: CallbackQuery):
    parts = query.data.split(":")
    contract_id = int(parts[1])
    user_id = int(parts[2])
    caller_id = query.from_user.id
    if caller_id != user_id:
        return await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å.", show_alert=True)

    partners = load_partners()
    found_key = None
    for k, v in partners.get("channels", {}).items():
        try:
            if int(v.get("id", -1)) == contract_id and int(v.get("owner_id", -1)) == user_id:
                found_key = k
                break
        except Exception:
            continue

    if not found_key:
        for k, v in partners.get("channels", {}).items():
            try:
                if int(v.get("id", -1)) == contract_id:
                    found_key = k
                    break
            except Exception:
                continue

    if found_key:
        partners["channels"].pop(found_key, None)
        save_partners(partners)
        append_log({
            "time": int(time.time()),
            "action": "delete_contract",
            "owner_id": user_id,
            "contract_id": contract_id
        })
        await query.message.edit_text("–ö–æ–Ω—Ç—Ä–∞–∫—Ç —É–¥–∞–ª—ë–Ω.")
    else:
        await query.answer("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


_CARDS_TABLE = "cards"
_TX_TABLE = "card_transactions"


# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------

async def try_pay_card(user_id: str, amount: float, note: Optional[str] = None) -> Dict[str, Any]:
    """
    –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å —Å—É–º–º—É amount –∫–∞—Ä—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id.
    –õ–æ–≥–∏–∫–∞:
      1) –ï—Å–ª–∏ –≤ user['bank'] –µ—Å—Ç—å 'default_card' ‚Äî –ø—Ä–æ–±—É–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å —Å –Ω–µ—ë.
      2) –ï—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º).
      3) –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {"success": True, "comment": "–£—Å–ø–µ—à–Ω–æ", "card": card_number}
         –ò–Ω–∞—á–µ ‚Äî {"success": False, "comment": "–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏"}.
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    """
    user_id = str(user_id)
    # –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    try:
        amt = float(amount)
    except Exception:
        return {"success": False, "comment": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"}
    if amt <= 0:
        return {"success": False, "comment": "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"}

    # –∑–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ä—Ç—É)
    try:
        user = await load_data(user_id) or {}
    except Exception:
        user = {}

    bank = user.get("bank", {}) if isinstance(user, dict) else {}
    default_card = bank.get("default_card") if isinstance(bank, dict) else None

    # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–ø–∏—Å–∞—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    async def _try_card(card_number: str) -> Tuple[bool, str]:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞—Ç—å amt —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, msg) –∏–ª–∏ (False, msg).
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç pay_with_card (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é) –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏.
        """
        # –ø–æ–ª—É—á–∏–º –∫–∞—Ä—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä–∏–º
        card = await get_card(card_number)
        if not card:
            return False, "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if card.get("blocked"):
            return False, "–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        try:
            bal = float(card.get("balance", 0))
        except Exception:
            bal = 0.0
        if bal < amt:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ"
        # –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é (–Ω–µ —Ç—Ä–µ–±—É–µ–º PIN, —Ç.–∫. —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º)
        success, msg = await pay_with_card(user_id, card_number, amt, pin=None, require_pin=False, note=note)
        if success:
            return True, msg
        else:
            return False, msg

    # 1) –ø—Ä–æ–±—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ä—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
    if default_card:
        ok, msg = await _try_card(default_card)
        if ok:
            return {"success": True, "comment": msg, "card": default_card}
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç—ã

    # 2) –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (list_cards_by_owner)
    try:
        cards = await list_cards_by_owner(user_id)
    except Exception:
        cards = {}

    # cards ‚Äî dict card_number -> data
    # –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ created_at) –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
    items = []
    for cn, cd in (cards or {}).items():
        created = cd.get("created_at") if isinstance(cd, dict) else None
        try:
            # –µ—Å–ª–∏ created_at –µ—Å—Ç—å –∏ —ç—Ç–æ ISO-—Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if created:
                ts = datetime.fromisoformat(created)
            else:
                ts = datetime.utcfromtimestamp(0)
        except Exception:
            ts = datetime.utcfromtimestamp(0)
        items.append((cn, cd, ts))
    items.sort(key=lambda x: x[2])  # —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ

    for cn, cd, _ in items:
        ok, msg = await _try_card(cn)
        if ok:
            return {"success": True, "comment": msg, "card": cn}

    # 3) –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç—É
    return {"success": False, "comment": "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"}


def _ensure_db_schema():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã cards –∏ card_transactions –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(f"""
            CREATE TABLE IF NOT EXISTS {_CARDS_TABLE} (
                card_number TEXT PRIMARY KEY,
                owner_id TEXT NOT NULL,
                name TEXT DEFAULT '',
                balance REAL NOT NULL DEFAULT 0,
                blocked INTEGER NOT NULL DEFAULT 0,
                pin_hash TEXT DEFAULT NULL,
                created_at TEXT NOT NULL,
                metadata TEXT DEFAULT '{{}}'
            )
        """)
        cur.execute(f"""
            CREATE TABLE IF NOT EXISTS {_TX_TABLE} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                card_number TEXT,
                ts INTEGER,
                type TEXT,
                amount REAL,
                other TEXT,
                initiator_id TEXT,
                note TEXT
            )
        """)
        conn.commit()


def _gen_card_number() -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 16-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–±–µ–∑ Luhn)."""
    # Prefix 4000... to look like Visa; –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.
    return "4000" + "".join(str(random.randint(0, 9)) for _ in range(12))


def _hash_pin(pin: str) -> str:
    return hashlib.sha256(pin.encode("utf-8")).hexdigest()


def _record_tx_sync(card_number: str, typ: str, amount: float, other: Optional[str], initiator_id: Optional[str],
                    note: Optional[str]):
    ts = int(time.time())
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(
            f"INSERT INTO {_TX_TABLE} (card_number, ts, type, amount, other, initiator_id, note) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (card_number, ts, typ, float(amount), other, initiator_id, note))
        conn.commit()


# ----------------- –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (sqlite) -----------------

def sync_create_card(owner_id: str, name: str = "", initial_balance: float = 0.0, pin: Optional[str] = None,
                     metadata: Optional[dict] = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å card_number."""
    _ensure_db_schema()
    card_number = _gen_card_number()
    # –£–±–µ–¥–∏—Ç—å—Å—è –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–≤ —Ä–µ–¥–∫–æ–º —Å–ª—É—á–∞–µ –∫–æ–ª–ª–∏–∑–∏–∏ ‚Äî —Ä–µ–≥–µ–Ω–µ—Ä–∏–º)
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        tries = 0
        while True:
            cur.execute(f"SELECT 1 FROM {_CARDS_TABLE} WHERE card_number = ?", (card_number,))
            if cur.fetchone() is None:
                break
            card_number = _gen_card_number()
            tries += 1
            if tries > 10:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")

        pin_hash = _hash_pin(pin) if pin else None
        created_at = datetime.utcnow().isoformat()
        md = json.dumps(metadata or {}, ensure_ascii=False)
        cur.execute(
            f"INSERT INTO {_CARDS_TABLE} (card_number, owner_id, name, balance, blocked, pin_hash, created_at, metadata) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            (card_number, str(owner_id), name or "", float(initial_balance), 0, pin_hash, created_at, md))
        conn.commit()
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é "—Å–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
    if initial_balance:
        _record_tx_sync(card_number, "create_balance", initial_balance, None, owner_id, "initial balance on create")
    else:
        _record_tx_sync(card_number, "create", 0.0, None, owner_id, "card created")
    return card_number


def sync_get_card(card_number: str) -> Dict[str, Any]:
    """–í–µ—Ä–Ω—É—Ç—å –∑–∞–ø–∏—Å—å –∫–∞—Ä—Ç—ã –∏–ª–∏ {}"""
    _ensure_db_schema()
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute(f"SELECT * FROM {_CARDS_TABLE} WHERE card_number = ?", (str(card_number),))
        row = cur.fetchone()
        if not row:
            return {}
        d = dict(row)
        if d.get("metadata"):
            try:
                d["metadata"] = json.loads(d["metadata"])
            except Exception:
                d["metadata"] = {}
        # –ø—Ä–∏–≤–µ—Å—Ç–∏ blocked –∫ bool
        d["blocked"] = bool(int(d.get("blocked", 0)))
        return d


def sync_update_card_balance(card_number: str, new_balance: float):
    _ensure_db_schema()
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(f"UPDATE {_CARDS_TABLE} SET balance = ? WHERE card_number = ?",
                    (float(new_balance), str(card_number)))
        conn.commit()


def sync_set_card_block(card_number: str, blocked: bool):
    _ensure_db_schema()
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(f"UPDATE {_CARDS_TABLE} SET blocked = ? WHERE card_number = ?",
                    (1 if blocked else 0, str(card_number)))
        conn.commit()


def sync_set_pin(card_number: str, pin: Optional[str]):
    ph = _hash_pin(pin) if pin else None
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(f"UPDATE {_CARDS_TABLE} SET pin_hash = ? WHERE card_number = ?", (ph, str(card_number)))
        conn.commit()


def sync_list_cards_by_owner(owner_id: str) -> Dict[str, Dict[str, Any]]:
    _ensure_db_schema()
    out: Dict[str, Dict[str, Any]] = {}
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute(f"SELECT * FROM {_CARDS_TABLE} WHERE owner_id = ?", (str(owner_id),))
        rows = cur.fetchall()
        for r in rows:
            d = dict(r)
            try:
                d["metadata"] = json.loads(d.get("metadata", "{}"))
            except Exception:
                d["metadata"] = {}
            d["blocked"] = bool(int(d.get("blocked", 0)))
            out[str(d["card_number"])] = d
    return out


def sync_delete_card(card_number: str) -> bool:
    _ensure_db_schema()
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(f"SELECT 1 FROM {_CARDS_TABLE} WHERE card_number = ?", (str(card_number),))
        if cur.fetchone() is None:
            return False
        cur.execute(f"DELETE FROM {_CARDS_TABLE} WHERE card_number = ?", (str(card_number),))
        conn.commit()
        # –¥–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
        _record_tx_sync(card_number, "delete", 0.0, None, None, "card deleted")
        return True


def sync_record_tx(card_number: str, typ: str, amount: float, other: Optional[str], initiator_id: Optional[str],
                   note: Optional[str]):
    _ensure_db_schema()
    _record_tx_sync(card_number, typ, amount, other, initiator_id, note)


def sync_get_tx_history(card_number: str, limit: int = 50) -> List[Dict[str, Any]]:
    _ensure_db_schema()
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute(f"SELECT * FROM {_TX_TABLE} WHERE card_number = ? ORDER BY id DESC LIMIT ?",
                    (str(card_number), limit))
        rows = cur.fetchall()
        out = []
        for r in rows:
            d = dict(r)
            out.append(d)
        return out


# ----------------- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ -----------------

async def create_card(owner_id: str, name: str = "", initial_balance: float = 0.0, pin: Optional[str] = None,
                      metadata: Optional[dict] = None) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è owner_id.
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 1 –∫–∞—Ä—Ç—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—Å—Ç—Ä–æ–∫–∞) –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞.
    –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç ValueError —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    """
    owner_id = str(owner_id)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç—ã —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
    existing = await list_cards_by_owner(owner_id)
    if existing and len(existing) > 0:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –∫–∞—Ä—Ç—É ‚Äî –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        raise ValueError("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã ‚Äî —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞.")
    # –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # sync_create_card –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
    card_number = await asyncio.to_thread(sync_create_card, owner_id, name, float(initial_balance), pin, metadata)
    return str(card_number)


async def get_card(card_number: str) -> Dict[str, Any]:
    return await asyncio.to_thread(sync_get_card, str(card_number))


async def update_card_balance(card_number: str, new_balance: float):
    return await asyncio.to_thread(sync_update_card_balance, str(card_number), float(new_balance))


async def set_card_block(card_number: str, blocked: bool):
    return await asyncio.to_thread(sync_set_card_block, str(card_number), bool(blocked))


async def set_card_pin(card_number: str, pin: Optional[str]):
    return await asyncio.to_thread(sync_set_pin, str(card_number), pin)


async def list_cards_by_owner(owner_id: str) -> Dict[str, Dict[str, Any]]:
    return await asyncio.to_thread(sync_list_cards_by_owner, str(owner_id))


async def delete_card(card_number: str) -> bool:
    return await asyncio.to_thread(sync_delete_card, str(card_number))


async def record_tx(card_number: str, typ: str, amount: float, other: Optional[str], initiator_id: Optional[str],
                    note: Optional[str]):
    return await asyncio.to_thread(sync_record_tx, str(card_number), typ, float(amount), other, initiator_id, note)


async def get_tx_history(card_number: str, limit: int = 50):
    return await asyncio.to_thread(sync_get_tx_history, str(card_number), int(limit))


# ----------------- –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ -----------------

async def topup_card_from_balance(user_id: str, card_number: str, amount: float) -> Tuple[bool, str]:
    """
    –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ).
    """
    user_id = str(user_id)
    try:
        amt = float(amount)
    except Exception:
        return False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"
    if amt <= 0:
        return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"

    user = await load_data(user_id)
    if not user:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

    balance = float(user.get("coins", 0))
    if balance < amt:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ"

    card = await get_card(card_number)
    if not card:
        return False, "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    if card.get("blocked"):
        return False, "–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –∫–ª–∞–¥—ë–º –Ω–∞ –∫–∞—Ä—Ç—É
    user["coins"] = balance - amt
    await save_data(user_id, user)

    new_balance = float(card.get("balance", 0)) + amt
    await update_card_balance(card_number, new_balance)
    await record_tx(card_number, "topup_from_balance", amt, None, user_id, f"popolnenie s osnovnogo balansa")

    return True, f"–ö–∞—Ä—Ç–∞ {card_number} –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {amt} mDrops"


async def withdraw_card_to_balance(user_id: str, card_number: str, amount: float) -> Tuple[bool, str]:
    """
    –°–Ω—è—Ç–∏–µ —Å –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (–≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã).
    """
    user_id = str(user_id)
    try:
        amt = float(amount)
    except Exception:
        return False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"
    if amt <= 0:
        return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"

    card = await get_card(card_number)
    if not card:
        return False, "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    if str(card.get("owner_id")) != str(user_id):
        return False, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞—Ä—Ç—ã"

    if card.get("blocked"):
        return False, "–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"

    balance = float(card.get("balance", 0))
    if balance < amt:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ"

    # —É–¥–µ—Ä–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã
    new_card_balance = balance - amt
    await update_card_balance(card_number, new_card_balance)
    # –Ω–∞—á–∏—Å–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
    user = await load_data(user_id)
    if not user:
        user = {}
    user["coins"] = float(user.get("coins", 0)) + amt
    await save_data(user_id, user)

    await record_tx(card_number, "withdraw_to_balance", -amt, None, user_id, "withdraw to main balance")
    return True, f"–° –∫–∞—Ä—Ç—ã {card_number} —Å–Ω—è—Ç–æ {amt} mDrops –∏ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å"


from typing import Optional, Tuple


async def pay_with_card(owner_id: str, amount: float, pin: Optional[str] = None, require_pin: bool = False,
                        note: Optional[str] = None) -> Tuple[bool, str]:
    """
    –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞ (owner_id).
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞.
    –õ–æ–≥–∏–∫–∞:
      - –ù–∞—Ö–æ–¥–∏—Ç –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–ª–∏ –ø–µ—Ä–≤–∞—è).
      - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, PIN (–µ—Å–ª–∏ require_pin=True) –∏ –±–∞–ª–∞–Ω—Å.
      - –°–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É–º–º—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —à–∞–≥–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, —Å–æ–æ–±—â–µ–Ω–∏–µ) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ (False, –ø—Ä–∏—á–∏–Ω–∞).
    """
    # –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É–º–º—É
    try:
        amt = float(amount)
    except Exception:
        append_log({"event": "pay_with_card_invalid_amount", "owner_id": str(owner_id), "amount": amount},
                   add_timestamp=True)
        return False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"
    if amt <= 0:
        append_log({"event": "pay_with_card_nonpositive_amount", "owner_id": str(owner_id), "amount": amt},
                   add_timestamp=True)
        return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"

    owner_id = str(owner_id)

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        cards = await list_cards_by_owner(owner_id)  # dict card_number -> data
    except Exception as exc:
        append_log({
            "event": "pay_with_card_list_cards_error",
            "owner_id": owner_id,
            "amount": amt,
            "error": repr(exc)
        }, add_timestamp=True)
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞—Ä—Ç–∞–º"

    if not cards:
        append_log({"event": "pay_with_card_no_cards", "owner_id": owner_id, "amount": amt}, add_timestamp=True)
        return False, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã"

    # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É: —Å–Ω–∞—á–∞–ª–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∑ user['bank']['default_card'], –∏–Ω–∞—á–µ –ø–µ—Ä–≤–∞—è
    card_number = None
    try:
        user = await load_data(owner_id) or {}
        bank = user.get("bank", {}) if isinstance(user, dict) else {}
        default_card = bank.get("default_card")
        if default_card and default_card in cards:
            card_number = default_card
    except Exception as exc:
        append_log({
            "event": "pay_with_card_load_user_error",
            "owner_id": owner_id,
            "amount": amt,
            "error": repr(exc)
        }, add_timestamp=True)
        card_number = None

    if not card_number:
        # –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        try:
            card_number = sorted(list(cards.keys()))[0]
        except Exception as exc:
            append_log({
                "event": "pay_with_card_choose_card_error",
                "owner_id": owner_id,
                "amount": amt,
                "error": repr(exc)
            }, add_timestamp=True)
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
    try:
        card = await get_card(card_number)
    except Exception as exc:
        append_log({
            "event": "pay_with_card_get_card_error",
            "owner_id": owner_id,
            "card_number": card_number,
            "amount": amt,
            "error": repr(exc)
        }, add_timestamp=True)
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã"

    if not card:
        append_log(
            {"event": "pay_with_card_card_not_found", "owner_id": owner_id, "card_number": card_number, "amount": amt},
            add_timestamp=True)
        return False, "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ª–æ–≥-–æ–±—ä–µ–∫—Ç –±–∞–∑–æ–≤—ã–π
    masked = f"{str(card_number)}" if card_number else None
    base_log = {
        "event": "pay_with_card_attempt",
        "owner_id": owner_id,
        "card_number": card_number,
        "masked_card": masked,
        "amount": amt,
        "note": note
    }

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if card.get("blocked"):
        append_log({**base_log, "result": "fail", "reason": "–∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"}, add_timestamp=True)
        return False, "–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ PIN, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if require_pin:
        phash = card.get("pin_hash")
        if not phash:
            append_log({**base_log, "result": "fail", "reason": "PIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}, add_timestamp=True)
            return False, "–ù–∞ –∫–∞—Ä—Ç–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PIN"
        if not pin:
            append_log({**base_log, "result": "fail", "reason": "PIN –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}, add_timestamp=True)
            return False, "–¢—Ä–µ–±—É–µ—Ç—Å—è PIN"
        try:
            if phash != _hash_pin(pin):
                append_log({**base_log, "result": "fail", "reason": "–Ω–µ–≤–µ—Ä–Ω—ã–π PIN"}, add_timestamp=True)
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π PIN"
        except Exception as exc:
            append_log({**base_log, "result": "error", "reason": "–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PIN", "error": repr(exc)},
                       add_timestamp=True)
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PIN"

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    try:
        bal = float(card.get("balance", 0))
    except Exception:
        bal = 0.0
    base_log["balance_before"] = bal

    if bal < amt:
        append_log({**base_log, "result": "fail", "reason": "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", "balance": bal}, add_timestamp=True)
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ"

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try —á—Ç–æ–±—ã –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    new_balance = bal - amt
    try:
        await update_card_balance(card_number, new_balance)
        await record_tx(card_number, "payment", -amt, None, owner_id, note or "payment")
        # –õ–æ–≥ —É—Å–ø–µ—Ö–∞
        append_log({
            **base_log,
            "result": "success",
            "balance_after": new_balance
        }, add_timestamp=True)
    except Exception as exc:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ (–Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é, –Ω–æ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏)
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–∂—ë—Å—Ç–∫–∏–π –æ—Ç–∫–∞—Ç)
            await update_card_balance(card_number, bal)
        except Exception:
            # –µ—Å–ª–∏ –æ—Ç–∫–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è ‚Äî –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
            append_log({
                **base_log,
                "result": "error",
                "reason": "–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç–∫–∞—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                "error": repr(exc)
            }, add_timestamp=True)
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å –∫–∞—Ä—Ç—ã"

        # –µ—Å–ª–∏ –æ—Ç–∫–∞—Ç –ø—Ä–æ—à—ë–ª (–∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ–ø—ã—Ç–∫–∞), –ª–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
        append_log({
            **base_log,
            "result": "error",
            "reason": "–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç",
            "error": repr(exc)
        }, add_timestamp=True)
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å –∫–∞—Ä—Ç—ã"

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        disp = format_balance(amt)
    except Exception:
        disp = str(amt)

    success_msg = f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π {masked} –Ω–∞ —Å—É–º–º—É {disp} mDrops –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    return True, success_msg


async def transfer_card_to_card(from_user_id: str, from_card_number: str, to_card_number: str, amount: float,
                                pin: Optional[str] = None) -> Tuple[bool, str]:
    """
    –ü–µ—Ä–µ–≤–æ–¥ —Å –∫–∞—Ä—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É. –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è PIN.
    """
    try:
        amt = float(amount)
    except Exception:
        return False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"
    if amt <= 0:
        return False, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"

    from_card = await get_card(from_card_number)
    to_card = await get_card(to_card_number)
    if not from_card:
        return False, "–ò—Å—Ö–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    if not to_card:
        return False, "–ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    if from_card.get("blocked"):
        return False, "–ò—Å—Ö–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
    if to_card.get("blocked"):
        return False, "–ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"

    owner = str(from_card.get("owner_id"))
    if str(from_user_id) != owner:
        # –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –Ω–µ–æ–±—Ö–æ–¥–∏–º PIN
        if not pin:
            return False, "–¢—Ä–µ–±—É–µ—Ç—Å—è PIN –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"
        phash = from_card.get("pin_hash")
        if not phash or phash != _hash_pin(pin):
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π PIN"

    if float(from_card.get("balance", 0)) < amt:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ"

    # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    new_from_balance = float(from_card.get("balance", 0)) - amt
    new_to_balance = float(to_card.get("balance", 0)) + amt
    await update_card_balance(from_card_number, new_from_balance)
    await update_card_balance(to_card_number, new_to_balance)

    await record_tx(from_card_number, "transfer_out", -amt, to_card_number, str(from_user_id),
                    f"transfer to {to_card_number}")
    await record_tx(to_card_number, "transfer_in", amt, from_card_number, str(from_user_id),
                    f"received from {from_card_number}")
    return True, f"–ü–µ—Ä–µ–≤–æ–¥ {amt} mDrops —Å {from_card_number} –Ω–∞ {to_card_number} –≤—ã–ø–æ–ª–Ω–µ–Ω"


# ----------------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ -----------------

async def try_pay_with_preferred_card(user_id: str, amount: float, note: Optional[str] = None) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–±—É–µ–º —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ user['bank']['default_card']),
    –∏–Ω–∞—á–µ False.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ). –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –º–æ–∂–Ω–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
    """
    user = await load_data(str(user_id)) or {}
    bank = user.get("bank", {})
    default_card = bank.get("default_card")
    if not default_card:
        return False, "–ù–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã"
    return await pay_with_card(user_id, default_card, amount, require_pin=False, note=note)


# ----------------- –•–µ–Ω–¥–ª–µ—Ä—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ, –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å) -----------------
# –ù–∏–∂–µ ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥/–∫–Ω–æ–ø–æ–∫: /cards, —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, —Å–Ω—è—Ç–∏–µ, –ø–µ—Ä–µ–≤–æ–¥, –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç—ã, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


# –ü—Ä–æ—Å—Ç—ã–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π (–ª–æ–∫–∞–ª—å–Ω–æ)
class CardStates(StatesGroup):
    creating_card_name = State()
    creating_card_initial = State()
    creating_card_pin = State()
    topup_amount = State()
    withdraw_amount = State()
    transfer_card_target = State()
    transfer_amount = State()
    set_pin = State()


# /mycards - —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text.lower().in_(["–∫–∞—Ä—Ç–∞", "–±–∞–Ω–∫", "/card", "/bank"]))
async def cmd_my_cards(message: Message):
    if message.chat.type != "private":
        return await message.reply(
            f"üçì {await gsname(message.from_user.first_name, message.from_user.id)}, –∫–∞—Ä—Ç–∞ –¥–æ—Ç—É–ø–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ª—Å", url="t.me/gmegadbot")]]))

    uid = str(message.from_user.id)
    cards = await list_cards_by_owner(uid)
    if not cards:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="card_create")]])
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç.", reply_markup=kb)
    lines = []
    kb_rows = []
    for cn, card in cards.items():
        bal = int(card.get("balance", 0))
        bl = "üîí" if card.get("blocked") else ""
        lines.append(f"‚Ä¢ <b>{card.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b> ‚Äî <code>{cn}</code> ‚Äî {format_balance(bal)} {bl}")
        kb_rows.append([InlineKeyboardButton(text=f"üîç –ü—Ä–æ—Å–º–æ—Ç—Ä {cn[-4:]}", callback_data=f"card_view:{cn}"),
                        InlineKeyboardButton(text="üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"card_topup:{cn}")])
    if not cards.items():
        kb_rows.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="card_create")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
    await message.answer("<b>üí≥ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:</b>\n\n" + "\n".join(lines), parse_mode="HTML", reply_markup=kb)


# create card flow (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
@dp.callback_query(F.data.lower().startswith("card_create"))
async def cb_card_create_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(CardStates.creating_card_name)
    await query.message.edit_text("üî∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã (–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω–∞—è, –î–ª—è –¥–æ–Ω–∞—Ç–æ–≤) –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'")


@dp.message(CardStates.creating_card_name)
async def cb_card_create_name(msg: Message, state: FSMContext):
    if (msg.text or "").strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.reply("–û—Ç–º–µ–Ω–∞")
    name = (msg.text or "").strip()[:50]
    await state.update_data(card_name=name)
    await state.set_state(CardStates.creating_card_initial)
    await msg.reply("üí∞ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã (–¥–µ–Ω—å–≥–∏ –ø–æ–ø–æ–ª–Ω—è—Ç—Å—è —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞) –∏–ª–∏ \"0\"")


@dp.message(CardStates.creating_card_initial)
async def cb_card_create_initial(msg: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("card_name", "")
    try:
        amount = float(parse_bet_input(msg.text.strip()))
    except Exception:
        await state.clear()
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –û—Ç–º–µ–Ω–∞.")
    uid = str(msg.from_user.id)
    # –ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await load_data(uid)
    if float(user.get("coins", 0)) < amount:
        await state.clear()
        return await msg.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ.")
    # –ø–æ–ø—Ä–æ—Å–∏–º PIN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await state.update_data(card_initial=amount)
    await state.set_state(CardStates.creating_card_pin)
    await msg.reply("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ PIN –¥–ª—è –∫–∞—Ä—Ç—ã (4-6 —Ü–∏—Ñ—Ä)\n\n‚ÄºÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–≤–æ–π PIN –∏ –Ω–µ –¥–∞–≤–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É!")


@dp.message(CardStates.creating_card_pin)
async def cb_card_create_pin(msg: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("card_name", "–ö–∞—Ä—Ç–∞")
    amount = float(data.get("card_initial", 0))
    pin = (msg.text or "").strip()
    if pin.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.reply("–û—Ç–º–µ–Ω–∞.")
    if pin:
        if not pin.isdigit() or not (4 <= len(pin) <= 6):
            await state.clear()
            return await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π PIN. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4-6 —Ü–∏—Ñ—Ä. –û—Ç–º–µ–Ω–∞.")
    uid = str(msg.from_user.id)
    # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    user = await load_data(uid)
    user["coins"] = float(user.get("coins", 0)) - amount
    await save_data(uid, user)
    # —Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
    card_number = await create_card(uid, name=name, initial_balance=amount, pin=pin if pin else None)
    await state.clear()
    await msg.reply(f"‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: <code>{card_number}</code>\nüî∞ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüí∞ –ë–∞–ª–∞–Ω—Å: {amount:.2f}",
                    parse_mode="HTML")


# view card
@dp.callback_query(F.data.lower().startswith("card_view:"))
async def cb_card_view(query: CallbackQuery):
    await query.answer()
    cn = query.data.split(":", 1)[1]
    card = await get_card(cn)
    if not card:
        return await query.message.edit_text("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    owner_id = str(card.get("owner_id"))
    lines = []
    lines.append(f"üí≥ –ö–∞—Ä—Ç–∞: <b>{card.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b>")
    lines.append(f"üîó –ù–æ–º–µ—Ä: <code>{cn}</code>")
    lines.append(f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{int(card.get('balance', 0))}</b> mDrops")
    lines.append(f"üõ° –°—Ç–∞—Ç—É—Å: <b>{'–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê' if card.get('blocked') else '–ê–∫—Ç–∏–≤–Ω–∞'}</b>")
    lines.append(f"üî∞ –í–ª–∞–¥–µ–ª–µ—Ü: <code>{owner_id}</code>")
    # –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    try:
        ch = await bot.get_chat(int(owner_id))
        name = getattr(ch, "first_name", None) or getattr(ch, "username", None) or owner_id
        lines[-1] = f"–í–ª–∞–¥–µ–ª–µ—Ü: <b>{name}</b> (<code>{owner_id}</code>)"
    except Exception:
        pass
    # tx last 10
    txs = await get_tx_history(cn, limit=10)
    tx_lines = []
    for t in txs:
        ts = datetime.utcfromtimestamp(int(t["ts"])).strftime("%Y-%m-%d %H:%M")
        tx_lines.append(f"{ts} | {t['type']} | {t['amount']} | {t.get('note') or ''}")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"card_topup:{cn}"),
         InlineKeyboardButton(text="üì§ –°–Ω—è—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å", callback_data=f"card_withdraw:{cn}")],
        [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data=f"card_transfer:{cn}")],
        [InlineKeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not card.get("blocked") else "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                              callback_data=f"card_block_toggle:{cn}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"card_delete:{cn}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_cards")]
    ])
    text = "\n".join(lines) + "\n\n–ò—Å—Ç–æ—Ä–∏—è:\n" + ("\n".join(tx_lines) if tx_lines else "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç")
    try:
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except Exception:
        await query.message.answer(text, parse_mode="HTML", reply_markup=kb)


# topup flow
@dp.callback_query(F.data.lower().startswith("card_topup:"))
async def cb_card_topup(query: CallbackQuery, state: FSMContext):
    cn = query.data.split(":", 1)[1]
    await state.update_data(card_target=cn)
    await state.set_state(CardStates.topup_amount)
    await query.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 1000) –∏–ª–∏ \"–æ—Ç–º–µ–Ω–∞\" –¥–ª—è –æ—Ç–º–µ–Ω—ã")


@dp.message(CardStates.topup_amount)
async def cb_card_topup_amount(msg: Message, state: FSMContext):
    data = await state.get_data()
    cn = data.get("card_target")
    if not cn:
        await state.clear()
        return await msg.reply("‚ùå –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    text = (msg.text or "").strip().lower()
    if text == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.reply("–û—Ç–º–µ–Ω–∞.")
    try:
        amt = float(parse_bet_input(text))
    except Exception:
        await state.clear()
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –û—Ç–º–µ–Ω–∞.")
    res, msgt = await topup_card_from_balance(str(msg.from_user.id), cn, amt)
    await state.clear()
    return await msg.reply(msgt)


# withdraw flow
@dp.callback_query(F.data.lower().startswith("card_withdraw:"))
async def cb_card_withdraw_start(query: CallbackQuery, state: FSMContext):
    cn = query.data.split(":", 1)[1]
    await state.update_data(card_target=cn)
    await state.set_state(CardStates.withdraw_amount)
    await query.message.edit_text("üì• –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ \"–æ—Ç–º–µ–Ω–∞\"")


@dp.message(CardStates.withdraw_amount)
async def cb_card_withdraw_amount(msg: Message, state: FSMContext):
    data = await state.get_data()
    cn = data.get("card_target")
    if not cn:
        await state.clear()
        return await msg.reply("–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–∞.")
    t = (msg.text or "").strip().lower()
    if t == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.reply("–û—Ç–º–µ–Ω–∞.")
    try:
        amt = float(parse_bet_input(t))
    except Exception:
        await state.clear()
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
    res, ms = await withdraw_card_to_balance(str(msg.from_user.id), cn, amt)
    await state.clear()
    await msg.reply(ms)


# transfer flow: –∑–∞–ø—Ä–æ—Å —Ü–µ–ª–∏ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã)
@dp.callback_query(F.data.lower().startswith("card_transfer:"))
async def cb_card_transfer_start(query: CallbackQuery, state: FSMContext):
    cn = query.data.split(":", 1)[1]
    await state.update_data(card_source=cn)
    await state.set_state(CardStates.transfer_card_target)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è (16 —Ü–∏—Ñ—Ä) –∏–ª–∏ \"–æ—Ç–º–µ–Ω–∞\"")


@dp.message(CardStates.transfer_card_target)
async def cb_card_transfer_target(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.reply("–û—Ç–º–µ–Ω–∞.")
    target = text
    await state.update_data(card_target=target)
    await state.set_state(CardStates.transfer_amount)
    await msg.reply("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:")


@dp.message(CardStates.transfer_amount)
async def cb_card_transfer_amount(msg: Message, state: FSMContext):
    data = await state.get_data()
    src = data.get("card_source")
    tgt = data.get("card_target")
    if not src or not tgt:
        await state.clear()
        return await msg.reply("–î–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –û—Ç–º–µ–Ω–∞.")
    try:
        amt = float(parse_bet_input(msg.text.strip()))
    except Exception:
        await state.clear()
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
    # –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –Ω–µ —Ç—Ä–µ–±—É–µ—Ç PIN. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π ‚Äî –ø–æ—Ç—Ä–µ–±—É–µ—Ç PIN (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ç—É—Ç)
    res, ms = await transfer_card_to_card(str(msg.from_user.id), src, tgt, amt, pin=None)
    await state.clear()
    await msg.reply(ms)


# block toggle
@dp.callback_query(F.data.lower().startswith("card_block_toggle:"))
async def cb_card_block_toggle(query: CallbackQuery):
    cn = query.data.split(":", 1)[1]
    card = await get_card(cn)
    if not card:
        return await query.message.edit_text("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    owner = str(card.get("owner_id"))
    uid = str(query.from_user.id)
    if uid != owner and uid != str(ADMIN_ID):
        return await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    new_state = not bool(card.get("blocked"))
    await set_card_block(cn, new_state)
    await query.message.edit_text("–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞." if new_state else "–ö–∞—Ä—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.")


# delete
@dp.callback_query(F.data.lower().startswith("card_delete:"))
async def cb_card_delete(query: CallbackQuery):
    cn = query.data.split(":", 1)[1]
    card = await get_card(cn)
    if not card:
        return await query.message.edit_text("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    owner = str(card.get("owner_id"))
    uid = str(query.from_user.id)
    if uid != owner and uid != str(ADMIN_ID):
        return await query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    # –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    bal = float(card.get("balance", 0))
    if bal > 0:
        # –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
        u = await load_data(owner)
        u["coins"] = float(u.get("coins", 0)) + bal
        await save_data(owner, u)
    deleted = await delete_card(cn)
    if deleted:
        await query.message.edit_text("‚ùå –ö–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É (–µ—Å–ª–∏ –±—ã–ª).")
    else:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É.")


@dp.callback_query(F.data == "back_cards")
async def cmd_my_cards(cb: CallbackQuery):
    uid = str(cb.from_user.id)
    cards = await list_cards_by_owner(uid)
    if not cards:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="card_create")]])
        return await cb.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç.", reply_markup=kb)
    lines = []
    kb_rows = []
    for cn, card in cards.items():
        bal = int(card.get("balance", 0))
        bl = "üîí" if card.get("blocked") else ""
        lines.append(f"‚Ä¢ <b>{card.get('name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b> ‚Äî <code>{cn}</code> ‚Äî {format_balance(bal)} {bl}")
        kb_rows.append([InlineKeyboardButton(text=f"üîç –ü—Ä–æ—Å–º–æ—Ç—Ä {cn[-4:]}", callback_data=f"card_view:{cn}"),
                        InlineKeyboardButton(text="üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"card_topup:{cn}")])
    if not cards.items():
        kb_rows.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="card_create")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
    await cb.message.edit_text("<b>üí≥ –í–∞—à–∏ –∫–∞—Ä—Ç—ã:</b>\n\n" + "\n".join(lines), parse_mode="HTML", reply_markup=kb)


# -------------- MEGADROP COLLABORATION -------------- #

@dp.message(F.text.lower().startswith("–º–¥"))
async def handle_megadrop_asks(msg: Message):
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    question_text = msg.text
    hru = ["–º–¥ —Ç—ã –∫–∞–∫", "–º–¥ –∫–∞–∫ —Ç—ã", "–º–¥ –∫–∞–∫ –¥–µ–ª–∞?", "–º–¥ –∫–∞–∫ –¥–µ–ª–∞"]
    choose_the_game = ["–º–¥ –¥–∞–π —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É", "–º–¥ –¥–∞–π —Ä–∞–Ω–¥–æ–º–Ω—É—é –∏–≥—Ä—É", "–º–¥ –∫–∞–∫—É—é –∏–≥—Ä—É —Å—ã–≥—Ä–∞—Ç—å",
                       "–º–¥ –∫–∞–∫—É—é –∏–≥—Ä—É –∏–≥—Ä–∞—Ç—å", "–º–¥ —Å–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞"]
    all_games = ["–±–∞—à–Ω—è", "–∑–æ–ª–æ—Ç–æ", "–∫—Ä–∞—à", "—Ä—É–ª–µ—Ç–∫–∞", "–∫–æ—Å—Ç–∏", "–º–∏–Ω—ã", "–∫–Ω–±", "–±–æ—É–ª", "—Ä—Ä", "—Å—É–Ω–¥—É–∫–∏", "–±–∞—Å–∫–µ—Ç–±–æ–ª",
                 "–¥—É—ç–ª—å"]
    words = question_text.split(" ")
    if words[1] == "–≤—ã–±–µ—Ä–∏":
        if " –∏–ª–∏ " in question_text:
            parts = words[1:]
            variants = " ".join(parts[1:]).split(" –∏–ª–∏ ")
            if not variants:
                return await msg.reply(f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã!")

            phrases = ["—è –¥—É–º–∞—é —á—Ç–æ", "–Ω–∞–≤–µ—Ä–Ω–æ–µ", "—è —Å–∫–∞–∂—É", "–∫—Ç–æ–±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, –Ω–æ —ç—Ç–æ", "–∏ —ç—Ç–æ"]
            return await msg.reply(f"{await gsname(name, user_id)}, {random.choice(phrases)} {random.choice(variants)}")
    elif question_text.lower() in hru:
        phrases = ["–∂–µ—Å—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∞", "–∫–∞–π—Ñ—É—é—é", "—Å–∫–∞–∂–∏ —Å–ø—Å —Å–æ–ª–∞–º–æ–Ω—É", "—Ç–æ–ø –¥–æ–Ω–∞—Ç–æ—Ä - @MB_team_1 (1500 –∑–≤–µ–∑–¥)",
                   "–∫—Ç–æ–±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, –Ω–æ –≠–¢–û –ñ–ï–°–¢–¨ –ù–ê–ì–†–£–ó–ö–ê", "—è —Å–∫–∞–∂—É ...", "–Ω–æ—Ä–º–∏—Å",
                   "–Ω–∞–ø–∏—à–∏ –æ–∫–∞–∫ –≤ –∫–æ–º–º–µ–Ω—Ç—ã, —ç—Ç–æ —Å–º–µ—à–Ω–æ –ø...", "–Ω–æ—Ä–º, –≥–æ –≤ –±–∞—à–Ω—é", "–∑–∞–±—ã–ª –ø—Ä–æ –±–æ–Ω—É—Å?))",
                   "–∑–∞–±—ã–ª –¥–∞? /help", "—Ç–∞ –Ω–∏—á–µ —Ç–∞–∫, –±–∏–∑–Ω–µ—Å —Å–≤–æ–π –≤–µ–¥—É", "–¥–µ–≤–∞—á–∫–∏ —Ç–∏—à–µ–µ"]
        return await msg.reply(f"{await gsname(name, user_id)}, {random.choice(phrases)}")
    elif question_text.lower() in choose_the_game:
        phrases = ["—è –¥—É–º–∞—é —á—Ç–æ", "–Ω–∞–≤–µ—Ä–Ω–æ–µ", "—è —Å–∫–∞–∂—É", "–∫—Ç–æ–±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, –Ω–æ —ç—Ç–æ", "–∏ —ç—Ç–æ", "–ø–æ–∂–∞–ª—É–π —ç—Ç–æ –±—É–¥–µ—Ç"]
        return await msg.reply(f"{await gsname(name, user_id)} {random.choice(phrases)} {random.choice(all_games)}")
    elif words[1] == "—Ä–∞–Ω–¥–æ–º" and words[2] == "–æ—Ç":
        if " –¥–æ " in question_text:
            parts = words[1:]
            variants = [int(parts[2]), int(parts[4])]

            if not variants:
                return await msg.reply(f"{await gsname(name, user_id)}, –≤–≤–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã!")

            phrases = ["—è –¥—É–º–∞—é —á—Ç–æ", "–Ω–∞–≤–µ—Ä–Ω–æ–µ", "—è —Å–∫–∞–∂—É", "–∫—Ç–æ–±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, –Ω–æ —ç—Ç–æ", "–∏ —ç—Ç–æ", "–ø–æ–∂–∞–ª—É–π"]
            return await msg.reply(
                f"{await gsname(name, user_id)}, {random.choice(phrases)} {random.randint(variants[0], variants[1])}")
    else:
        await msg.reply(
            f"{await gsname(name, user_id)}, —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å!\n\n{html.blockquote(f"–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ú–µ–≥–∞–î—Ä–æ–ø–∞:\n{html.code("–º–¥ –≤—ã–±–µ—Ä–∏ (—Ç–µ–∫—Å—Ç 1) –∏–ª–∏ (—Ç–µ–∫—Å—Ç 2)")}\n{html.code("–º–¥ –∫–∞–∫ –¥–µ–ª–∞")}\n{html.code("–º–¥ –¥–∞–π —Ä–∞–Ω–¥–æ–º–Ω—É—é –∏–≥—Ä—É")}\n{html.code("–º–¥ —Ä–∞–Ω–¥–æ–º –æ—Ç (—á–∏—Å–ª–æ 1) –¥–æ (—á–∏—Å–ª–æ 2)")}")}")


# -------------- ADMIN COMMANDS -------------- #

LOGS_FOR_PAGE = 10


def make_logs_keyboard(page: int, total_pages: int, user_id: int) -> types.InlineKeyboardMarkup:
    prev_page = max(page - 1, 0)
    next_page = min(page + 1, total_pages - 1)

    prev_btn = types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–æ–≤–µ–µ", callback_data=f"logs:{user_id}:{prev_page}"
    )
    next_btn = types.InlineKeyboardButton(
        text="–°—Ç–∞—Ä–µ–µ ‚û°Ô∏è", callback_data=f"logs:{user_id}:{next_page}"
    )
    page_btn = types.InlineKeyboardButton(
        text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}", callback_data=f"logs:{user_id}:noop"
    )

    inline_keyboard = [
        [prev_btn, next_btn],
        [page_btn],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


def format_logs_page(logs: list[str], page: int) -> str:
    start = page * LOGS_FOR_PAGE
    page_logs = logs[start:start + LOGS_FOR_PAGE]
    if not page_logs:
        return "–ù–µ–º–∞—î –ª–æ–≥—ñ–≤ –Ω–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ."
    lines = []
    for i, item in enumerate(page_logs, start=start + 1):
        lines.append(f"{i}. {item}")
    header = f"–õ–æ–≥–∏ (–ø–æ–∫–∞–∑–∞–Ω–æ {start + 1}-{start + len(page_logs)} –∑ {len(logs)})\n\n"
    return header + "\n\n".join(lines)


@dp.callback_query(F.data.startswith("send_logs_callback"))
async def handle_send_callback_log(query: CallbackQuery):
    user_id = query.from_user.id
    data = query.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await query.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")

    data = load_log()
    logs = data.get("events", []) or []
    if not logs:
        return await query.answer("–õ–æ–≥–∏ –ø—É—Å—Ç—ã–µ")

    logs = list(reversed(logs))

    total_pages = max(1, ceil(len(logs) / LOGS_FOR_PAGE))
    page = 0
    text = format_logs_page(logs, page)
    kb = make_logs_keyboard(page, total_pages, user_id)
    await query.message.edit_text(text, reply_markup=kb)


@dp.message(Command("send_log"))
async def handle_send_log(message: types.Message):
    user_id = message.from_user.id
    if user_id not in gadmins():
        return

    if message.chat.type != "private":
        return await message.reply("–õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª—Å")

    data = load_log()
    logs = data.get("events", []) or []
    if not logs:
        return await message.reply("–õ–æ–≥–∏ –ø—É—Å—Ç—ã–µ")

    logs = list(reversed(logs))

    total_pages = max(1, ceil(len(logs) / LOGS_FOR_PAGE))
    page = 0
    text = format_logs_page(logs, page)
    kb = make_logs_keyboard(page, total_pages, user_id)
    await message.answer(text, reply_markup=kb)


@dp.callback_query(lambda c: c.data and c.data.startswith("logs:"))
async def process_logs_page(callback: CallbackQuery):
    await callback.answer()
    try:
        _, owner_id, page_str = callback.data.split(":", 2)
        if int(owner_id) != callback.from_user.id:
            return await callback.answer("–ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞")
        if page_str == "noop":
            return
        page = int(page_str)
    except Exception:
        return

    if callback.message.chat.type != "private":
        return await callback.answer("–õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª—Å")

    data = load_log()
    logs = data.get("events", []) or []
    if not logs:
        try:
            await callback.message.edit_text("–õ–æ–≥–∏ –ø—É—Å—Ç—ã–µ", reply_markup=None)
        except Exception:
            pass
        return

    logs = list(reversed(logs))
    total_pages = max(1, ceil(len(logs) / LOGS_FOR_PAGE))

    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1

    text = format_logs_page(logs, page)
    kb = make_logs_keyboard(page, total_pages, callback.from_user.id)

    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception:
        await callback.message.answer(text, reply_markup=kb)


@dp.message(Command("clear_log"))
async def handle_clear_log(message: Message):
    user_id = message.from_user.id

    if user_id in gadmins():
        if int(user_id) not in SPECIAL_ADMINS:
            return await message.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!")
        save_log({"events": []})

        await message.answer(f"–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")


@dp.callback_query(F.data.startswith("clear_logs_callback"))
async def handle_clear_log(query: CallbackQuery):
    user_id = query.from_user.id
    data = query.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await query.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")

    if int(caller_id) not in SPECIAL_ADMINS:
        return await query.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!")

    save_log({"events": []})

    await query.answer(f"–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")


@dp.callback_query(F.data.startswith("admin_give_status"))
async def handle_clear_log(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    data = query.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await query.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")
    if int(caller_id) not in SPECIAL_ADMINS:
        return await query.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!")

    statuses_str = " ‚Ä¢ "
    for i in range(len(STATUSES)):
        statuses_str = statuses_str + f"{STATUSES[i]} ({i}) \n ‚Ä¢ "

    statuses_str = statuses_str[:len(statuses_str) - 2]

    await query.message.edit_text(
        f"{await gsname(query.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å (–Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ —É–∫–∞–∑–∞–Ω –≤–æ–∑–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)\n\n{statuses_str}",
        reply_markup=ckb(user_id))
    await state.set_state(AdminPanelStates.waiting_for_status_give_status)


class AdminPanelStates(StatesGroup):
    waiting_for_mdrops_amount = State()
    waiting_for_id_mdrops_add = State()
    waiting_for_ggs_amount = State()
    waiting_for_id_ggs_add = State()
    waiting_for_id_for_ban = State()
    waiting_for_id_for_unban = State()
    waiting_for_status_give_status = State()
    waiting_for_id_give_status = State()
    waiting_for_id_clear_data = State()
    waiting_for_id_clear_mdrops = State()
    waiting_for_promo_data = State()
    waiting_for_text_send_message = State()
    waiting_for_kb_choose_send_message = State()
    waiting_for_send_kb_send_message = State()


@dp.message(Command("admin_send_message"))
async def handle_msg_admin_send(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    if user_id not in gadmins():
        return

    parts = msg.text.split(" ")
    if len(parts) < 2:
        return await msg.answer(f"–ò—Å–ø–æ–ª—å–∑–≤–∞–æ–Ω–∏–µ:\n<code>/admin_send_message (ID)</code>")
    elif not parts[1].isdigit():
        return await msg.answer(f"–ò—Å–ø–æ–ª—å–∑–≤–∞–æ–Ω–∏–µ:\n<code>/admin_send_message (ID)</code>")

    if not await bot.get_chat(parts[1]):
        return await msg.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω")

    await state.update_data(id=parts[1])

    await state.set_state(AdminPanelStates.waiting_for_text_send_message)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=ckb(user_id))


@dp.message(AdminPanelStates.waiting_for_text_send_message)
async def handle_waiting_for_text_send_message(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    text = msg.text

    await state.update_data(text=text)

    await msg.answer(f"–î–æ–±–∞–≤–∞–∏—Ç—å –∫–Ω–æ–∫—É —Å URL-—Å—Å—ã–ª–∫–æ–π?", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–î–∞", callback_data="add_kb_admin_send")],
                         [InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–∂–µ", callback_data="admin_send_msg_now")]]))
    await state.set_state(AdminPanelStates.waiting_for_kb_choose_send_message)


@dp.message(AdminPanelStates.waiting_for_kb_choose_send_message)
async def handle_waiting_for_promo_data(msg: Message, state: FSMContext):
    uid = msg.from_user.id
    await msg.answer(f"–î–æ–±–∞–≤–∞–∏—Ç—å –∫–Ω–æ–∫—É —Å URL-—Å—Å—ã–ª–∫–æ–π?", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–î–∞ (–¥–∞–ª—å—à–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å)", callback_data="add_kb_admin_send")],
                         [InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–∂–µ", callback_data="admin_send_msg_now")]]))


@dp.callback_query(F.data == "add_kb_admin_send")
async def handle_add_kb_admin_send(query: CallbackQuery, state: FSMContext):
    uid = query.from_user.id
    await state.set_state(AdminPanelStates.waiting_for_send_kb_send_message)

    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n(—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)<code>|</code>(—Å—Å—ã–ª–∫–∞)",
                                  reply_markup=ckb(uid))


@dp.message(AdminPanelStates.waiting_for_send_kb_send_message)
async def handle_waiting_for_send_kb_send_message(msg: Message, state: FSMContext):
    uid = msg.from_user.id

    text, url = msg.text.split("|")
    sd = await state.get_data()
    tuid = sd["id"]
    mtext = sd["text"]
    try:
        await bot.send_message(tuid, mtext, reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=text, url=url)]]))
        await msg.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return await state.clear()
    except Exception as e:
        await msg.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return await state.clear()


@dp.callback_query(F.data == "admin_send_msg_now")
async def handle_admin_send_msg_now(query: CallbackQuery, state: FSMContext):
    uid = query.from_user.id

    sd = await state.get_data()
    tuid = sd["id"]
    mtext = sd["text"]
    try:
        await bot.send_message(tuid, mtext)
        await query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return await state.clear()
    except Exception as e:
        await query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return await state.clear()


@dp.message(AdminPanelStates.waiting_for_promo_data)
async def handle_waiting_for_promo_data(message: Message, state: FSMContext):
    if message.from_user.id not in SPECIAL_ADMINS:
        return

    # —Ä–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç
    parts = message.text.strip().split()

    if len(parts) != 2:
        return await message.reply("<–Ω–∞–∑–≤–∞–Ω–∏–µ> <reward>")

    name = parts[0]
    try:
        reward = int(parts[1])  # –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ int, —è–∫—â–æ –∑–∞–≤–∂–¥–∏ —Ü—ñ–ª–µ
    except ValueError:
        return await message.reply("‚ùå Reward –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    import sqlite3
    conn = sqlite3.connect("data.db")
    cursor = conn.cursor()

    try:
        cursor.execute(
            "INSERT INTO promos (name, reward) VALUES (?, ?)",
            (name, reward)
        )
        conn.commit()
    except sqlite3.IntegrityError:
        return await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–º–æ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        conn.close()
    await send_log(
        f"–ê–¥–º–∏–Ω @{message.from_user.username} ({message.from_user.id}) —Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ \"{name}\" —Å –ø—Ä–∏–∑–æ–º {reward} mDrops")
    await message.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> —Å–æ–∑–¥–∞–Ω!\nüéÅ –ü—Ä–∏–∑: {reward}")
    await state.clear()


@dp.message(AdminPanelStates.waiting_for_status_give_status)
async def handle_id_for_status_giver(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    if msg.text.isdigit():
        status_id = int(msg.text)
    elif len(STATUSES) < int(msg.text):
        return await msg.answer("–°—Ç–∞—Ç—É—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", kb=ckb(user_id))
    elif int(msg.text) < 0:
        return await msg.answer("–°—Ç–∞—Ç—É—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", kb=ckb(user_id))
    else:
        return await msg.answer("–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞!", kb=ckb(user_id))

    await state.update_data(status_id=status_id)
    await state.set_state(AdminPanelStates.waiting_for_id_give_status)
    await msg.answer(f"{await gsname(msg.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å—Ç–∞—Ç—É—Å–∞",
                     reply_markup=ckb(user_id))


@dp.message(AdminPanelStates.waiting_for_id_give_status)
async def handle_id_for_status_giver(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    if msg.text.isdigit():
        id = int(msg.text)
    else:
        return await msg.answer("–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ID!", kb=ckb(user_id))

    data_state = await state.get_data()
    status = data_state.get("status_id")

    data = await load_data(id)
    data["status"] = int(status)
    await save_data(id, data)

    chat = await bot.get_chat(id)
    target_name = chat.first_name

    await state.clear()
    await msg.answer(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª —Å—Ç–∞—Ç—É—Å \"{get_status(status)}\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} ({id})")
    append_log(
        f"{await gsname(msg.from_user.first_name, user_id)} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª —Å—Ç–∞—Ç—É—Å \"{get_status(status)}\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} ({id})",
        add_timestamp=True)


@dp.callback_query(F.data.startswith("admin_clear_player"))
async def handle_clear_log(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    data = query.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await query.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")
    if int(caller_id) not in SPECIAL_ADMINS:
        return await query.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!")

    await query.message.edit_text(
        f"{await gsname(query.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ —Å–±—Ä–æ—Å–∏—Ç—å –ë–î",
        reply_markup=ckb(user_id))
    await state.set_state(AdminPanelStates.waiting_for_id_clear_data)


@dp.message(AdminPanelStates.waiting_for_id_clear_data)
async def handle_waiting_for_id_clear_data(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    if msg.text.isdigit():
        id = int(msg.text)
    else:
        return await msg.answer("–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ID!", kb=ckb(user_id))

    target_data = await load_data(id)
    if not target_data:
        return await msg.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    target_data = {
        "coins": 0,
        "GGs": 0,
        "lost_coins": 0,
        "won_coins": 0,
        "status": 0
    }

    chat = await bot.get_chat(id)
    target_name = chat.first_name

    await save_data(id, target_data)
    append_log(f"{await gsname(msg.from_user.first_name, user_id)} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª –ë–î –∏–≥—Ä–æ–∫–∞ {target_name} ({id})",
               add_timestamp=True)
    await msg.reply(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—Å–∏–ª –±–¥ –∏–≥—Ä–æ–∫–∞ {target_name} ({id})")
    await state.clear()


@dp.callback_query(F.data.startswith("admin_clear_mDrops"))
async def handle_clear_log(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    data = query.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await query.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")

    await query.message.edit_text(
        f"{await gsname(query.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ —Å–±—Ä–æ—Å–∏—Ç—å mDrops",
        reply_markup=ckb(user_id))
    await state.set_state(AdminPanelStates.waiting_for_id_clear_mdrops)


import html as pyhtml


def safe_int(v, default=0):
    try:
        if v is None:
            return default
        if isinstance(v, (int,)):
            return v
        if isinstance(v, float):
            return int(v)
        s = str(v).strip()
        if s == "":
            return default
        return int(s)
    except Exception:
        return default


def format_contract_row(idx: int, c: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ (HTML-—Ñ–æ—Ä–º–∞—Ç).
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç last_payment, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–∞–º –ª–µ–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    contract_id = pyhtml.escape(str(c.get("id", "-")))
    link_raw = str(c.get("link", "‚Äî"))
    link_display = pyhtml.escape(link_raw)
    link_href = link_raw
    if not link_href.startswith("http"):
        if link_href.startswith("@"):
            link_href = f"https://t.me/{link_href[1:]}"
        else:
            if "/" not in link_href and "." not in link_href:
                link_href = f"https://t.me/{link_href}"
            else:
                link_href = link_href

    owner = pyhtml.escape(str(c.get("owner_id", "‚Äî")))
    subs = pyhtml.escape(str(c.get("subs", "‚Äî")))
    level = pyhtml.escape(str(c.get("level", "‚Äî")))

    last_ts = safe_int(c.get("last_payment", 0) or 0)
    if last_ts:
        try:
            last_dt = datetime.utcfromtimestamp(last_ts).strftime("%Y-%m-%d %H:%M:%S")
        except Exception:
            last_dt = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        last_dt = "–Ω–∏–∫–æ–≥–¥–∞"
    last_dt = pyhtml.escape(last_dt)

    return (
        f"<b>{idx}.</b> –ö–æ–Ω—Ç—Ä–∞–∫—Ç <code>#{contract_id}</code>\n"
        f"üîó –ö–∞–Ω–∞–ª: <a href=\"{pyhtml.escape(link_href)}\">{link_display}</a>\n"
        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: <code>{owner}</code>  ‚Ä¢  üìà –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{subs}</b>\n"
        f"üè∑ –£—Ä–æ–≤–µ–Ω—å: <b>{level}</b>  ‚Ä¢  ‚è± –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞: <code>{last_dt}</code>\n"
    )


def build_partners_page_text(channels_list: list, page: int, page_size: int) -> str:
    total = len(channels_list)
    if total == 0:
        return "üìÑ <b>–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø—É—Å—Ç.</b>"

    total_pages = math.ceil(total / page_size)
    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1

    start = page * page_size
    end = start + page_size
    slice_items = channels_list[start:end]

    header = f"üìÑ <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})</b>\n\n"
    body_lines = []
    for i, c in enumerate(slice_items, start=1 + start):
        body_lines.append(format_contract_row(i, c))
    footer = f"\n–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: <b>{total}</b>"

    return header + "\n".join(body_lines) + footer


def build_partners_page_kb(channels_slice: list, page: int, total_items: int, page_size: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç InlineKeyboard —Å:
    - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ‚Äî –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å #id' (callback: partners_finish:<id>)
    - –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ù–∞–∑–∞–¥/–î–∞–ª—å—à–µ/–ó–∞–∫—Ä—ã—Ç—å
    """
    kb = []
    # –ö–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for c in channels_slice:
        cid = safe_int(c.get("id", 0))
        # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, callback —Å–æ–¥–µ—Ä–∂–∏—Ç id
        kb.append([InlineKeyboardButton(text=f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å #{cid}", callback_data=f"partners_finish:{cid}")])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    total_pages = max(1, math.ceil(total_items / page_size))
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"partners_list:{page - 1}"))
    else:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"partners_list:noop"))
    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data=f"partners_list:{page + 1}"))
    else:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data=f"partners_list:noop"))

    kb.append(nav_row)
    kb.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="partners_list:close")])

    return InlineKeyboardMarkup(inline_keyboard=kb)


# ====== –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ /partners_list ======
@dp.message(F.text == "/partners_list")
async def partners_list_cmd(msg: Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º: –¥–æ—Å—Ç—É–ø –∏–º–µ—é—Ç –∞–¥–º–∏–Ω—ã (ADMINS) ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à—É –ª–æ–≥–∏–∫—É
    if not msg.from_user.id in gadmins():
        return

    partners = load_partners()
    channels = list(partners.get("channels", {}).values())

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id –±–µ–∑–æ–ø–∞—Å–Ω–æ
    try:
        channels = sorted(channels, key=lambda x: safe_int(x.get("id", 0)))
    except Exception:
        pass

    page = 0
    text = build_partners_page_text(channels, page, PAGE_SIZE)
    # –ø–µ—Ä–µ–¥–∞—ë–º –∏–º–µ–Ω–Ω–æ —Å—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    start = page * PAGE_SIZE
    slice_items = channels[start:start + PAGE_SIZE]
    kb = build_partners_page_kb(slice_items, page, len(channels), PAGE_SIZE)

    await msg.answer(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)


# ====== Callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ======
@dp.callback_query(F.data.startswith("partners_list:"))
async def partners_list_page_cb(query: CallbackQuery):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    if not query.from_user.id in gadmins():
        return

    parts = query.data.split(":")
    action = parts[1] if len(parts) > 1 else None

    if action == "close":
        try:
            await query.message.delete()
        except Exception:
            pass
        return await query.answer()

    if action == "noop":
        return await query.answer()

    try:
        page = int(action)
    except Exception:
        return await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)

    partners = load_partners()
    channels = list(partners.get("channels", {}).values())
    try:
        channels = sorted(channels, key=lambda x: safe_int(x.get("id", 0)))
    except Exception:
        pass

    text = build_partners_page_text(channels, page, PAGE_SIZE)
    start = page * PAGE_SIZE
    slice_items = channels[start:start + PAGE_SIZE]
    kb = build_partners_page_kb(slice_items, page, len(channels), PAGE_SIZE)

    try:
        await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)
    except Exception:
        await query.message.answer(text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)

    await query.answer()


@dp.callback_query(F.data.startswith("partners_finish:"))
async def partners_finish_cb(query: CallbackQuery):
    parts = query.data.split(":")
    if len(parts) < 2:
        return await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

    try:
        contract_id = int(parts[1])
    except Exception:
        return await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.", show_alert=True)

    caller = query.from_user
    caller_id = caller.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º SPECIAL_ADMINS –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ fallback –Ω–∞ ADMINS
    allowed = False
    if "SPECIAL_ADMINS" in globals() and isinstance(SPECIAL_ADMINS, (list, set, tuple)):
        if caller_id in SPECIAL_ADMINS:
            allowed = True
    else:
        # fallback: –¥–∞—Ç—å –ø—Ä–∞–≤–æ –≤—Å–µ–º –∏–∑ ADMINS (–µ—Å–ª–∏ SPECIAL_ADMINS –Ω–µ –∑–∞–¥–∞–Ω)
        if caller_id in gadmins():
            allowed = True

    if not allowed:
        return await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.", show_alert=True)

    # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    key, contract = find_contract_by_id(contract_id)
    if not contract or not key:
        return await query.answer("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    owner_id = contract.get("owner_id")
    # —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    partners = load_partners()
    try:
        partners.get("channels", {}).pop(key, None)
        save_partners(partners)
    except Exception:
        return await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.", show_alert=True)

    # –ª–æ–≥–∏—Ä—É–µ–º
    append_log({
        "time": int(time.time()),
        "action": "force_finish",
        "contract_id": contract_id,
        "owner_id": owner_id,
        "by_admin_id": caller_id,
        "by_admin_name": caller.full_name
    })

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        if owner_id:
            await bot.send_message(owner_id,
                                   f"‚ùóÔ∏è –í–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç <code>#{contract_id}</code> –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {caller.full_name} (id: {caller_id}).",
                                   parse_mode="HTML")
    except Exception:
        # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        append_log({
            "time": int(time.time()),
            "action": "notify_owner_failed",
            "contract_id": contract_id,
            "owner_id": owner_id
        })

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ‚Äî —É–¥–∞–ª–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏–ª—Å—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        partners = load_partners()
        channels = list(partners.get("channels", {}).values())
        try:
            channels = sorted(channels, key=lambda x: safe_int(x.get("id", 0)))
        except Exception:
            pass

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â message —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–Ω–æ–≤–æ.
        page = 0
        text = build_partners_page_text(channels, page, PAGE_SIZE)
        start = page * PAGE_SIZE
        slice_items = channels[start:start + PAGE_SIZE]
        kb = build_partners_page_kb(slice_items, page, len(channels), PAGE_SIZE)

        await query.message.edit_text(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç #{contract_id} –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n{text}", parse_mode="HTML",
                                      reply_markup=kb, disable_web_page_preview=True)
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–≤–µ—Ç
        await query.message.answer(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç #{contract_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")
    return await query.answer("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)


@dp.message(AdminPanelStates.waiting_for_id_clear_mdrops)
async def handle_waiting_for_id_clear_data(msg: Message, state: FSMContext):
    user_id = msg.from_user.id

    if msg.text.isdigit():
        id = int(msg.text)
    else:
        return await msg.answer("–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ID!", kb=ckb(user_id))

    target_data = await load_data(id)
    if not target_data:
        return await msg.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    target_data["coins"] = 0

    chat = await bot.get_chat(id)
    target_name = chat.first_name

    await save_data(id, target_data)
    append_log(f"{await gsname(msg.from_user.first_name, user_id)} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª mDrops –∏–≥—Ä–æ–∫–∞ {target_name} ({id})",
               add_timestamp=True)
    await msg.reply(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—Å–∏–ª mDrops –∏–≥—Ä–æ–∫–∞ {target_name} ({id})")
    await state.clear()


@dp.message(Command("admin"))
async def handle_admin_panel(message: Message):
    user_id = message.from_user.id

    if not user_id in gadmins():
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—á–∏c–ª–∏—Ç—å mDrops", callback_data=f"add_admins_mdrops:{user_id}")],
                         [InlineKeyboardButton(text="–ù–∞—á–∏c–ª–∏—Ç—å GGs", callback_data=f"add_admins_ggs:{user_id}")],
                         [InlineKeyboardButton(text="–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"admin_ban:{user_id}"),
                          InlineKeyboardButton(text="–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"admins_unban:{user_id}")],
                         [InlineKeyboardButton(text="–õ–æ–≥–∏", callback_data=f"send_logs_callback:{user_id}"),
                          InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –õ–æ–≥–∏", callback_data=f"clear_logs_callback:{user_id}")],
                         [InlineKeyboardButton(text="–î–∞—Ç—å –°—Ç–∞—Ç—É—Å", callback_data=f"admin_give_status:{user_id}")],
                         [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –ò–≥—Ä–æ–∫–∞", callback_data=f"admin_clear_player:{user_id}"),
                          InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å mDrops –ò–≥—Ä–æ–∫–∞",
                                               callback_data=f"admin_clear_mDrops:{user_id}")],
                         [InlineKeyboardButton(text="–ù–æ–≤—ã–π –ü—Ä–æ–º–æ", callback_data=f"admin_new_promo:{user_id}")]])

    await message.reply(f"{await gsname(message.from_user.first_name, user_id)}, —Ç—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=kb)


@dp.callback_query(F.data.startswith("admin_new_promo:"))
async def handle_callback_admin_ban(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await callback.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")
    if int(caller_id) not in SPECIAL_ADMINS:
        return await callback.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!")

    await callback.message.edit_text(
        f"{await gsname(callback.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"(–Ω–∞–∑–≤–∞–Ω–∏–µ) (–ø—Ä–∏–∑)\"",
        reply_markup=ckb(user_id))
    await state.set_state(AdminPanelStates.waiting_for_promo_data)


@dp.callback_query(F.data.startswith("admins_unban:"))
async def handle_callback_admin_ban(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await callback.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")

    await callback.message.edit_text(
        f"{await gsname(callback.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å",
        reply_markup=ckb(user_id))
    await state.set_state(AdminPanelStates.waiting_for_id_for_unban)


@dp.message(AdminPanelStates.waiting_for_id_for_unban)
async def handle_waiting_for_id_for_unban(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    id = msg.text

    data = await load_data(id)
    if not data:
        await state.clear()
        return await msg.reply("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    data = load_banned()
    if int(id) not in data["banned"]:
        return await msg.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")

    data["banned"].remove(int(id))
    save_banned(data)

    chat = await bot.get_chat(id)
    target_name = chat.first_name

    await msg.answer(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name} ({id})")
    append_log(f"{await gsname(msg.from_user.first_name, user_id)} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name} ({id})",
               add_timestamp=True)
    await state.clear()


@dp.callback_query(F.data.startswith("admin_ban:"))
async def handle_callback_admin_ban(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await callback.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")

    await callback.message.edit_text(
        f"{await gsname(callback.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–±–∞–Ω–∏—Ç—å",
        reply_markup=ckb(user_id))
    await state.set_state(AdminPanelStates.waiting_for_id_for_ban)


@dp.message(AdminPanelStates.waiting_for_id_for_ban)
async def handle_waiting_for_id_for_ban(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    id = msg.text

    data = await load_data(id)
    if not data:
        await state.clear()
        return await msg.reply("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    if int(id) in SPECIAL_ADMINS:
        return await msg.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–±–∞–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞!")

    data = load_banned()
    if id in data["banned"]:
        return await msg.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")

    data["banned"].append(int(id))
    save_banned(data)

    chat = await bot.get_chat(id)
    target_name = chat.first_name

    await msg.answer(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name} ({id})")
    append_log(f"{await gsname(msg.from_user.first_name, user_id)} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name} ({id})",
               add_timestamp=True)
    await state.clear()


@dp.callback_query(F.data.startswith("add_admins_mdrops:"))
async def handle_callback_add_admins_mdrops(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await callback.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")
    if int(caller_id) not in SPECIAL_ADMINS:
        return await callback.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!")

    await callback.message.edit_text(
        f"{await gsname(callback.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ mDrops –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—à—å –Ω–∞—á–∏—Å–ª–∏—Ç—å",
        reply_markup=ckb(user_id))
    await state.set_state(AdminPanelStates.waiting_for_mdrops_amount)


@dp.message(AdminPanelStates.waiting_for_mdrops_amount)
async def handle_waiting_for_mdrops_amount(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    amount_text = msg.text
    amount = 0

    if "–∫" in amount_text:
        amount = parse_bet_input(amount_text)
    elif amount_text.isdigit():
        try:
            amount = int(amount_text)
        except Exception:
            return await msg.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", reply_markup=ckb(user_id))
    else:
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", reply_markup=ckb(user_id))

    await state.update_data(amount=amount)

    await msg.reply(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã –Ω–∞—á–∏—Å–ª—è–µ—à—å {amount} mDrops, –≤–≤–µ–¥–∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    await state.set_state(AdminPanelStates.waiting_for_id_mdrops_add)


@dp.message(AdminPanelStates.waiting_for_id_mdrops_add)
async def handle_waiting_for_mdrops_amount(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    id = msg.text

    data = await load_data(id)
    if not data:
        await state.clear()
        return await msg.reply("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    data_state = await state.get_data()
    amount = data_state.get("amount")

    data["coins"] += amount
    await save_data(id, data)

    chat = await bot.get_chat(id)
    target_name = chat.first_name

    await msg.answer(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª {amount} mDrops –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} ({id})")
    append_log(
        f"{await gsname(msg.from_user.first_name, user_id)} —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª {amount} mDrops –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} ({id})",
        add_timestamp=True)
    await state.clear()


@dp.callback_query(F.data.startswith("add_admins_ggs:"))
async def handle_callback_add_admins_mdrops(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data
    caller_id = data.split(":")[1]

    if int(caller_id) != int(user_id):
        return await callback.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ!")
    if int(caller_id) not in SPECIAL_ADMINS:
        return await callback.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!")

    await callback.message.edit_text(
        f"{await gsname(callback.from_user.first_name, user_id)}, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GGs –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—à—å –Ω–∞—á–∏—Å–ª–∏—Ç—å",
        reply_markup=ckb(user_id))
    await state.set_state(AdminPanelStates.waiting_for_ggs_amount)


@dp.message(AdminPanelStates.waiting_for_ggs_amount)
async def handle_waiting_for_ggs_amount(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    amount_text = msg.text
    amount = 0

    if "–∫" in amount_text:
        amount = parse_bet_input(amount_text)
    elif amount_text.isdigit():
        try:
            amount = int(amount_text)
        except Exception:
            return await msg.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", reply_markup=ckb(user_id))
    else:
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", reply_markup=ckb(user_id))

    await state.update_data(amount=amount)

    await msg.reply(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã –Ω–∞—á–∏—Å–ª—è–µ—à—å {amount} GGs, –≤–≤–µ–¥–∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    await state.set_state(AdminPanelStates.waiting_for_id_ggs_add)


@dp.message(AdminPanelStates.waiting_for_id_ggs_add)
async def handle_waiting_for_ggs_amount(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    id = msg.text

    data = await load_data(id)
    if not data:
        await state.clear()
        return await msg.reply("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    data_state = await state.get_data()
    amount = data_state.get("amount")

    data["GGs"] += amount
    await save_data(id, data)

    chat = await bot.get_chat(id)
    target_name = chat.first_name

    await msg.answer(
        f"{await gsname(msg.from_user.first_name, user_id)}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª {amount} GGs –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} ({id})")
    append_log(
        f"{await gsname(msg.from_user.first_name, user_id)} —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª {amount} GGs –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} ({id})",
        add_timestamp=True)
    await state.clear()


@dp.message(Command("data"))
async def handle_admin_data(message: Message):
    user_id = message.from_user.id

    parts = message.text.strip().lower().split()

    if user_id in gadmins():
        if len(parts) < 2:
            return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/data (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")

        target_id = parts[1]

        data = await load_data(str(target_id))
        await message.answer(str(data))


@dp.message(F.text.startswith("/get"))
async def handle_admin_get(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤: /get <user_id> –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ + –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–¥–µ–ø–æ–∑–∏—Ç, –∫—Ä–µ–¥–∏—Ç, –∫–∞—Ä—Ç–∞).
    """
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    try:
        uid = message.from_user.id
    except Exception:
        return
    if uid not in gadmins():
        return

    parts = (message.text or "").strip().split()
    target_id = None

    # –ø–æ–ª—É—á–∞–µ–º target_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏–∑ reply
    if len(parts) > 1 and parts[1].strip():
        try:
            target_id = int(parts[1].strip())
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get <ID>")
            return
    elif message.reply_to_message and getattr(message.reply_to_message, "from_user", None):
        try:
            target_id = int(message.reply_to_message.from_user.id)
        except Exception:
            target_id = None
    else:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> (–∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
        return

    if target_id is None:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–π–¥–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π)
    if str(target_id) in {"8375492513", "8257726098"}:
        return await message.reply("—Ç–∞ –ø–æ—à–µ–ª —Ç—ã")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω (banned.json –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
    ban_status = "–Ω–µ–∑–∞–±–∞–Ω–µ–Ω"
    try:
        import pathlib, json
        bpath = pathlib.Path("banned.json")
        if bpath.exists():
            with bpath.open(encoding="utf-8") as bf:
                bj = json.load(bf)
            banned_list = bj.get("banned", []) if isinstance(bj, dict) else []
            if int(target_id) in [int(x) for x in banned_list]:
                ban_status = "–∑–∞–±–∞–Ω–µ–Ω"
    except Exception:
        # –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        pass

    # –ø–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ (username/first_name)
    username = None
    first_name = None
    try:
        chat = await bot.get_chat(target_id)
        # Chat –∏–ª–∏ ChatFullInfo ‚Äî —Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è/username –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
        username = getattr(chat, "username", None)
        first_name = getattr(chat, "first_name", None) or getattr(chat, "title", None)
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –æ—Å—Ç–∞–≤–∏–º None
        pass

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    data = await load_data(str(target_id))
    if not data:
        return await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    # –ë–∞–ª–∞–Ω—Å –∏ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–±–µ–∑ KeyError)
    coins = data.get("coins", 0)
    ggs = int(data.get("GGs", 0)) if data.get("GGs") is not None else 0
    won = data.get("won_coins", 0)
    lost = data.get("lost_coins", 0)
    status = get_status(data.get("status"))
    clan = data.get("clan") if data.get("clan") else "–Ω–µ—Ç—É"
    total_donated = data.get("total_donated", "–Ω–µ –¥–æ–Ω–∞—Ç–∏–ª")

    # –ë–∞–Ω–∫: –¥–µ–ø–æ–∑–∏—Ç
    deposit_text = "üîí –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞"
    percent_deposit = "‚Äî"
    end_deposit = "‚Äî"
    try:
        bank = data.get("bank", {}) or {}
        deposit = bank.get("deposit")
        if deposit:
            amt = float(deposit.get("amount", 0))
            percent = float(deposit.get("percent", 0))
            # –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            end_iso = deposit.get("end")
            end_deposit = end_iso or "‚Äî"
            # —Ä–∞—Å—á—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            profit = amt * (percent / 100.0)
            deposit_text = f"{format_balance(amt)} mDrops"
            percent_deposit = f"{percent}%"
    except Exception:
        deposit_text = "üîí –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞"
        percent_deposit = "‚Äî"
        end_deposit = "‚Äî"

    # –ë–∞–Ω–∫: –∫—Ä–µ–¥–∏—Ç
    credit_text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞"
    credit_start = "‚Äî"
    try:
        credit = bank.get("credit") if bank else None
        if credit:
            c_amt = float(credit.get("amount", 0))
            credit_text = f"{format_balance(c_amt)} mDrops"
            credit_start = credit.get("start", "‚Äî")
    except Exception:
        credit_text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞"
        credit_start = "‚Äî"

    # –ö–∞—Ä—Ç–∞: —É –Ω–∞—Å 1 –∫–∞—Ä—Ç–∞ –º–∞–∫—Å–∏–º—É–º ‚Äî –ø–æ–ª—É—á–∏–º –µ—ë (–µ—Å–ª–∏ –µ—Å—Ç—å) —á–µ—Ä–µ–∑ list_cards_by_owner
    card_info_lines = []
    try:
        cards = await list_cards_by_owner(str(target_id))  # dict card_number->data
        if cards:
            # –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É (—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ)
            card_number = list(cards.keys())[0]
            card = await get_card(card_number)
            if card:
                cname = card.get("name") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                cbalance = float(card.get("balance", 0))
                cblocked = bool(card.get("blocked"))
                created_at = card.get("created_at") or "‚Äî"
                # –º–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
                try:
                    masked = f"<tg-spoiler>{str(card_number)[-16:-12]} {str(card_number)[-12:-8]} {str(card_number)[-8:-4]}</tg-spoiler> {str(card_number)[-4:]}"
                except Exception:
                    masked = str(card_number)
                card_info_lines.append(f"–ù–æ–º–µ—Ä: {masked}")
                card_info_lines.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {cname}")
                card_info_lines.append(f"–ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã: <b>{format_balance(cbalance)}</b> mDrops")
                card_info_lines.append(f"–°—Ç–∞—Ç—É—Å: {'–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê' if cblocked else '–ê–∫—Ç–∏–≤–Ω–∞'}")
                card_info_lines.append(f"–°–æ–∑–¥–∞–Ω–∞: {created_at}")
                # –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞?
                default_card = bank.get("default_card") if bank else None
                if default_card and default_card == card_number:
                    card_info_lines.append("–≠—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                card_info_lines.append("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î)")
        else:
            card_info_lines.append("–ö–∞—Ä—Ç –Ω–µ—Ç")
    except Exception:
        card_info_lines.append("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ f-—Å—Ç—Ä–æ–∫–∏ —Å –∫–∞–≤—ã—á–∫–∞–º–∏)
    header = f"üÜî {html.code(str(target_id))} / {('@' + username) if username else (first_name or str(target_id))}\n\n"
    body_lines = [
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(coins)} mDrops",
        f"üíé GGs: {ggs}",
        f"üìà –í—ã–∏–≥—Ä–∞–Ω–æ: {format_balance(won)} mDrops",
        f"üóø –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {format_balance(lost)} mDrops",
        f"‚ö°Ô∏è –°—Ç–∞—Ç—É—Å: {status}",
        f"üõ° –ö–ª–∞–Ω: {clan}",
        "",
        f"‚õîÔ∏è –ë–∞–Ω: {ban_status}",
        "",
        "üè¶ –ë–∞–Ω–∫ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è):",
        f" ‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: {deposit_text}",
        f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {percent_deposit}",
        f"   –ö–æ–Ω–µ—Ü: {end_deposit}",
        f" ‚Ä¢ –ö—Ä–µ–¥–∏—Ç: {credit_text}",
        f"   –ù–∞—á–∞–ª–æ: {credit_start}",
        "",
        f"{html.bold('–ö–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')}"
    ]

    # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ –∫–∞—Ä—Ç—É
    body_lines.extend(card_info_lines)
    body_lines.append("")
    body_lines.append(f"{html.bold('–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞:')} {total_donated} ‚≠êÔ∏è")

    final_text = header + "\n".join(body_lines)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (HTML)
    try:
        await message.reply(final_text, parse_mode="HTML")
    except Exception:
        # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–ø–∞—Ä—Å–∏–Ω–≥ HTML —É–ø–∞–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –±–µ–∑ parse_mode
        await message.reply(final_text)


@dp.message(Command("clear_b"))
async def admin_clear_b(message: Message):
    if message.from_user.id not in gadmins():
        return

    parts = (message.text or "").strip().split(maxsplit=1)
    target_id = None

    if len(parts) > 1 and parts[1].strip():
        try:
            target_id = int(parts[1].strip())
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clear_b <ID>")
            return
    elif message.reply_to_message and message.reply_to_message.from_user:
        target_id = int(message.reply_to_message.from_user.id)
    else:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clear_b <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> (–∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
        return

    uid_str = str(target_id)
    data = await load_data(uid_str)
    if data is None:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    data["coins"] = 0
    await save_data(uid_str, data)

    first_name = None
    try:
        chat = await message.bot.get_chat(target_id)
        first_name = getattr(chat, "first_name", None) or getattr(chat, "username", None)
    except Exception:
        first_name = None

    actor = f"@{message.from_user.username}" if getattr(message.from_user, "username", None) else str(
        message.from_user.id)
    target_display = f"{first_name} ({target_id})" if first_name else str(target_id)

    await send_log(f"–ê–¥–º–∏–Ω {actor} ({message.from_user.id}) –æ–±–Ω—É–ª–∏–ª –≤—Å–µ mDrops –∏–≥—Ä–æ–∫–∞ {target_display}")
    await message.answer(f"‚úÖ –í—Å–µ mDrops –∏–≥—Ä–æ–∫–∞ {target_display} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω—ã.")


@dp.message(Command("clear"))
async def admin_clear(message: Message):
    user_id = str(message.from_user.id)

    if int(user_id) not in gadmins():
        return
    if int(user_id) not in SPECIAL_ADMINS:
        return await message.answer("–¢—ã –Ω–µ –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é!")

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clear {ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}")
        return

    target_id = args[1]
    data = await load_data(target_id)
    if data is None:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—á–∏—â–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–ª—ñ–≤
    data = {
        "coins": 0,
        "GGs": 0,
        "lost_coins": 0,
        "won_coins": 0,
        "status": 0
    }

    await save_data(target_id, data)

    chat = await bot.get_chat(target_id)
    first_name = chat.first_name

    await send_log(
        f"–ê–¥–º–∏–Ω @{message.from_user.username} ({message.from_user.id}) –æ—á–∏—Å—Ç–∏—Å–ª –≤—Å—é –ë–î –∏–≥—Ä–æ–∫–∞ {first_name} ({target_id})")
    await message.answer(f"‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")


@dp.message(Command("statuses_info"))
async def handle_statuses_info(message: Message):
    user_id = message.from_user.id

    if not user_id in gadmins():
        return

    statuses_str = " ‚Ä¢ "
    for i in range(len(STATUSES)):
        statuses_str = statuses_str + f"{STATUSES[i]} ({i}) \n ‚Ä¢ "

    statuses_str = statuses_str[:len(statuses_str) - 2]

    special_statuses_str = "\n‚≠êÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n ‚Ä¢ "
    for i in range(len(get_unique_statuses())):
        special_statuses_str = special_statuses_str + f"{get_unique_statuses()[i]} (999{i}) \n ‚Ä¢ "

    special_statuses_str = special_statuses_str[:len(special_statuses_str) - 2]

    await message.answer(f"üí° –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã:\n{statuses_str} {special_statuses_str}")


@dp.message(F.text.lower().startswith("/istatus"))
async def handle_new_status(message: Message):
    user_id = message.from_user.id

    if not user_id in gadmins():
        return
    recipient_id = str(message.reply_to_message.from_user.id)
    recipient_data = await load_data(recipient_id)
    if not recipient_data:
        await create_user_data(recipient_id)
        recipient_data = await load_data(recipient_id)

    text = message.text.strip().lower()
    numb = text.split()[1]

    recipient_data["status"] = int(numb)
    await save_data(recipient_id, recipient_data)
    await send_log(
        f"–ê–¥–º–∏–Ω {html.link(await gsname(message.from_user.first_name, message.from_user.id), f"t.me/{message.from_user.username}")} –≤—ã–¥–∞–ª —Å—Ç–∞—Ç—É—Å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {int(numb)} ({STATUSES[int(numb)]})")

    await message.answer(f"–°—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä {numb} ({STATUSES[int(numb)]}) –≤—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {recipient_id}")


@dp.message(F.text.lower().startswith("/new_promo"))
async def handle_new_promo(message: Message):
    if message.from_user.id not in gadmins():
        return

    # —Ä–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç
    parts = message.text.strip().split()

    if len(parts) != 3:
        return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /new_promo <–Ω–∞–∑–≤–∞–Ω–∏–µ> <reward>")

    name = parts[1]
    try:
        reward = float(parts[2])  # –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ int, —è–∫—â–æ –∑–∞–≤–∂–¥–∏ —Ü—ñ–ª–µ
    except ValueError:
        return await message.reply("‚ùå Reward –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    import sqlite3
    conn = sqlite3.connect("data.db")
    cursor = conn.cursor()

    try:
        cursor.execute(
            "INSERT INTO promos (name, reward) VALUES (?, ?)",
            (name, reward)
        )
        conn.commit()
    except sqlite3.IntegrityError:
        return await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–º–æ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        conn.close()
    await send_log(
        f"–ê–¥–º–∏–Ω @{message.from_user.username} ({message.from_user.id}) —Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ \"{name}\" —Å –ø—Ä–∏–∑–æ–º {reward} mDrops")
    await message.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> —Å–æ–∑–¥–∞–Ω!\nüéÅ –ü—Ä–∏–∑: {reward}")


@dp.message(F.text.lower() == "/manual_save_db")
async def handle_manual_save_db(msg: Message):
    user_id = msg.from_user.id
    name = msg.from_user.first_name

    if not user_id in SPECIAL_ADMINS:
        return
    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.execute("PRAGMA wal_checkpoint(FULL);")
            conn.commit()

        append_log(f"{await gsname(name, user_id)} –≤—Ä—É—á–Ω—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–ª –ë–î!", add_timestamp=True)
    except Exception as e:
        return await handle_error(msg.from_user.username, e, user_id, 888)

    await msg.reply(f"{await gsname(name, user_id)}, —Ä—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ë–î –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")


@dp.message(F.text.lower().startswith("/hhh"))
async def hhh_command(message: Message):
    if int(bot.id) == 8257726098:
        if not message.from_user.id in SPECIAL_ADMINS:
            return

    if not message.reply_to_message:
        await message.answer("‚ùó –û—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å mDrops.")
        return

    recipient_id = str(message.reply_to_message.from_user.id)
    recipient_data = await load_data(recipient_id)
    if not recipient_data:
        await create_user_data(recipient_id)
        recipient_data = await load_data(recipient_id)

    text = message.text.strip().lower()
    amount_text = text.split()[1]

    amount = 0

    if amount_text in ["–≤—Å–µ", "–≤–±"]:
        amount = 10000  # or another value representing "all money"
    else:
        try:
            amount = parse_bet_input(amount_text)
            amount = int(amount)

            if amount < 0:
                raise ValueError
        except ValueError:
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
            return

    recipient_data["coins"] += amount
    await save_data(recipient_id, recipient_data)

    chat = await bot.get_chat(recipient_id)
    recipient_name = chat.first_name

    await send_log(
        f"–ê–¥–º–∏–Ω @{message.from_user.username} ({message.from_user.id}) –Ω–∞—á–∏—Å–ª–∏–ª {format_balance(amount)} mDrops {recipient_name} ({recipient_id})")
    await message.answer(
        f"üí∏ {format_balance(amount)} mDrops –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {await gsname(recipient_name, message.from_user.id)}.")


@dp.message(F.text.lower().startswith("/ggg"))
async def ggg_command(message: Message):
    if not message.from_user.id in SPECIAL_ADMINS:
        return

    if not message.reply_to_message:
        await message.answer("‚ùó –û—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å GGs.")
        return

    recipient_id = str(message.reply_to_message.from_user.id)
    recipient_data = await load_data(recipient_id)
    if not recipient_data:
        await create_user_data(recipient_id)
        recipient_data = await load_data(recipient_id)

    text = message.text.strip().lower()
    amount_text = text.split()[1]

    amount = 0

    if amount_text in ["–≤—Å–µ", "–≤–±"]:
        amount = 10  # or another value representing "all money"
    else:
        try:
            amount = parse_bet_input(amount_text)
            amount = int(amount)

            if amount < 0:
                raise ValueError
        except ValueError:
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
            return

    recipient_data["GGs"] += amount
    await save_data(recipient_id, recipient_data)

    recipient_name = message.reply_to_message.from_user.first_name
    await send_log(
        f"–ê–¥–º–∏–Ω @{message.from_user.username} ({message.from_user.id}) –Ω–∞—á–∏—Å–ª–∏–ª {format_balance(amount)} GGs {recipient_name} ({recipient_id})")
    await message.answer(f"üí∏ {format_balance(amount)} GGs –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {await gsname(recipient_name)}.")


BANNED_FILE = "banned.json"


def load_banned():
    try:
        with open(BANNED_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if "banned" not in data:
                data["banned"] = []
            return data
    except FileNotFoundError:
        return {"banned": []}


def save_banned(data):
    with open(BANNED_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


@dp.message(Command("ban"))
async def ban_command(message: Message):
    if message.from_user.id not in gadmins():
        return

    parts = message.text.split()
    if len(parts) < 2 and not message.reply_to_message:
        return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    # –Ø–∫—â–æ —î —Ä–µ–ø–ª–∞–π ‚Äî –±–∞–Ω–∏–º–æ —Ç–æ–≥–æ, –Ω–∞ –∫–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if message.reply_to_message:
        target_id = message.reply_to_message.from_user.id
    else:
        try:
            target_id = int(parts[1])
        except ValueError:
            return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id.")

    if target_id in SPECIAL_ADMINS:
        return await message.answer("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")

    data = load_banned()
    if target_id in data["banned"]:
        return await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")

    data["banned"].append(target_id)
    save_banned(data)

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–Ω.")


@dp.message(Command("unban"))
async def unban_command(message: Message):
    if message.from_user.id not in gadmins():
        return

    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")

    try:
        target_id = int(parts[1])
    except ValueError:
        return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id.")

    data = load_banned()
    if target_id not in data["banned"]:
        return await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")

    data["banned"].remove(target_id)
    save_banned(data)

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")


def _clear_all_deposits_sync(db_path: str):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –≤–∏–∫–æ–Ω—É—î –≤—Å—ñ –±–ª–æ–∫—É—é—á—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ sqlite.
    –ü–æ–≤–µ—Ä—Ç–∞—î (modified_count, modified_uids_list).
    """
    modified = []
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    try:
        cur = conn.cursor()
        # –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ —Ç–∞–±–ª–∏—Ü—è —ñ—Å–Ω—É—î
        cur.execute("CREATE TABLE IF NOT EXISTS json_data (key TEXT PRIMARY KEY, value TEXT)")
        cur.execute("SELECT key, value FROM json_data")
        rows = cur.fetchall()

        for row in rows:
            key = row["key"]
            try:
                data = json.loads(row["value"]) if row["value"] else {}
            except Exception:
                # —è–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                continue

            bank = data.get("bank")
            if isinstance(bank, dict) and "deposit" in bank:
                # –≤–∏–¥–∞–ª—è—î–º–æ –¥–µ–ø–æ–∑–∏—Ç
                del bank["deposit"]
                # —è–∫—â–æ bank —Å—Ç–∞–≤ –ø—É—Å—Ç–∏–º, –º–æ–∂–Ω–∞ –π–æ–≥–æ –ª–∏—à–∏—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏; —Ç—É—Ç –ª–∏—à–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π dict
                data["bank"] = bank

                # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–∞–¥ JSON
                new_json = json.dumps(data, ensure_ascii=False)
                cur.execute("UPDATE json_data SET value = ? WHERE key = ?", (new_json, key))
                modified.append(key)

        conn.commit()
        return len(modified), modified
    finally:
        conn.close()


# –§–∞–π–ª —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
ADMIN_FILE = "admins_data.json"
ADMIN_FILE_LOCK = __import__("asyncio").Lock()


async def _load_admins():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ admin ID (int). –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç []."""
    try:
        with open(ADMIN_FILE, "r", encoding="utf-8") as f:
            data = __import__("json").load(f)
            admins = data.get("admins", [])
            return [int(x) for x in admins]
    except FileNotFoundError:
        return []
    except Exception:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []


async def _save_admins(admins):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ admin ID –≤ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"admins":[...]} (–∞—Ç–æ–º–∞—Ä–Ω–æ)."""
    data = {"admins": [int(x) for x in admins]}
    tmp = ADMIN_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        __import__("json").dump(data, f, ensure_ascii=False, indent=2)
    __import__("os").replace(tmp, ADMIN_FILE)


# –•–µ–Ω–¥–ª–µ—Ä /add_admin
@dp.message(F.text.startswith("/add_admin"))
async def add_admin_handler(message: Message):
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <ID>
    –î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –≤ admins_data.json.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ (—á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞).
    –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ —É–∂–µ –µ—Å—Ç—å –∞–¥–º–∏–Ω—ã ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥–º–∏–Ω.
    """
    try:
        parts = (message.text or "").strip().split()
        if len(parts) != 2:
            return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <ID>\n–ü—Ä–∏–º–µ—Ä: /add_admin 5143424934")

        try:
            new_id = int(parts[1])
        except ValueError:
            return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID (–Ω–∞–ø—Ä–∏–º–µ—Ä 5143424934).")

        caller_id = int(message.from_user.id)

        async with ADMIN_FILE_LOCK:
            admins = await _load_admins()

            # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–¥–º–∏–Ω—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            if admins and caller_id not in admins:
                return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            if new_id in admins:
                return await message.reply(f"ID {new_id} —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")

            admins.append(new_id)
            await _save_admins(admins)

        return await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {new_id}")

    except Exception as e:
        try:
            await message.reply("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception:
            pass
        raise


# –•–µ–Ω–¥–ª–µ—Ä /remove_admin
@dp.message(F.text.startswith("/remove_admin"))
async def remove_admin_handler(message: Message):
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin <ID>
    –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –∏–∑ admins_data.json.
    –£–¥–∞–ª—è—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥–º–∏–Ω. –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∞.
    """
    try:
        parts = (message.text or "").strip().split()
        if len(parts) != 2:
            return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin <ID>\n–ü—Ä–∏–º–µ—Ä: /remove_admin 5143424934")

        try:
            rem_id = int(parts[1])
        except ValueError:
            return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID (–Ω–∞–ø—Ä–∏–º–µ—Ä 5143424934).")

        caller_id = int(message.from_user.id)

        async with ADMIN_FILE_LOCK:
            admins = await _load_admins()

            if not admins:
                return await message.reply("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç ‚Äî –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")

            if caller_id not in admins:
                return await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            if rem_id not in admins:
                return await message.reply(f"ID {rem_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

            # –ó–∞–ø—Ä–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if len(admins) == 1 and admins[0] == rem_id:
                return await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

            admins = [a for a in admins if a != rem_id]
            await _save_admins(admins)

        return await message.reply(f"‚úÖ –£–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {rem_id}")

    except Exception as e:
        try:
            await message.reply("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception:
            pass
        raise


@dp.message(Command("clear_deposits"))
async def cmd_clear_deposits(message: types.Message):
    """
    /clear_deposits confirm  - –≤–∏–¥–∞–ª–∏—Ç—å —É—Å—ñ –¥–µ–ø–æ–∑–∏—Ç–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    –Ø–∫—â–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –±–µ–∑ 'confirm' ‚Äî –±–æ—Ç –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é.
    """
    uid = message.from_user.id
    if uid not in SPECIAL_ADMINS:
        return

    args = message.text.split(" ")

    if len(args) < 2:
        return await message.reply(
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤.\n"
            "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `confirm`:\n\n"
            "/clear_deposits confirm"
        )

    # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ä—Ç
    msg = await message.reply("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –¥–µ–ø–æ–∑–∏—Ç–æ–≤...")

    # –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–ª–æ–∫—É—é—á—É —Ä–æ–±–æ—Ç—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    loop = asyncio.get_event_loop()
    try:
        modified_count, modified_uids = await loop.run_in_executor(None, _clear_all_deposits_sync, DB_PATH)
    except Exception as e:
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return

    # –ª–æ–≥ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    try:
        append_log(f"ADMIN {message.from_user.full_name} ({uid}) cleared deposits for {modified_count} users.",
                   add_timestamp=True)
    except Exception:
        pass

    await msg.edit_text(f"‚úÖ –û—á–∏—â–µ–Ω—ã –¥–µ–ø–æ–∑–∏—Ç—ã —É {modified_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


def _reset_coffres_rating_in_clans_sync(db_path: str):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º json_data, –∏—â–µ—Ç –∫–ª—é—á 'clans' (dict –∏–ª–∏ list)
    –∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞–Ω–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç coffres = 0 –∏ rating = 0 (–µ—Å–ª–∏ –µ—Å—Ç—å).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö, —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–ª—é—á–µ–π).
    """

    def process_clan_obj(clan_obj):
        """–û–±–Ω—É–ª—è–µ—Ç coffres –∏ rating –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å–ø–∏—Å–∫–∞."""
        changed = False
        if isinstance(clan_obj, dict):
            if "coffres" in clan_obj:
                clan_obj["coffres"] = 0
                changed = True
            if "rating" in clan_obj:
                clan_obj["rating"] = 0
                changed = True
            # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            for k, v in list(clan_obj.items()):
                if isinstance(v, (dict, list)):
                    sub_changed = process_clan_obj(v)
                    changed = changed or sub_changed
        elif isinstance(clan_obj, list):
            for item in clan_obj:
                if isinstance(item, (dict, list)):
                    sub_changed = process_clan_obj(item)
                    changed = changed or sub_changed
        return changed

    modified_keys = []
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    try:
        cur = conn.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS json_data (key TEXT PRIMARY KEY, value TEXT)")
        cur.execute("SELECT key, value FROM json_data")
        rows = cur.fetchall()

        for row in rows:
            key = row["key"]
            try:
                data = json.loads(row["value"]) if row["value"] else {}
            except Exception:
                continue

            modified = False

            # –µ—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª—é—á "clans"
            if isinstance(data, dict) and "clans" in data:
                clans_obj = data["clans"]
                if isinstance(clans_obj, (dict, list)):
                    if process_clan_obj(clans_obj):
                        modified = True

            # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤—Å–µ "clans" –Ω–∞ –ª—é–±–æ–º —É—Ä–æ–≤–Ω–µ
            def recurse_find_and_process(obj):
                nonlocal modified
                if isinstance(obj, dict):
                    for k, v in obj.items():
                        if k == "clans" and isinstance(v, (dict, list)):
                            if process_clan_obj(v):
                                modified = True
                        elif isinstance(v, (dict, list)):
                            recurse_find_and_process(v)
                elif isinstance(obj, list):
                    for item in obj:
                        if isinstance(item, (dict, list)):
                            recurse_find_and_process(item)

            recurse_find_and_process(data)

            if modified:
                new_json = json.dumps(data, ensure_ascii=False)
                cur.execute("UPDATE json_data SET value = ? WHERE key = ?", (new_json, key))
                modified_keys.append(key)

        conn.commit()
        return len(modified_keys), modified_keys[:50]
    finally:
        conn.close()


@dp.message(Command("reset_clans_items"))
async def cmd_reset_clans_items(message: types.Message):
    """
    /reset_clans_items confirm  - –æ–±–Ω—É–ª—è–µ—Ç coffres –∏ rating –≤ –∫–ª–∞–Ω–∞—Ö.
    –ï—Å–ª–∏ –±–µ–∑ confirm ‚Äî –≤—ã–¥–∞—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
    """
    uid = message.from_user.id
    if uid not in SPECIAL_ADMINS:
        return await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    args = message.text.split(" ")
    if len(args) < 2:
        return await message.reply(
            "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω—É–ª–∏—Ç –ø–æ–ª—è `coffres` –∏ `rating` –≤–æ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–∞—Ö `clans`.\n"
            "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –≤–≤–µ–¥–∏:\n\n"
            "/reset_clans_items confirm"
        )

    msg = await message.reply("‚è≥ –ò–¥—ë—Ç –æ–±–Ω—É–ª–µ–Ω–∏–µ coffres –∏ rating –≤ clans...")

    loop = asyncio.get_event_loop()
    try:
        modified_count, sample_keys = await loop.run_in_executor(None, _reset_coffres_rating_in_clans_sync, DB_PATH)
    except Exception as e:
        await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        return

    try:
        append_log(
            f"ADMIN {message.from_user.full_name} ({uid}) reset coffres/rating –≤ clans —É {modified_count} –∑–∞–ø–∏—Å–µ–π.",
            add_timestamp=True)
    except Exception:
        pass

    reply_text = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {modified_count}."
    if sample_keys:
        reply_text += f"\n–ü—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–¥–æ 50):\n" + ", ".join(sample_keys)
    await msg.edit_text(reply_text)


@dp.message(F.text.lower().startswith("/clear_orders"))
async def clear_exchange_orders_request(message: Message):
    try:
        user_id = int(message.from_user.id)
        if user_id not in SPECIAL_ADMINS:
            return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É", callback_data=f"confirm_clear_orders:{user_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_orders")
            ]
        ])
        await message.reply(
            "‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É `exchange_orders` –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=kb
        )
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 201)


# Callback: –æ—Ç–º–µ–Ω–∞
@dp.callback_query(F.data == "cancel_clear_orders")
async def cancel_clear_orders(callback: CallbackQuery):
    try:
        await callback.answer("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)
        try:
            await callback.message.edit_text("‚ùé –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except:
            pass
    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 202)


# Callback: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
@dp.callback_query(F.data.startswith("confirm_clear_orders"))
async def confirm_clear_orders(callback: CallbackQuery):
    try:
        parts = callback.data.split(":")
        if len(parts) != 2:
            return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

        requester_id = int(parts[1])
        user_id = int(callback.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if user_id not in SPECIAL_ADMINS or user_id != requester_id:
            return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é.", show_alert=True)

        await callback.answer("–í—ã–ø–æ–ª–Ω—è—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã...", show_alert=False)

        deleted_count = 0
        try:
            conn = sqlite3.connect(DB_PATH)
            cur = conn.cursor()

            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cur.execute("SELECT COUNT(*) FROM exchange_orders")
            row = cur.fetchone()
            total_before = int(row[0]) if row else 0

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            cur.execute("DELETE FROM exchange_orders")
            conn.commit()

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ
            cur.execute("VACUUM")
            conn.commit()

            deleted_count = total_before
        except sqlite3.Error as db_err:
            await handle_error(callback.from_user.username, db_err, callback.from_user.id, 203)
            try:
                await callback.message.edit_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {db_err}")
            except:
                pass
            return
        finally:
            try:
                cur.close()
                conn.close()
            except:
                pass

        msg = f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ `exchange_orders` –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}."
        try:
            await callback.message.edit_text(msg)
        except:
            await callback.answer(msg, show_alert=True)

        # –õ–æ–≥ –∞–¥–º–∏–Ω–∞–º
        try:
            await send_log(
                f"[ADMIN] @{callback.from_user.username} ({user_id}) –æ—á–∏—Å—Ç–∏–ª —Ç–∞–±–ª–∏—Ü—É exchange_orders. –£–¥–∞–ª–µ–Ω–æ: {deleted_count}.")
        except:
            pass

    except Exception as e:
        await handle_error(callback.from_user.username, e, callback.from_user.id, 204)
        await callback.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ.", show_alert=True)


DELAY_BETWEEN = 0.06  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫ rate limit)


@dp.message(F.text.startswith("/rass"))
async def rass_handler(message: types.Message):
    sender_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if sender_id not in SPECIAL_ADMINS:
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç: /rass –¢–ï–ö–°–¢_–†–ê–°–°–´–õ–ö–ò
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rass –¢–ï–ö–°–¢_–†–ê–°–°–´–õ–ö–ò")

    broadcast_text = parts[1].strip()

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ users –∏ json_data
    recipients = set()
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            # –¢–∞–±–ª–∏—Ü–∞ users (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try:
                cur.execute("SELECT id FROM users")
                for row in cur.fetchall():
                    if row and row[0] is not None:
                        recipients.add(str(row[0]))
            except Exception:
                # –¢–∞–±–ª–∏—Ü—ã users –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                pass

            # json_data keys (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
            try:
                cur.execute("CREATE TABLE IF NOT EXISTS json_data (key TEXT PRIMARY KEY, value TEXT)")
                cur.execute("SELECT key FROM json_data")
                for row in cur.fetchall():
                    if row and row[0] is not None:
                        recipients.add(str(row[0]))
            except Exception:
                pass
    except Exception as e:
        return await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î: {e}")

    if not recipients:
        return await message.reply("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

    await message.reply(f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è: {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –ñ–¥–∏—Ç–µ –æ—Ç—á—ë—Ç–∞...")

    sent = 0
    failed = []

    for uid_str in recipients:
        try:
            uid = int(uid_str)
        except Exception:
            failed.append((uid_str, "invalid id"))
            continue

        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ
        # if uid == sender_id:
        #     continue

        try:
            await bot.send_message(uid, broadcast_text)
            sent += 1
        except Exception as e:
            failed.append((uid_str, str(e)))
        await asyncio.sleep(DELAY_BETWEEN)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç (–ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫)
    report = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {len(failed)}"
    if failed:
        sample = failed[:10]
        report += "\n\n–ü–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏:\n"
        for uid_err, err in sample:
            report += f"- {uid_err}: {err}\n"
        if len(failed) > 10:
            report += f"... –µ—â—ë {len(failed) - 10} –æ—à–∏–±–æ–∫."

    await message.reply(report)


# @dp.message(lambda message: message.photo)
async def handle_photo(message: Message):
    """
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ç–æ.
    Telegram –∑–∞–≤–∂–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—î –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ñ–æ—Ç–æ –∑ —Ä—ñ–∑–Ω–æ—é —Ä–æ–∑–¥—ñ–ª—å–Ω—ñ—Å—Ç—é,
    —Ç–æ–º—É –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—î (–Ω–∞–π–±—ñ–ª—å—à–µ).
    """
    if message.from_user.id not in SPECIAL_ADMINS:
        return
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ PhotoSize
    photos = message.photo

    # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—î (–Ω–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å)
    largest_photo = photos[-1]

    # file_id –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–∞–º–µ –≤—ñ–¥ PhotoSize
    file_id = largest_photo.file_id

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–∑–∞–¥
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ!\n"
        f"–ï–≥–æ <b>file_id</b>:\n<code>{file_id}</code>",
        parse_mode="HTML"
    )


# @dp.message(F.entities)
async def get_custom_emoji_id(message: Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –∞–¥–º—ñ–Ω
    if message.from_user.id not in SPECIAL_ADMINS:
        return  # —ñ–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∞–¥–º—ñ–Ω—ñ–≤

    found = False
    for entity in message.entities:
        if entity.type == "custom_emoji":
            emoji_id = entity.custom_emoji_id
            await message.reply(
                f"üÜî Custom Emoji ID:\n<code>{emoji_id}</code>\n\n"
                f"–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n<code>{'{html.custom_emoji(\"' + emoji_id + '\")}'}</code>"
            )
            found = True
    if not found:
        await message.reply("‚ùå –£ —Ü—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –Ω–µ–º–∞—î –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –µ–º–æ–¥–∑—ñ.")


async def periodic_checkpoint(skip=False):
    while True:
        if skip:
            await asyncio.sleep(120)  # —á–µ–∫–∞—Ç–∏ 2 —Ö–≤
        else:
            await asyncio.sleep(1)  # —á–µ–∫–∞—Ç–∏ —Å —Å–µ–∫
        try:
            with sqlite3.connect(DB_PATH) as conn:
                conn.execute("PRAGMA wal_checkpoint(FULL);")
                conn.commit()
        except Exception as e:
            await send_log(f"‚ùå Error checkpoint: {e}")


def ensure_qs_file():
    """
    –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ qs.json —ñ—Å–Ω—É—î ‚Äî —è–∫—â–æ –Ω—ñ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑ DEFAULT_UNIQUE_STATUSES.
    –§–∞–π–ª –º–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {"UNIQUE_STATUSES": [ ... ]}
    """
    if not QS_PATH.exists():
        data = {"UNIQUE_STATUSES": DEFAULT_UNIQUE_STATUSES}
        QS_PATH.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")


def load_qs() -> dict:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤–º—ñ—Å—Ç qs.json —è–∫ dict. –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä—é—î –¥–µ—Ñ–æ–ª—Ç —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ.
    """
    ensure_qs_file()
    try:
        text = QS_PATH.read_text(encoding="utf-8")
        return json.loads(text)
    except Exception:
        # –í–∏–ø–∞–¥–æ–∫ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–æ–º
        data = {"UNIQUE_STATUSES": DEFAULT_UNIQUE_STATUSES}
        QS_PATH.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
        return data


def save_qs(data: dict):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î dict –≤ qs.json (–ø–µ—Ä–µ–∑–∞–ø–∏—Å).
    """
    QS_PATH.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")


def get_unique_statuses() -> list:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤ (—Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤).
    –ì–∞—Ä–∞–Ω—Ç—É—î, —â–æ –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è list –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤ json –Ω–µ–º–∞—î –∫–ª—é—á–∞.
    """
    data = load_qs()
    vals = data.get("UNIQUE_STATUSES")
    if isinstance(vals, list):
        # –û—á–∏—â—É—î–º–æ –≤—ñ–¥ –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ —Ä—è–¥–∫—ñ–≤
        return [str(x) for x in vals]
    # —è–∫—â–æ –∫–ª—é—á–∞ –Ω–µ–º–∞—î –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç
    return list(DEFAULT_UNIQUE_STATUSES)


# --- –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É ---
@dp.message(F.text.startswith("/add_unique_status"))
async def cmd_add_status(message: types.Message):
    """
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    /add_status –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞

    –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è SPECIAL_ADMINS.
    """
    sender = message.from_user.id
    if sender not in SPECIAL_ADMINS:
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_status –¢–ï–ö–°–¢_–°–¢–ê–¢–£–°–£")
    new_status = parts[1].strip()

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ
    data = load_qs()
    current = data.get("UNIQUE_STATUSES")
    if not isinstance(current, list):
        current = []

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å (—á—É—Ç–ª–∏–≤–∞ –¥–æ —Ç–æ—á–Ω–æ–≥–æ —Ä—è–¥–∫–∞). –Ø–∫—â–æ —Ç—Ä–µ–±–∞ ‚Äî –º–æ–∂–Ω–∞ normalise.
    if new_status in current:
        return await message.reply(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {new_status}")

    current.append(new_status)
    data["UNIQUE_STATUSES"] = current
    try:
        save_qs(data)
    except Exception as e:
        return await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    await message.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:\n{new_status}\n–í—Å–µ–≥–æ: {len(current)}")


# --- –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤ ---
@dp.message(F.text.startswith("/list_statuses"))
async def cmd_list_statuses(message: types.Message):
    statuses = get_unique_statuses()
    if not statuses:
        return await message.reply("‚ÑπÔ∏è –ù–µ—Ç—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.")
    lines = "\n".join(f"{i + 1}. {s}" for i, s in enumerate(statuses))
    await message.reply(f"üìú –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã ({len(statuses)}):\n{lines}")


@dp.message(F.text.lower().in_(["/gtop", "–∏–¥—Ç–æ–ø", "/gtop@gmegadbot"]))
async def top_players(message: Message, bot: Bot):
    try:
        import time
        now = time.time()

        # —è–∫—â–æ –∫–µ—à —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π -> –≤—ñ–¥–¥–∞—î–º–æ –π–æ–≥–æ
        if now - TOP_CACHE["time"] < CACHE_TTL and TOP_CACHE["text"]:
            await message.answer(TOP_CACHE["text"])
            return

        # –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ–ø—É
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS json_data (
                key TEXT PRIMARY KEY,
                value TEXT
            )
            """)
            cursor.execute("SELECT key, value FROM json_data")
            rows = cursor.fetchall()

        players = []
        for key, value in rows:
            try:
                data = json.loads(value)
                coins = float(data.get("coins", 0))
            except Exception:
                coins = 0.0
            players.append((key, coins))

        players.sort(key=lambda x: x[1], reverse=True)
        top = players[:10]
        total_players = len(players)

        if total_players == 0:
            text = "<b>üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤."
        else:
            lines = ["<b>üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>"]
            for i, (uid, coins) in enumerate(top, 1):
                try:
                    chat = await bot.get_chat(int(uid))
                    name = f"{await gsname(chat.first_name)} ({uid})" or await gsname(chat.username) or f"ID {uid}"
                except Exception:
                    name = f"ID {uid}"

                if i == 1:
                    i = "ü•á"
                elif i == 2:
                    i = "ü•à"
                elif i == 3:
                    i = "ü•â"
                else:
                    i = "üèÖ"
                lines.append(f"{i} | {name} | {format_balance(coins)} mDrops")

            lines.append(f"\n–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players}")
            text = "\n".join(lines)

        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        TOP_CACHE["time"] = now
        TOP_CACHE["text"] = text

        await message.answer(text)
    except Exception as e:
        await handle_error(message.from_user.username, e, message.from_user.id, 109)

@dp.message(Command("gdata"))
async def send_data_db(message: types.Message):
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω
    if message.from_user.id != 8493326566:
        return

    try:
        db_file = FSInputFile("data.db")
        await message.answer_document(db_file, caption="üì¶ –û—Å—å —Ç–≤—ñ–π —Ñ–∞–π–ª data.db")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –§–∞–π–ª data.db –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùó –ü–æ–º–∏–ª–∫–∞: {e}")

# -------------- LAUNCH -------------- #

async def main():
    # threading.Thread(target=webapp.run_flask, daemon=True).start()
    await send_log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.create_task(periodic_checkpoint())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
