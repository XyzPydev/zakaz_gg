import copy
from math import e
import concurrent
from operator import ge, mul
from pyrogram import Client, filters, types, enums, idle
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery, InlineQuery,InlineQueryResultArticle,InputTextMessageContent
from pyrogram.errors import PeerIdInvalid, FloodWait, RPCError
import re
import random
import time
import asyncio
from datetime import datetime, timedelta
import sqlite3
from random import randint, uniform, choice, sample
import os, json
from requests import get
import threading
from functools import wraps
from asyncio import Semaphore
from decimal import Decimal, getcontext
from typing import Optional, Union

getcontext().prec = 50

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ —á–ª–µ–Ω
BOT_TOKEN = "8400887112:AAEoO0gCAc7V5uLExcXURsn7UChXN6itDRU"
API_ID = 17711477
API_HASH = "bcf7bc9e630e4699a4d1db1f474df0c9"
ADMINS = [5775987690, 8493326566]
API_OWNER = [5775987690, 8493326566]

USER_API_ID = "17711477"  
USER_API_HASH = "bcf7bc9e630e4699a4d1db1f474df0c9"

app = Client("osohso", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN, parse_mode=enums.ParseMode.HTML, workers=1)

# –ø–æ–∫–∞–∂–µ–º username –±–æ—Ç–∞
print(app.name)
active_mines_games = {}
DBB = "NewDbb (1).db"

db = sqlite3.connect(DBB)
cursor = db.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã safe_games, –µ—Å–ª–∏ –µ—â—ë 

db.commit()
db.close()

# üé∞ –õ–æ—Ç–µ—Ä–µ—è —Å–æ —Å—Ç–∞–≤–∫–æ–π
LOTTERY_ICONS = ["üçí", "üçã", "üçâ", "‚≠ê", "üíé", "üçÄ"]

farm_devices = {
    "cheap":  {"name": "üíª –î–µ—à–µ–≤–∞—è —Ñ–µ—Ä–º–∞", "base_price": 1_000_000, "income": 50_000},
    "medium": {"name": "üéÆ –°—Ä–µ–¥–Ω—è—è —Ñ–µ—Ä–º–∞", "base_price": 50_000_000, "income": 400_000},
    "high":   {"name": "‚ö° –í—ã—Å–æ–∫–∞—è —Ñ–µ—Ä–º–∞", "base_price": 300_000_000, "income": 3_000_000},
    "top":    {"name": "üè≠ –¢–æ–ø–æ–≤–∞—è —Ñ–µ—Ä–º–∞", "base_price": 2_000_000_000, "income": 25_000_000},
}

#@app.on_message(~filters.user(list(ADMINS_NEW)))
async def handle_non_admin(client: Client, message: Message):
    text = (
        "–í —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã!\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @ferzister (–ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º –ø–∏—Å–∞—Ç—å "
        '<a href="https://t.me/ferzister">—Å—é–¥–∞ [—Ç—ã–∫]</a>)'
    )
    await message.reply_text(text,
                             disable_web_page_preview=True,
                             parse_mode=ParseMode.HTML)

async def is_banned_user(user_id: int) -> bool:
    with open('banned_users.json', 'r') as f:
        banned_users = json.load(f)
    return int(user_id) in banned_users

async def banned_filter(_, __, message: Message) -> bool:
    return await is_banned_user(message.from_user.id)


@app.on_message(filters.group & filters.create(banned_filter))
async def handle_banned(client, message: Message):
    pass

@app.on_message(filters.create(banned_filter))
async def handle_banned(client, message: Message):
    text = (
        "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!\n"
        "–†–∞–∑–±–∞–Ω: 200 ‚≠êÔ∏è"
    )
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω", url="https://t.me/ferzister")]]
    )
    await message.reply(text, reply_markup=kb)



@app.on_message(filters.command("test"), group=16)
async def test(client, message):
    args = message.text.split()
    if len(args) == 1:
        await message.reply("test")
    else:
        txt = " ".join(args[1:])
        await message.reply(txt)

emojis = ["", "üëç", "üòÄ", "ü§Ø", "üòé", "üëΩ", "üëæ", "ü§ñ", "üëª", "üëë", "üé©", "üé∞", "üéÄ", "üêç", "ü¶à"]
emoji_prices = [0, 1000, 25000, 100000, 500000, 2000000, 7500000, 25000000, 100000000, 1000000000, 1000000000000,
                10000000000000, 1e3984, 1e3984, 1e3984]

# ============ QUEST SYSTEM ============
import json
import os

QUESTS_FILE = 'quests.json'

default_quests = [
    {
        "quest_id": 1,
        "quest_name": "–ò–≥—Ä–æ–º–∞–Ω",
        "quest_description": "–í—ã–π–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä–µ '—Ä—É–ª–µ—Ç–∫–∞' 10 —Ä–∞–∑ —Å—Ç–∞–≤–∫–æ–π –±–æ–ª—å—à–µ 50.000 üí∞",
        "completed": False,
        "count": 0,
        "max_count": 10
    },
    {
        "quest_id": 2,
        "quest_name": "–õ—É–∑–µ—Ä",
        "quest_description": "–ü—Ä–æ–∏–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä–µ '–ú–∏–Ω–µ—Ä' 10 —Ä–∞–∑ —Å—Ç–∞–≤–∫–æ–π –±–æ–ª—å—à–µ 10.000 üí∞",
        "completed": False,
        "count": 0,
        "max_count": 10
    },
    {
        "quest_id": 3,
        "quest_name": "–ö–ª–∞–¥–º–µ–Ω",
        "quest_description": "–°–æ–∑–¥–∞–π—Ç–µ 5 –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å –ª—é–±–æ–π —Å—É–º–º–æ–π",
        "completed": False,
        "count": 0,
        "max_count": 5
    },
    {
        "quest_id": 4,
        "quest_name": "–ó–µ—Ä–æ",
        "quest_description": "–°–ª–æ–≤–∏—Ç–µ '–ó–µ—Ä–æ' –≤ –∏–≥—Ä–µ '—Ä—É–ª–µ—Ç–∫–∞' 2 —Ä–∞–∑–∞",
        "completed": False,
        "count": 0,
        "max_count": 2
    },
    {
        "quest_id": 5,
        "quest_name": "–†–µ–±—É—Å",
        "quest_description": "–ò—â–∏—Ç–µ —Å–ø—Ä—è—á–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –±–æ—Ç–∞, –∏ –æ—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ!\n–û—Ç–≤–µ—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —á–µ—Ä–µ–∑: /answer ¬´—Å–ª–æ–≤–æ¬ª",
        "completed": False,
        "count": 0,
        "max_count": 1
    }
]


def load_quests():
    try:
        with open(QUESTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_quests(data):
    with open(QUESTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def init_user_quests(user_id: int):
    data = load_quests()
    str_id = str(user_id)
    if str_id not in data:
        data[str_id] = copy.deepcopy(default_quests)
        save_quests(data)

def get_user_quests(user_id: int):
    data = load_quests()
    return data.get(str(user_id), [])

def update_quest(user_id: int, quest_id: int):
    try:
        with open(QUESTS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}

    user_id_str = str(user_id)
    if user_id_str not in data:
        return False

    quests = data[user_id_str]  # —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    for quest in quests:
        if quest["quest_id"] == quest_id:
            if not quest.get("completed", False):
                quest["count"] = quest.get("count", 0) + 1
                if quest["count"] >= quest.get("max_count", 1):
                    quest["completed"] = True
            break
    else:
        return False

    with open(QUESTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

    return True


def all_quests_completed(user_id: int):
    quests = get_user_quests(user_id)
    return all(q.get("completed", False) for q in quests)

def format_quests(quests: list):
    text = "<b>üìú –í–∞—à–∏ –∫–≤–µ—Å—Ç—ã:</b>\n\n"
    for q in quests:
        status = "‚úÖ" if q.get("completed", False) else "‚ùå"
        text += f"‚Ä¢ <b>{q.get('quest_name', '???')}</b> {status}\n"
        text += f"  ‚îî {q.get('quest_description', '')}\n"
        text += f"  ‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: <code>{q.get('count', 0)} / {q.get('max_count', 0)}</code>\n\n"
    return text

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Pyrogram
async def show_quests(client: Client, message: Message):
    user_id = message.from_user.id
    quests = get_user_quests(user_id)

    if not quests:
        init_user_quests(user_id)
        await message.reply("–ö–≤–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", quote=True)
        return

    if all_quests_completed(user_id):
        await message.reply(f"üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∫–≤–µ—Å—Ç—ã!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ 2 —á–∞—Å—Ç—å –∏–≤–µ–Ω—Ç–∞: {encrypt_user_id(user_id)}", quote=True)
        return

    text = format_quests(quests)
    await message.reply(text, quote=True)

verifed_quests = {}  # {user_id: set(quest_ids)}

def check_verifed_quests(user_id: int, quest_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return user_id in verifed_quests and quest_id in verifed_quests[user_id]

def verifed_quests_completed(user_id: int, quest_id: int) -> None:
    """–ü–æ–º–µ—á–∞–µ—Ç –∫–≤–µ—Å—Ç –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in verifed_quests:
        verifed_quests[user_id] = set()
    verifed_quests[user_id].add(quest_id)


if not os.path.exists('banned_users.json'):
    with open('banned_users.json', 'w') as f:
        json.dump([], f)

if not os.path.exists('quests.json'):
    with open('quests.json', 'w') as f:
        json.dump(default_quests, f)

api_semaphore = Semaphore(30)

def rate_limit(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        async with api_semaphore:
            return await func(*args, **kwargs)
    return wrapper

craft_recipes = {
    "stone_sediments": {"items": {"stone": 2}, "result": 1}, # –æ—Å–∫–æ–ª–∫–∏ –∫–∞–º–Ω—è
    "stone_plate": {"items": {"stone": 5, "stone_sediments": 10}, "result": 2}, # –∫–∞–º–µ–Ω–Ω–∞—è –ø–ª–∏—Ç–∞
    "iron_plate": {"items": {"iron_ingots": 5}, "result": 2}, # –∂–µ–ª–µ–∑–Ω—ã–π –ø–ª–∏—Ç–∞
    "iron_ingots": {"items": {"iron": 3}, "result": 1}, # –∂–µ–ª–µ–∑–Ω—ã–π —Å–ª–∏—Ç–∫–∏
    "gold_ingots": {"items": {"gold": 4}, "result": 1}, # –∑–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏
    "diamond_cores": {"items": {"diamond": 5}, "result": 1}, # –∞–ª–º–∞–∑–Ω—ã–µ —è–¥—Ä—ã
    "emerald_dust": {"items": {"emerald": 3}, "result": 1}, # –∏–∑—É–º—Ä—É–¥–Ω—ã–π –ø—ã–ª—å
    "iron_ingots_dense": {"items": {"iron": 10}, "result": 1}, # –ø–ª–æ—Ç–Ω—ã–π –∂–µ–ª–µ–∑–Ω—ã–π —Å–ª–∏—Ç–æ–∫
    "gold_nuggets": {"items": {"gold": 1}, "result": 10}, # –∑–æ–ª–æ—Ç–æ–π —Å–æ–º–æ—Ä–æ–¥–æ–∫
}

drill_motor_levels_price = [
    {"level": 1, "price": 1000, "items": {"stone_sediments": 5}},
    {"level": 2, "price": 2000, "items": {"stone_sediments": 10, "iron_ingots": 5}},
    {"level": 3, "price": 5000, "items": {"stone_sediments": 15, "iron_ingots": 10, "gold_bars": 2}},
]

drill_head_levels_price = [
    {"level": 1, "price": 1000, "items": {"stone_sediments": 5}},
    {"level": 2, "price": 2000, "items": {"stone_sediments": 10, "iron_ingots": 5}},
]

resource_tiers = {
    0: ["stone"],
    10: ["stone", "iron"],
    20: ["stone", "iron", "gold"],
    30: ["stone", "iron", "gold", "diamond"],
    40: ["stone", "iron", "gold", "diamond", "emerald"]
}

import sqlite3

def wipe_except_crash_ids(db_path):
    db = sqlite3.connect(db_path)
    cursor = db.cursor()

    tables_to_clear = [
        'promos', 'user_promos', 'inv', 'drill',
        'shop', 'inv_user', 'mines_games', 'bank_deposits',
        'MARKETPLACE', 'ref_system', 'treasure_games'
    ]
    for table in tables_to_clear:
        cursor.execute(f"DELETE FROM {table}")

    cursor.execute("""
        UPDATE crash SET 
            username = NULL,
            first_name = NULL,
            money = 10000,
            stone = 0,
            iron = 0,
            gold = 0,
            diamond = 0,
            emerald = 0,
            last_bonus = NULL,
            boor = 1,
            lose_count = 0,
            win_count = 0,
            total_games = 0,
            status = 0,
            registered_at = CURRENT_TIMESTAMP
    """)

    db.commit()
    db.close()



@app.on_message(filters.command('wipe'))
async def wipe(client, message):
    if message.from_user.id not in API_OWNER:
        return

    btn = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üß® –£–í–ï–†–ï–ù???", callback_data="wipe:1")]]
    )

    await message.reply("<b>–£–í–ï–†–ï–ù???</b>", reply_markup=btn)
from random import randint
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

@app.on_callback_query(filters.regex("wipe:1"))
async def wipe_callback(client, callback_query):
    if callback_query.from_user.id not in API_OWNER:
        return

    buttons = [InlineKeyboardButton("‚ùå", callback_data="wipe:stop") for _ in range(8)]

    yes_index = randint(0, 8)
    buttons.insert(yes_index, InlineKeyboardButton("‚úÖ", callback_data="wipe:yes"))

    rows = [buttons[i:i+3] for i in range(0, 9, 3)]

    await callback_query.message.edit_text(
        "–¢–û–ß–ù–û??", 
        reply_markup=InlineKeyboardMarkup(rows)
    )


@app.on_callback_query(filters.regex("wipe:yes"))
async def confirm_wipe(client, callback_query):
    if callback_query.from_user.id not in API_OWNER:
        return await callback_query.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞", show_alert=True)

    await callback_query.answer("‚úÖ Wipe –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", show_alert=True)

    wipe_except_crash_ids(DBB)

    await callback_query.message.edit_text("–≥–æ—Ç–æ–≤–æ")

@app.on_callback_query(filters.regex("wipe:stop"))
async def cancel_wipe(client, callback_query):
    await callback_query.message.edit_text("–æ—Ç–º–µ–Ω–µ–Ω–æ")


def create_farm_table():
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS farm (
        user_id INTEGER,
        device TEXT,
        count INTEGER DEFAULT 0,
        last_claim TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY(user_id, device)
    )
    """)
    db.commit()
    db.close()



def create_database():
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS crash (
            id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            money REAL,
            stone INTEGER DEFAULT 0,
            iron INTEGER DEFAULT 0,
            gold INTEGER DEFAULT 0,
            diamond INTEGER DEFAULT 0,
            emerald INTEGER DEFAULT 0,
            last_bonus DATETIME,
            boor INTEGER DEFAULT 1,
            lose_count INTEGER DEFAULT 0,
            win_count INTEGER DEFAULT 0,
            total_games INTEGER DEFAULT 0,
            status INTEGER DEFAULT 0,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            hidden INTEGER DEFAULT 0
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS promos (
            name TEXT PRIMARY KEY,
            money REAL,
            is_active INTEGER DEFAULT 1,
            activations INTEGER
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_promos (
            user_id INTEGER,
            promo_name TEXT,
            FOREIGN KEY (user_id) REFERENCES crash(id),
            FOREIGN KEY (promo_name) REFERENCES promos(name),
            PRIMARY KEY (user_id, promo_name)
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS inv (
            id INTEGER PRIMARY KEY,
            details INTEGER DEFAULT 0,
            stone_sediments INTEGER DEFAULT 0,
            iron_ingots INTEGER DEFAULT 0,
            gold_bars INTEGER DEFAULT 0,
            diamond_cores INTEGER DEFAULT 0,
            emerald_dust INTEGER DEFAULT 0,
            iron_ingots_dense INTEGER DEFAULT 0,
            gold_nuggets INTEGER DEFAULT 0
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS drill (
            user_id INTEGER PRIMARY KEY,
            motor_lvl INTEGER DEFAULT 1,
            drill_head_lvl INTEGER DEFAULT 1,
            frame INTEGER DEFAULT 1,
            power_source INTEGER DEFAULT 1,
            handle INTEGER DEFAULT 0,
            cooling INTEGER DEFAULT 0,
            gearbox INTEGER DEFAULT 0,
            oil INTEGER DEFAULT 0,
            energy INTEGER DEFAULT 10,
            max_energy INTEGER DEFAULT 10,
            max_oil_engine INTEGER DEFAULT 10,
            max_cooling_engine INTEGER DEFAULT 10,
            heal_drill_engine INTEGER DEFAULT 100
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS shop (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            price INTEGER,
            quantity INTEGER,  -- quantity = -1: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ, 0: –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, >0: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS inv_user (
            user_id INTEGER,
            item_name TEXT,
            quantity INTEGER DEFAULT 1,
            FOREIGN KEY (user_id) REFERENCES crash(id),
            FOREIGN KEY (item_name) REFERENCES shop(name),
            PRIMARY KEY (user_id, item_name)
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS mines_games (
            game_id TEXT PRIMARY KEY,
            user_id INTEGER,
            game_data TEXT,
            FOREIGN KEY (user_id) REFERENCES crash(id)
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bank_deposits (
            deposit_id TEXT PRIMARY KEY,
            user_id INTEGER,
            amount REAL,
            current_amount INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active INTEGER DEFAULT 1,
            FOREIGN KEY (user_id) REFERENCES crash(id)
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS MARKETPLACE (
                   seller_id INTEGER,
                    item_name TEXT,
                    price INTEGER,
                    quantity INTEGER DEFAULT 1)""")
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS ref_system (
        user_id INTEGER PRIMARY KEY,
        invited_by INTEGER,
        ref_count INTEGER DEFAULT 0
        )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS treasure_games (
        id TEXT PRIMARY KEY,              -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä—ã
        user_id INTEGER,
        bet INTEGER,
        treasures INTEGER,
        found INTEGER DEFAULT 0,
        attempts_left INTEGER,
        board TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")
    db.commit()
    db.close()

create_database()
create_farm_table()

async def set_lose_monet(user_id, amount):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET lose_count = lose_count + ? WHERE id = ?", (float(amount), user_id))
    db.commit()
    db.close()

async def set_win_monet(user_id, amount):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET win_count = win_count + ? WHERE id = ?", (float(amount), user_id))
    db.commit()
    db.close()

async def get_inventory_data(user_id):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT * FROM inv WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    db.close()
    if result:
        return {
            "id": result[0],
            "details": result[1],
            "stone_sediments": result[2],
            "iron_ingots": result[3],
            "gold_bars": result[4],
            "diamond_cores": result[5],
            "emerald_dust": result[6],
            "iron_ingots_dense": result[7],
            "gold_nuggets": result[8]
        }
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("INSERT INTO inv (id) VALUES (?)", (user_id,))
    db.commit()
    db.close()
    return await get_inventory_data(user_id)

async def get_user_drill_data(user_id):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT * FROM drill WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    db.close()
    if result:
        return {
            "user_id": result[0],
            "motor_lvl": result[1],
            "drill_head_lvl": result[2],
            "frame": result[3],
            "power_source": result[4],
            "handle": result[5],
            "cooling": result[6],
            "gearbox": result[7],
            "oil": result[8],
            "energy": result[9],
            "max_energy": result[10],
            "max_oil_engine": result[11],
            "max_cooling_engine": result[12],
            "heal_drill_engine": result[13]
        }
    return None  # –ï—Å–ª–∏ –¥—Ä–µ–ª–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

def can_craft(user_id, item_name):
    user_data = get_user_data(user_id)
    print(f"can_craft: user_id={user_id}, item_name={item_name}")
    print(f"user_data={user_data}")
    
    if not user_data or item_name not in craft_recipes:
        print(f"Failed: user_data is None or item_name not in craft_recipes")
        return False
    
    recipe = craft_recipes[item_name]
    print(f"recipe={recipe}")
    
    for resource, required_amount in recipe["items"].items():
        available = user_data.get(resource, 0)
        print(f"Checking {resource}: available={available}, required={required_amount}")
        if available < required_amount:
            print(f"Not enough {resource}")
            return False
    return True

async def craft_item(user_id, item_name):
    recipe = craft_recipes[item_name]
    
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    
    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    for resource, amount in recipe["items"].items():
        cursor.execute(f"UPDATE crash SET {resource} = {resource} - ? WHERE id = ?", (amount, user_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    cursor.execute(f"UPDATE inv SET {item_name} = {item_name} + ? WHERE id = ?", (recipe["result"], user_id))
    
    db.commit()
    db.close()

async def upgrade_drill_component(user_id, component, levels_price):
    drill_data = await get_user_drill_data(user_id)
    inv = await get_inventory_data(user_id)
    user_data = get_user_data(user_id)
    current_level = drill_data[component]
    next_level_data = next((lvl for lvl in levels_price if lvl["level"] == current_level + 1), None)
    
    if not next_level_data:
        return "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç."
    if user_data["money"] < next_level_data["price"]:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç."
    for item, amount in next_level_data["items"].items():
        if inv.get(item, 0) < amount:
            return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {item}."
    
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute(f"UPDATE drill SET {component} = ? WHERE user_id = ?", (current_level + 1, user_id))
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(next_level_data["price"]), user_id))
    for item, amount in next_level_data["items"].items():
        cursor.execute(f"UPDATE inv SET {item} = {item} - ? WHERE id = ?", (amount, user_id))
    db.commit()
    db.close()
    return f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {current_level + 1}!"

async def refill_oil(user_id):
    drill_data = await get_user_drill_data(user_id)
    user_data = get_user_data(user_id)
    cost = 1000
    if user_data["money"] < cost:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç."
    if drill_data["oil"] >= drill_data["max_oil_engine"]:
        return "–ú–∞—Å–ª–æ —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ."
    
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE drill SET oil = ? WHERE user_id = ?", (drill_data["max_oil_engine"], user_id))
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(cost), user_id))
    db.commit()
    db.close()
    return "–ú–∞—Å–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ!"

async def refill_cooling(user_id):
    drill_data = await get_user_drill_data(user_id)
    user_data = get_user_data(user_id)
    cost = 1000
    if user_data["money"] < cost:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç."
    if drill_data["cooling"] >= drill_data["max_cooling_engine"]:
        return "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ."
    
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE drill SET cooling = ? WHERE user_id = ?", (drill_data["max_cooling_engine"], user_id))
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(cost), user_id))
    db.commit()
    db.close()
    return "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"

async def repair_drill(user_id):
    drill_data = await get_user_drill_data(user_id)
    user_data = get_user_data(user_id)
    inv = await get_inventory_data(user_id)
    cost = 2000
    required_items = {"stone_sediments": 5}
    
    if user_data["money"] < cost:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç."
    if drill_data["heal_drill_engine"] >= 100:
        return "–ë—É—Ä —É–∂–µ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
    for item, amount in required_items.items():
        if inv.get(item, 0) < amount:
            return f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {item}."
    
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE drill SET heal_drill_engine = 100 WHERE user_id = ?", (user_id,))
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(cost), user_id))
    for item, amount in required_items.items():
        cursor.execute(f"UPDATE inv SET {item} = {item} - ? WHERE id = ?", (amount, user_id))
    db.commit()
    db.close()
    return "–ë—É—Ä –ø–æ—á–∏–Ω–µ–Ω!"

async def refill_energy(message, user_id):
    drill_data = await get_user_drill_data(user_id)
    user_data = get_user_data(user_id)
    drill_lvl = drill_data["drill_head_lvl"]
    cost = 10000 * (drill_lvl + 1)
    text = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–π —Å—Ç–æ–∏—Ç: " + str(cost) + " –º–æ–Ω–µ—Ç."
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"on_refill_energy_{user_id}")]
    ])
    await message.edit(text, reply_markup=markup)

@app.on_message(filters.command("savedb"))
async def save_db_command(client, message):
    user_id = message.from_user.id
    if user_id not in API_OWNER:
        await message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –∏ –≤—ã–∑—ã–≤–∞–µ–º commit(), —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        db = sqlite3.connect(DBB)
        db.commit()
        db.close()
        await message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

@app.on_callback_query(filters.regex(r"on_refill_energy_"))
@rate_limit
async def on_refill_energy_callback(client, callback_query):
    user_id = int(callback_query.data.split("_")[-1])
    resultt = await on_refill_energy(user_id)
    await callback_query.message.edit_text(resultt)

async def on_refill_energy(user_id):
    drill_data = await get_user_drill_data(user_id)
    user_data = get_user_data(user_id)
    drill_lvl = drill_data["drill_head_lvl"]
    cost = 10000 * (drill_lvl + 1)
    
    if user_data["money"] < cost:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç."
    if drill_data["energy"] >= drill_data["max_energy"]:
        return "–≠–Ω–µ—Ä–≥–∏—è —É–∂–µ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ."
    
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE drill SET energy = ? WHERE user_id = ?", (drill_data["max_energy"], user_id))
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(cost), user_id))
    db.commit()
    db.close()
    return "–≠–Ω–µ—Ä–≥–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞!"
    

import requests
# @app.on_message(filters.command("–±–æ—Ç", prefixes=""), group=8)
@rate_limit
async def generate_text(client, message):
    user_input = message.text.split(maxsplit=1)
    if len(user_input) < 2:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    prompt = user_input[1]
    msg = await message.reply("–Ø –¥—É–º–∞—é...")
    try:
        promptt =f"–æ—Ç–≤–µ—Ç—å –Ω–µ –∑–¥–∞—Ä–æ–≤–∞—è—Å—å, {prompt}"
        response = requests.get(f"https://text.pollinations.ai/{promptt}")
        response.raise_for_status()
        generated_text = response.text
    except Exception as e:
        generated_text = f"–û—à–∏–±–∫–∞: {e}"

    await msg.edit(
        f"{generated_text}\n\n**–ó–∞ –∞–≤—Ç–æ—Ä—Å–≤–æ–º: @{message.from_user.username}**\n**–ó–∞–ø—Ä–æ—Å:** \n__{prompt}__",
        parse_mode=enums.ParseMode.MARKDOWN
    )



# @app.on_message(filters.command("drill"))
@rate_limit
async def drill_command_handler(client, message):
    args = message.text.split()
    if len(args) == 1:
        pass
    else:
        return
    await drill_command(client, message)

@rate_limit
async def drill_command(client, message):
    user_id = message.from_user.id
    if not await check_user(user_id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ —Ä–µ–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    if await is_banned_user(user_id):
        await message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    drill_data = await get_user_drill_data(user_id)
    user_data = get_user_data(user_id)
    if not drill_data:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä–µ–ª–∏. –ö—É–ø–∏—Ç–µ –µ–µ —Å –ø–æ–º–æ—â—å—é /buy_drill –∑–∞ 5000 –º–æ–Ω–µ—Ç!")
        return
    
    calc_drill_exp = sum(drill_data[k] * 1.5 for k in ["motor_lvl", "drill_head_lvl", "frame", "power_source", "handle", "cooling", "gearbox", "oil"])
    calc_drill_lvl = int(calc_drill_exp // 10)
    
    text = f"üé≤ –í–∞—à–∞ –¥—Ä–µ–ª—å:\nüí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(user_data['money'])}\n–£—Ä–æ–≤–µ–Ω—å: {calc_drill_lvl}\n"
    text += f"üîã –ú–æ—Ç–æ—Ä: {drill_data['motor_lvl']}\nüîß –°–≤–µ—Ä–ª–æ: {drill_data['drill_head_lvl']}\nüéö –ö–∞—Ä–∫–∞—Å: {drill_data['frame']}\n"
    text += f"üîã –ü–∏—Ç–∞–Ω–∏–µ: {drill_data['power_source']}\nüîß –î–µ—Ä–∂–∞—Ç–µ–ª—å: {drill_data['handle']}\n"
    text += f"‚ùÑÔ∏è –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ: {drill_data['cooling']}/{drill_data['max_cooling_engine']}\n"
    text += f"üõ¢ –ú–∞—Å–ª–æ: {drill_data['oil']}/{drill_data['max_oil_engine']}\n"
    text += f"üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ: {drill_data['heal_drill_engine']}/100"
    
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å", callback_data=f"drill_upgrade_{user_id}"),
         InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å", callback_data=f"drill_parts_{user_id}")],
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"drill_manage_{user_id}")]
    ])
    await message.reply(text, reply_markup=markup)

async def inventory_command_handler(client, message):
    args = message.text.split()
    if len(args) == 1:
        pass
    else:
        return
    await inventory_command(client, message)

@rate_limit
async def inventory_command(client, message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –±–∞–Ω–∞
    if not await check_user(user_id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ /—Ä–µ–≥.")
        return
    if await is_banned_user(user_id):
        await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = get_user_data(user_id)
    inv = await get_inventory_data(user_id)
    
    if not user_data or not inv:
        await message.reply("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    text = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
    resources = [
        ("ü™® –ö–∞–º–µ–Ω—å", user_data['stone']),
        ("üî© –ñ–µ–ª–µ–∑–æ", user_data['iron']),
        ("ü•á –ó–æ–ª–æ—Ç–æ", user_data['gold']),
        ("üíé –ê–ª–º–∞–∑", user_data['diamond']),
        ("üíö –ò–∑—É–º—Ä—É–¥", user_data['emerald']),
        ("‚ú® –û—Å–∫–æ–ª–∫–∏ –∫–∞–º–Ω—è", inv['stone_sediments']),
        ("üîß –ñ–µ–ª–µ–∑–Ω—ã–µ —Å–ª–∏—Ç–∫–∏", inv['iron_ingots']),
        ("ü•á –ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏", inv['gold_bars']),
        ("üíé –ê–ª–º–∞–∑–Ω—ã–µ —è–¥—Ä–∞", inv['diamond_cores']),
        ("üíö –ò–∑—É–º—Ä—É–¥–Ω–∞—è –ø—ã–ª—å", inv['emerald_dust']),
        ("üî© –ü–ª–æ—Ç–Ω—ã–µ —Å–ª–∏—Ç–∫–∏", inv['iron_ingots_dense']),
        ("ü•á –ó–æ–ª–æ—Ç—ã–µ –∫—É—Å–æ—á–∫–∏", inv['gold_nuggets']),
    ]
    for name, amount in resources:
        text += f"{name}: {amount}\n"

    # –ö–Ω–æ–ø–∫–∞ –∫—Ä–∞—Ñ—Ç–∞
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö—Ä–∞—Ñ—Ç", callback_data=f"craft_menu_{user_id}")]
    ])
    await message.reply(text, reply_markup=markup)

@app.on_callback_query(filters.regex(r"craft_menu_"))
@rate_limit
async def craft_menu(client, callback_query):
    parts = callback_query.data.split("_")
    if len(parts) != 3 or parts[1] != "menu" or not parts[2].isdigit():
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –º–µ–Ω—é –∫—Ä–∞—Ñ—Ç–∞.")
        return
    
    user_id = int(parts[2])
    bot_info = await client.get_me()
    if callback_query.message.chat.id != user_id:
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í –õ–° –±–æ—Ç–∞", url=f"t.me/{bot_info.username}")]
        ])
        await callback_query.message.edit_text("–ö—Ä–∞—Ñ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –õ–° –±–æ—Ç–∞.", reply_markup=markup)
        return

    text = "üìú –ú–µ–Ω—é –∫—Ä–∞—Ñ—Ç–∞:\n"
    buttons = []
    
    for item_name, recipe in craft_recipes.items():
        if can_craft(user_id, item_name):
            callback_data = f"craft_item_{item_name}_{user_id}"
            print(f"Generated callback_data: {callback_data}")  # –û—Ç–ª–∞–¥–∫–∞
            buttons.append([InlineKeyboardButton(f"–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å {item_name}", callback_data=callback_data)])
        else:
            required = ", ".join(f"{k}: {v}" for k, v in recipe["items"].items())
            text += f"{item_name} (–¢—Ä–µ–±—É–µ—Ç—Å—è: {required}) - –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
    
    if not buttons:
        text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞.\n–î–æ–±—ã–≤–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —Å –ø–æ–º–æ—â—å—é /mine!"
    
    markup = InlineKeyboardMarkup(buttons)
    await callback_query.message.edit_text(text, reply_markup=markup)

@app.on_callback_query(filters.regex(r"craft_item_"))
@rate_limit
async def craft_item_callback(client, callback_query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—Ñ—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ callback."""
    parts = callback_query.data.split("_")
    if len(parts) < 4 or parts[1] != "item" or not parts[-1].isdigit():
        await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫—Ä–∞—Ñ—Ç–∞ ({callback_query.data}).")
        return
    
    item_name = "_".join(parts[2:-1])
    user_id = int(parts[-1])
    
    if item_name not in craft_recipes:
        await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç ({item_name}).")
        return
    
    if can_craft(user_id, item_name):
        await craft_item(user_id, item_name)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"craft_menu_{user_id}")]])
        await callback_query.message.edit_text(f"üéâ –í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ {item_name}!", reply_markup=markup)
    else:
        recipe = craft_recipes[item_name]
        required = ", ".join(f"{k}: {v}" for k, v in recipe["items"].items())
        await callback_query.message.edit_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è {item_name}. –¢—Ä–µ–±—É–µ—Ç—Å—è: {required}")

@app.on_callback_query(filters.regex(r"craft_item_"))
@rate_limit
async def craft_item_callback(client, callback_query):
    print(f"Received callback_data: {callback_query.data}")  # –û—Ç–ª–∞–¥–∫–∞
    parts = callback_query.data.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: craft_item_itemname_userid
    if len(parts) < 4 or parts[1] != "item" or not parts[-1].isdigit():
        await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫—Ä–∞—Ñ—Ç–∞ ({callback_query.data}).")
        return
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ item_name –∏ user_id
    item_name = "_".join(parts[2:-1])  # –°–æ–±–∏—Ä–∞–µ–º –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç "_"
    user_id = int(parts[-1])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if item_name not in craft_recipes:
        await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç ({item_name}).")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ñ—Ç–∞
    if can_craft(user_id, item_name):
        await craft_item(user_id, item_name)
        await callback_query.message.edit_text(f"üéâ –í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ {item_name}!")
    else:
        recipe = craft_recipes[item_name]
        required = ", ".join(f"{k}: {v}" for k, v in recipe["items"].items())
        await callback_query.message.edit_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è {item_name}. –¢—Ä–µ–±—É–µ—Ç—Å—è: {required}")

@app.on_callback_query(filters.regex(r"drill_upgrade_"))
@rate_limit
async def drill_upgrade_menu(client, callback_query):
    user_id = int(callback_query.data.split("_")[-1])
    if user_id != callback_query.from_user.id:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ from_user.id
        await callback_query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:\n"
    buttons = [
        [InlineKeyboardButton("–ú–æ—Ç–æ—Ä", callback_data=f"upgrade_motor_{user_id}")],
        [InlineKeyboardButton("–°–≤–µ—Ä–ª–æ", callback_data=f"upgrade_drill_head_{user_id}")],
        [InlineKeyboardButton("–ö–∞—Ä–∫–∞—Å", callback_data=f"upgrade_frame_{user_id}")],
        [InlineKeyboardButton("–ü–∏—Ç–∞–Ω–∏–µ", callback_data=f"upgrade_power_source_{user_id}")],
        [InlineKeyboardButton("–î–µ—Ä–∂–∞—Ç–µ–ª—å", callback_data=f"upgrade_handle_{user_id}")]
    ]
    markup = InlineKeyboardMarkup(buttons)
    await callback_query.message.edit_text(text, reply_markup=markup)

@app.on_callback_query(filters.regex(r"upgrade_"))
@rate_limit
async def upgrade_component(client, callback_query):
    parts = callback_query.data.split("_")
    component = {"motor": "motor_lvl", "drill_head": "drill_head_lvl", "frame": "frame", "power_source": "power_source", "handle": "handle"}[parts[1]]
    user_id = int(parts[2])
    
    levels_price = {
        "motor_lvl": drill_motor_levels_price,
        "drill_head_lvl": drill_head_levels_price,
    }.get(component, drill_motor_levels_price)
    
    result = await upgrade_drill_component(user_id, component, levels_price)
    await callback_query.message.edit_text(result)

@app.on_callback_query(filters.regex(r"drill_parts_"))
async def drill_parts_menu(client, callback_query):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–µ–π –∫ –¥—Ä–µ–ª–∏ (–∑–∞–≥–ª—É—à–∫–∞)."""
    user_id = int(callback_query.data.split("_")[-1])
    if user_id != callback_query.from_user.id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π
    await callback_query.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
    
@app.on_callback_query(filters.regex(r"drill_manage_"))
@rate_limit
async def drill_manage_menu(client, callback_query):
    # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
    parts = callback_query.data.split("_")
    if len(parts) < 3 or not parts[-1].isdigit():
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
        return
    
    user_id = int(parts[-1])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç –≤–ª–∞–¥–µ–ª–µ—Ü
    if user_id != callback_query.from_user.id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é
    text = "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É—Ä–æ–º:\n"
    buttons = [
        [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å–ª–æ", callback_data=f"manage_oil_{user_id}")],
        [InlineKeyboardButton("–û—Ö–ª–∞–¥–∏—Ç—å", callback_data=f"manage_cooling_{user_id}")],
        [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç –≠–Ω–µ—Ä–≥–∏—é", callback_data=f"manage_energy_{user_id}")],
        [InlineKeyboardButton("–ü–æ—á–∏–Ω–∏—Ç—å –±—É—Ä", callback_data=f"manage_repair_{user_id}")]]
    markup = InlineKeyboardMarkup(buttons)
    await callback_query.message.edit_text(text, reply_markup=markup)

@app.on_callback_query(filters.regex(r"manage_"))
@rate_limit
async def manage_drill(client, callback_query):
    parts = callback_query.data.split("_")
    action = parts[1]
    user_id = int(parts[2])
    if user_id != callback_query.from_user.id:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ from_user.id
        await callback_query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True) 
        return
    
    if action == "oil":
        result = await refill_oil(user_id)
    elif action == "cooling":
        result = await refill_cooling(user_id)
    elif action == "repair":
        result = await repair_drill(user_id)
    elif action == "energy":
        result = await refill_energy(callback_query.message, user_id)
    else:
        result = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    
    await callback_query.message.edit_text(result)

@rate_limit
async def mine_command_1(client, message):
    args = message.text.split()
    if len(args) == 1:
        pass
    else:
        return
    await mine_command(client, message)

@rate_limit
async def mine_command(client, message):
    user_id = message.from_user.id
    if not await check_user(user_id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ —Ä–µ–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    if message.chat.type != enums.ChatType.PRIVATE:
        data_bot = await client.get_me()
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í –õ–° –±–æ—Ç–∞", url=f"t.me/{data_bot.username}")]
        ])
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–° –±–æ—Ç–∞.", reply_markup=markup)
        return
    
    if await is_banned_user(user_id):
        await message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    
    drill_data = await get_user_drill_data(user_id)
    if not drill_data:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä–µ–ª–∏. –ö—É–ø–∏—Ç–µ –µ–µ —Å –ø–æ–º–æ—â—å—é /buy_drill –∑–∞ 5000 –º–æ–Ω–µ—Ç!")
        return
    
    if drill_data["energy"] < 1:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –¥–æ–±—ã—á–∏.")
        return
    if drill_data["oil"] < 1:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Å–ª–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±—É—Ä–∞.")
        return
    if drill_data["heal_drill_engine"] < 5:
        await message.reply("–ë—É—Ä —Å–ª–æ–º–∞–Ω, –ø–æ—á–∏–Ω–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –¥–æ–±—ã—á–µ–π.")
        return
    
    calc_drill_exp = sum(drill_data[k] * 1.5 for k in ["motor_lvl", "drill_head_lvl", "frame", "power_source", "handle", "cooling", "gearbox", "oil"])
    calc_drill_lvl = int(calc_drill_exp // 10)
    bonus_percent = calc_drill_lvl * 0.01
    
    available_resources = next(tier for lvl, tier in sorted(resource_tiers.items(), reverse=True) if calc_drill_lvl >= lvl)
    resource = choice(available_resources)
    base_amount = randint(1, 6)
    amount = int(base_amount * (1.2 * bonus_percent + 1))
    
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("""
        UPDATE drill 
        SET energy = energy - 1, 
            oil = oil - 1, 
            heal_drill_engine = heal_drill_engine - 5 
        WHERE user_id = ?
    """, (user_id,))
    cursor.execute(f"UPDATE crash SET {resource} = {resource} + ? WHERE id = ?", (amount, user_id))
    db.commit()
    db.close()
    
    await message.reply(f"‚õè –í—ã –¥–æ–±—ã–ª–∏ {amount} {resource}!\n–≠–Ω–µ—Ä–≥–∏—è: {drill_data['energy']-1}/{drill_data['max_energy']}\n–ú–∞—Å–ª–æ: {drill_data['oil']-1}/{drill_data['max_oil_engine']}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {drill_data['heal_drill_engine']-5}/100")

async def check_user(user_id):
    user_data = get_user_data(user_id)
    return user_data is not None and not await is_banned_user(user_id)

def register_user(user_id, username, first_name):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    try:
        cursor.execute("INSERT INTO crash (id, username, money, first_name) VALUES (?, ?, ?, ?)", (user_id, username, 10000, first_name))
        cursor.execute("INSERT INTO drill (user_id) VALUES (?)", (user_id,))
        db.commit()
        db.close()
        return True
    except sqlite3.IntegrityError:
        db.close()
        return False

# ================== –§–ê–†–ú–ò–ù–ì –¢–ï–•–ù–ò–ö–û–ô ==================


def get_user_farm(user_id):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT device, count, last_claim FROM farm WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    db.close()
    farm = {k: {"count": 0, "last_claim": datetime.now()} for k in farm_devices.keys()}
    for device, count, last_claim in rows:
        farm[device] = {"count": count, "last_claim": datetime.fromisoformat(last_claim)}
    return farm

def update_user_farm(user_id, device, new_count):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("""
    INSERT INTO farm (user_id, device, count) 
    VALUES (?, ?, ?)
    ON CONFLICT(user_id, device) DO UPDATE SET count=?
    """, (user_id, device, new_count, new_count))
    db.commit()
    db.close()

def claim_income(user_id):
    farm = get_user_farm(user_id)
    now = datetime.now()
    total_income = 0
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    for device, data in farm.items():
        count = data["count"]
        if count > 0:
            last_claim = data["last_claim"]
            hours = (now - last_claim).total_seconds() / 3600
            income = int(hours * farm_devices[device]["income"] * count)
            total_income += income
            cursor.execute("UPDATE farm SET last_claim = ? WHERE user_id = ? AND device = ?",
                           (now.isoformat(), user_id, device))
    if total_income > 0:
        cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(total_income), user_id))
    db.commit()
    db.close()
    return total_income

def get_device_price(user_id, device):
    farm = get_user_farm(user_id)
    count = farm[device]["count"]
    return int(farm_devices[device]["base_price"] * (1.03 ** count))

import math


async def set_user_lose_count(user_id, count):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET lose_count = ? WHERE id = ?", (count, user_id))
    db.commit()
    db.close()

async def set_user_win_count(user_id, count):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET win_count = ? WHERE id = ?", (count, user_id))
    db.commit()
    db.close()

def get_user_data(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã."""
    try:
        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            cursor.execute(
                "SELECT username, id, money, lose_count, win_count, stone, iron, gold, diamond, emerald, last_bonus, status FROM crash WHERE id = ?",
                (user_id,))
            result = cursor.fetchone()
            if result:
                return {
                    "username": result[0],
                    "id": result[1],
                    "money": result[2],
                    "lose_count": result[3],
                    "win_count": result[4],
                    "stone": result[5],
                    "iron": result[6],
                    "gold": result[7],
                    "diamond": result[8],
                    "emerald": result[9],
                    "last_bonus": result[10],
                    "status": result[11],
                }
        return None
    except sqlite3.Error as e:
        print(f"Database error in get_user_data: {e}")
        return None

async def get_user_inventory(user_id):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT item_name, quantity FROM inv_user WHERE user_id = ?", (user_id,))
    result = cursor.fetchall()
    db.close()
    return result

@app.on_message(filters.command("uinv"), group=1)
async def user_inventory(client, message):
    user_id = message.from_user.id
    print(f"–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /uinv: {user_id}")
    if user_id not in API_OWNER:
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /uinv (id)")
        return

    user_id = args[1]
    inventory = await get_user_inventory(user_id)
    if not inventory:
        await message.reply("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç.")
        return
    
    inventory_str = "\n".join([f"{item[0]}: {item[1]}" for item in inventory])
    await message.reply(f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n{inventory_str}")    

@app.on_message(filters.command("user"))
async def show_user(client: Client, message: Message):
    user_id = message.from_user.id
    if user_id not in API_OWNER:
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /user (id)")
        return
    
    user_id = args[1]
    user_data = get_user_data(user_id)
    await message.reply(f"–Æ–∑–µ—Ä: {user_data['username']}\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {user_data['money']}\n–í—ã–∏–≥—Ä—ã—à–Ω—ã—à: {user_data['win_count']}\n–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—à: {user_data['lose_count']}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: {user_data['last_bonus']}\n–°—Ç–∞—Ç—É—Å: {user_data['status']}")

top1, game1, ti, spammers = ["MrFezix", 3], 0, time.time(), []


import re

def _to_decimal_safe(x: Union[None, int, float, str, Decimal]) -> Optional[Decimal]:
    if x is None:
        return None
    if isinstance(x, Decimal):
        return x
    try:
        return Decimal(str(x))
    except Exception:
        return None

def parse_bet_amount(arg: str, user_money: Optional[Union[int, float, str, Decimal]] = None) -> int:
    if arg is None:
        return -1

    s = str(arg).strip().lower()
    s = s.replace(" ", "").replace("_", "")

    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ "–≤—Å–µ" –≤–∞—Ä—ñ–∞–Ω—Ç–∏
    if s in ("–≤—Å–µ", "–≤—Å—ë", "all"):
        um = _to_decimal_safe(user_money)
        if um is None:
            return -1
        try:
            return int(um)
        except Exception:
            return -1

    m = re.fullmatch(r'([0-9]+(?:[.,][0-9]{1,2})?)([k–∫]*)', s)
    if not m:
        return -1

    num_str, k_suffix = m.groups()
    num_str = num_str.replace(',', '.')
    try:
        num = Decimal(num_str)
    except Exception:
        return -1

    multiplier = Decimal(1000) ** len(k_suffix)
    result = num * multiplier

    try:
        return int(result)  # —É—Å—ñ–∫–∞–Ω–Ω—è –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏
    except Exception:
        return -1
    
def spin_roulette():
    return randint(0, 36)


def get_color(number):
    if number == 0:
        return "–∑–µ–ª–µ–Ω—ã–π"
    red_numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
    return "–∫—Ä–∞—Å–Ω—ã–π" if number in red_numbers else "—á–µ—Ä–Ω—ã–π"


def is_even(number):
    return number % 2 == 0 and number != 0


@rate_limit
async def requires_registration(func):
    async def wrapper(client, message):
        print(f"[DEBUG] –î–µ–∫–æ—Ä–∞—Ç–æ—Ä requires_registration –¥–ª—è {func.__name__}, –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        if not check_user(message.from_user.id):
            await message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ —Ä–µ–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        return await func(client, message)

    return wrapper


async def get_all_users_data():
    conn = sqlite3.connect(DBB)
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, first_name, money, status FROM crash")
    users = cursor.fetchall()
    conn.close()
    return users

async def set_user_drill_data(user_id, type, value):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE drill SET " + type + " =? WHERE user_id = ?", (value, user_id))
    db.commit()
    db.close()

async def get_all_users_ids():
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT id FROM crash")
    result = cursor.fetchall()
    db.close()
    return [user_id[0] for user_id in result]

async def update_user_data(user_id, username, first_name):
    try:
        with sqlite3.connect(DBB) as db:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DBB –≤–º–µ—Å—Ç–æ "users.db"
            cursor = db.cursor()
            cursor.execute("SELECT id FROM crash WHERE id = ?", (user_id,))
            exists = cursor.fetchone()

            username = username or f"User_{user_id}"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ None
            first_name = first_name or "NoName"

            if exists:
                cursor.execute("UPDATE crash SET username = ?, first_name = ? WHERE id = ?", 
                              (username, first_name, user_id))
            else:
                cursor.execute("INSERT INTO crash (id, username, money, first_name) VALUES (?, ?, ?, ?)", 
                              (user_id, username, 10000, first_name))
                cursor.execute("INSERT INTO drill (user_id) VALUES (?)", (user_id,))
            
            db.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –≤ update_user_data: {e}")
        raise  # –ü–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

async def start_command(client, message):
    if message.chat.type == "private":
        if not check_user(message.from_user.id):
            register_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
            await message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å 1000 –º–æ–Ω–µ—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π /hb –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
        else:
            await message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n–ò—Å–ø–æ–ª—å–∑—É–π /hb –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
    else:
        await message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hb –∏–ª–∏ —Å–ø–∏—Å–æ–∫.")


async def register_command(client, message):
    user_id = message.from_user.id
    username = message.from_user.username
    if await check_user(user_id):
        return
    else:
        register_user(user_id, username, message.from_user.first_name)
        await message.reply_text("<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>")
        
async def profile_command_short(client, message):
    args = message.text.split()
    if len(args) == 1:
        pass
    else:
        return
    await profile_command(client, message)


@app.on_message(filters.command("cpas"))
async def admin_commands(client, message: Message):
    if message.from_user.id not in API_OWNER:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    admin_commands = """
    üõ† <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞:</b>
    
    /cpas - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    /wipe - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    /savedb - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    /set_status - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    /hhh - –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    /uhhh - –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /wipe_db - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    /user - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    /uinv - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    await message.reply(admin_commands)


async def profile_command(client, message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        await message.reply_text("<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /ss</b>")
        return
    BOT1 = await app.get_me()
    BOT_USERNAME = BOT1.username
    if user_id in ADMINS:

    	await message.reply_text(
        f"üî•<b>–ü—Ä–æ—Ñ–∏–ª—å:\nüìù–ò–º—è: @{user_data['username']}</b>\nü™™<b>–ê–π–¥–∏: </b><code>{user_data['id']}</code>\nüí∞<b>–î–µ–Ω—å–≥–∏:</b><code> {format_balance(user_data['money'])}</code>\nüìâ<b>–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ:</b><code> {format_balance(user_data['lose_count'])}</code>\nüìà<b>–í—ã–∏–≥—Ä—ã—à:</b><code> {format_balance(user_data['win_count'])}</code>\n"
        f"üìä<b>–°—Ç–∞—Ç—É—Å:</b> {emojis[user_data['status']]}\nüîó<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b> <code>https://t.me/{BOT_USERNAME}?start=ref_{user_id}</code>\n\n"
        f"[<b><i>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ‚úÖ</i></b>]")
    else:
    	await message.reply_text(
        f"üî•<b>–ü—Ä–æ—Ñ–∏–ª—å:\nüìù–ò–º—è: @{user_data['username']}</b>\nü™™<b>–ê–π–¥–∏: </b><code>{user_data['id']}</code>\nüí∞<b>–î–µ–Ω—å–≥–∏:</b><code> {format_balance(user_data['money'])}</code>\nüìâ<b>–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ:</b><code> {format_balance(user_data['lose_count'])}</code>\nüìà<b>–í—ã–∏–≥—Ä—ã—à:</b><code> {format_balance(user_data['win_count'])}</code>\n"
        f"üìä<b>–°—Ç–∞—Ç—É—Å:</b> {emojis[user_data['status']]}\nüîó<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b> <code>https://t.me/{BOT_USERNAME}?start=ref_{user_id}</code>")

# @app.on_message(filters.command("new_promo"))
async def create_promo_command(client, message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ client ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç Client
    if not hasattr(client, 'get_me'):
        await message.reply_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–∫—Ç client.")
        return
    
    result = message.text.split()
    if len(result) < 4:
        await message.reply_text("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /new_promo (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π)</i>")
        return

    promo_name = result[1]
    money = parse_bet_amount(result[2], get_user_data(message.from_user.id)['money'])
    activations = int(result[3])    

    args = message.text.split()
    result, error = await validate_promo_args(promo_name, money, activations)
    if error:
        await message.reply_text(error)
        return

    db = sqlite3.connect(DBB)
    cursor = db.cursor()

    cursor.execute("SELECT is_active FROM promos WHERE name = ?", (promo_name,))
    existing = cursor.fetchone()
    if existing:
        if existing[0] == 0:
            await message.reply_text("<i>–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º.</i>")
        else:
            await message.reply_text("<i>–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        cursor.execute("SELECT 1 FROM promos WHERE name = ?", (promo_name,))
        if cursor.fetchone():
            await message.reply_text("<i>–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</i>")
            return

        if message.from_user.id in API_OWNER:
            # –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ API ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º
            cursor.execute("INSERT INTO promos (name, money, activations) VALUES (?, ?, ?)",
                          (promo_name, money, activations))
            db.commit()
            bot_data = await client.get_me()
            await message.reply_text(
                f"<b>–üp–æ–º–æ–∫–æ–¥</b> {promo_name} <b>—Å–æ–∑–¥–∞–Ω! <a href='t.me/{bot_data.username}?start=promo_{promo_name}'>–¢–´–ö –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò</a></b>\n"
                f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ: {format_balance(money)} –º–æ–Ω–µ—Ç\n–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}\n\n"
                f"<b>–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:</b> <code>/pr {promo_name}</code>"
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
            await message.reply_text("<i>–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ—Ç –∏–º–µ–Ω–∏ –æ–±—ã—á–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</i>")
            value = money * activations
            user_data = get_user_data(message.from_user.id)
            if user_data['money'] < value:
                await message.reply_text(f"<i>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ –µ—â–µ {value - user_data['money']} –º–æ–Ω–µ—Ç.</i>")
                return

            cursor.execute("INSERT INTO promos (name, money, activations) VALUES (?, ?, ?)",
                          (promo_name, money, activations))
            cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(value), message.from_user.id))
            db.commit()
            bot_data = await client.get_me()
            await message.reply_text(
                f"<b>–üp–æ–º–æ–∫–æ–¥</b> {promo_name} <b>—Å–æ–∑–¥–∞–Ω! <a href='t.me/{bot_data.username}?start=promo_{promo_name}'>–¢–´–ö –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò</a></b>\n"
                f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ: {format_balance(money)} –º–æ–Ω–µ—Ç\n–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}\n\n"
                f"<b>–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:</b> <code>/pr {promo_name}</code>\n"
                f"–ò–ª–∏ —Å—Å—ã–ª–∫–∞: <code>t.me/{bot_data.username}?start=promo_{promo_name}</code>"
            )
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        db.close()
    
    await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>
<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {message.from_user.first_name} (@{message.from_user.username} #{message.from_user.id})
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> [–ó–ê–°–ï–ö–†–ï–ß–ï–ù–û]
<b>–°—É–º–º–∞:</b> [–ó–ê–°–ï–ö–†–ï–ß–ï–ù–û]
<b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> [–ó–ê–°–ï–ö–†–ï–ß–ï–ù–û]
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
""")

import re

async def validate_promo_args(promo_name, money, activations):
    if len(promo_name) > 15:
        return None, "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /new_promo (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π)</i>"
    
    promo_name = promo_name

    if len(promo_name) > 15:
        return None, "<i>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.</i>"
    if not re.fullmatch(r'[a-zA-Z0-9]+', promo_name):
        return None, "<i>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.</i>"
    
    if promo_name[0].isdigit():
        return None, "<i>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã.</i>"

    if not money or not activations:
        return None, "<i>–°—É–º–º–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.</i>"
    
    try:
        if money <= 0 or activations <= 0:
            return None, "<i>–°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0.</i>"
        return (promo_name, money, activations), None
    except ValueError:
        return None, "<i>–°—É–º–º–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.</i>" 
    



@app.on_message(filters.command("set_status"))
async def set_status_command(client, message):
    if message.from_user.id not in API_OWNER:
        return
    
    args = message.text.split()
    if len(args) != 3:
        await message.reply_text("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_status status_id user_id</i>")
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        status_id = int(args[1])  # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        user_id = int(args[2])    # –í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ status_id –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if status_id < 0 or status_id >= len(emojis):
            await message.reply_text(f"<i>–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0‚Äì{len(emojis)-1}</i>")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = get_user_data(user_id)
        if not user_data:
            await message.reply_text("<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.</i>")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = sqlite3.connect(DBB)
        cursor = db.cursor()
        cursor.execute("UPDATE crash SET status = ? WHERE id = ?", (status_id, user_id))
        db.commit()
        db.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        get_user = await app.get_users(user_id)
        await message.reply_text(
            f"<b>–°—Ç–∞—Ç—É—Å <a href='t.me/{get_user.username}'>{get_user.first_name}</a> –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n"
            f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {emojis[status_id]}"
        )
    except ValueError:
        await message.reply_text("<i>–û–±–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.</i>")
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

CHAT_ID = -1002596797604

async def activate_promo_command(client, message):
    user_id = message.from_user.id
    try:
        if not await check_user(user_id):
            await message.reply_text("<i>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.</i>")
            return

        try:
            member = await client.get_chat_member(CHAT_ID, user_id)
            if member.status not in [ChatMemberStatus.MEMBER, ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]:
                btn = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("–ó–∞–π—Ç–∏ –≤ —á–∞—Ç", url=f"https://t.me/chatFerzister")
                        ]
                    ])
                await message.reply_text("<i>–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.</i>", reply_markup=btn)
                return
        except Exception:
            btn = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("–ó–∞–π—Ç–∏ –≤ —á–∞—Ç", url=f"https://t.me/chatFerzister")
                    ]
                ])
            await message.reply_text("<i>–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.</i>", reply_markup=btn)
            return

        promo_name = message.text.split()[1]
        db = sqlite3.connect(DBB)
        cursor = db.cursor()

        cursor.execute("SELECT money, activations, is_active FROM promos WHERE name = ?", (promo_name,))
        promo = cursor.fetchone()
        if not promo:
            await message.reply_text("<i>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>")
            db.close()
            return

        money, activations, is_active = promo

        if not is_active:
            await message.reply_text("<i>–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.</i>")
            db.close()
            return

        cursor.execute("SELECT 1 FROM user_promos WHERE user_id = ? AND promo_name = ?", (user_id, promo_name))
        if cursor.fetchone():
            await message.reply_text("<i>–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.</i>")
            db.close()
            return

        if activations <= 0:
            cursor.execute("UPDATE promos SET is_active = 0 WHERE name = ?", (promo_name,))
            db.commit()
            await message.reply_text("<i>–£ —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.</i>")
            db.close()
            return

        cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(money), user_id))
        cursor.execute("INSERT INTO user_promos (user_id, promo_name) VALUES (?, ?)", (user_id, promo_name))
        cursor.execute("UPDATE promos SET activations = activations - 1 WHERE name = ?", (promo_name,))
        db.commit()

        await message.reply_text(f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n–ù–∞—á–∏—Å–ª–µ–Ω–æ {money} –º–æ–Ω–µ—Ç.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 0 –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        cursor.execute("SELECT activations FROM promos WHERE name = ?", (promo_name,))
        remaining = cursor.fetchone()[0]
        if remaining <= 0:
            cursor.execute("UPDATE promos SET is_active = 0 WHERE name = ?", (promo_name,))
            db.commit()
            await message.reply_text("<i>–£ —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –æ–Ω –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.</i>")

        db.close()

    except IndexError:
        await message.reply_text("<i>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</i>")
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@app.on_message(filters.command("cpr"))
async def check_promo_command(client, message):
    args = message.text.split()
    if len(args) != 2:
        await message.reply_text("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cpr (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ)</i>")
        return

    promo_name = args[1]
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT money, activations, is_active FROM promos WHERE name = ?", (promo_name,))
    promo = cursor.fetchone()
    db.close()

    if not promo:
        await message.reply_text("<i>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>")
        return

    money, activations, is_active = promo
    status = "–ê–∫—Ç–∏–≤–µ–Ω" if is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    await message.reply_text(
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ:</b>\n"
        f"üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{promo_name}</code>\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> <code>{money}</code>\n"
        f"üîÑ <b>–û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{activations}</code>\n"
        f"‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> <code>{status}</code>"
    )

async def bonus_command(client, message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ø–æ–ª—É—á–∞–ª –ª–∏ –±–æ–Ω—É—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    if user_data and user_data["last_bonus"]:
        last_bonus = datetime.fromisoformat(user_data["last_bonus"])
        time_since_last_bonus = now - last_bonus
        if time_since_last_bonus < timedelta(hours=1):
            remaining_time = timedelta(hours=1) - time_since_last_bonus
            hours, remainder = divmod(remaining_time.total_seconds(), 3600)
            minutes = divmod(remainder, 60)[0]
            await message.reply_text(
                f"<i>–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {int(hours)}—á {int(minutes)}–º.</i>"
            )
            return

    # –ë–æ–Ω—É—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_bonus_map = {
        0:  [5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000],
        1:  [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000],
        2:  [20000, 40000, 60000, 80000, 100000, 120000, 140000, 160000, 180000, 200000],
        3:  [40000, 80000, 120000, 160000, 200000, 240000, 280000, 320000, 360000, 400000],
        4:  [80000, 160000, 240000, 320000, 400000, 480000, 560000, 640000, 720000, 800000],
        5:  [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000],
        6:  [300000, 600000, 900000, 1200000, 1500000, 1800000, 2100000, 2400000, 2700000, 3000000],
        7:  [700000, 1400000, 2100000, 2800000, 3500000, 4200000, 4900000, 5600000, 6300000, 7000000],
        8:  [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000, 10000000],
        9:  [5000000, 10000000, 15000000, 20000000, 25000000, 30000000, 35000000, 40000000, 45000000, 50000000],
        10: [10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000, 100000000],
        11: [30000000, 60000000, 90000000, 120000000, 150000000, 180000000, 210000000, 240000000, 270000000, 300000000],
        12: [50000000, 100000000, 150000000, 200000000, 250000000, 300000000, 350000000, 400000000, 450000000, 500000000],
        13: [70000000, 140000000, 210000000, 280000000, 350000000, 420000000, 490000000, 560000000, 630000000, 700000000],
    }

    user_status = user_data.get("status", 0)
    possible_bonuses = status_bonus_map.get(user_status, status_bonus_map[0])

    bonus = choice(possible_bonuses)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute(
        "UPDATE crash SET money = money + ?, last_bonus = ? WHERE id = ?",
        (bonus, now.isoformat(), user_id)
    )
    db.commit()
    db.close()

    await message.reply_text(
        f"<b>üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å</b> <code>{format_balance(bonus)}</code> <b>–º–æ–Ω–µ—Ç!</b>\n"
        f"<i>–í–∞—à —Å—Ç–∞—Ç—É—Å: {emojis[user_status]}</i>"
    )


def parse_bet_input(arg: str, user_money: Optional[Union[int, float, str, Decimal]] = None) -> int:
    if arg is None:
        return -1

    s = str(arg).strip().lower()
    s = s.replace(" ", "").replace("_", "")

    if s in ("–≤—Å–µ", "–≤—Å—ë", "all"):
        um = _to_decimal_safe(user_money)
        if um is None:
            return -1
        try:
            return int(um)
        except Exception:
            return -1

    m = re.fullmatch(r'([0-9]+(?:[.,][0-9]{1,2})?)([k–∫]*)', s)
    if not m:
        return -1

    num_str, k_suffix = m.groups()
    num_str = num_str.replace(',', '.')
    try:
        num = Decimal(num_str)
    except Exception:
        return -1

    multiplier = Decimal(1000) ** len(k_suffix)
    result = num * multiplier

    try:
        return int(result)
    except Exception:
        return -1

# –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç—Å—è —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É —Ç–µ–±—è –≤ –∫–æ–¥–µ:
# spin_roulette(), get_color(number), is_even(number), format_balance(n)
# –∞ —Ç–∞–∫–∂–µ get_user_data(user_id) -> {'money': ...}, set_win_monet, set_lose_monet

async def roulette_command(client, message: Message):
    try:
        text = message.text or ""
        parts = text.split()

        if len(parts) < 3:
            await message.reply_text("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä—É–ª (—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏) (—Å—Ç–∞–≤–∫–∞)</i>\n–ü—Ä–∏–º–µ—Ä: —Ä—É–ª 1k —á–µ—Ç")
            return

        bet_amount_str = parts[1]
        prediction_raw = parts[2].lower()

        # –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
        user_id = message.from_user.id
        user_data = get_user_data(user_id)  # –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å 'money'
        bet_amount = parse_bet_amount(bet_amount_str, user_data['money'])

        if bet_amount is None:
            await message.reply_text("<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏.</i>")
            return
        if bet_amount < 10:
            await message.reply_text("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç.</i>")
            return
        if user_data['money'] < bet_amount:
            await message.reply_text("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</i>")
            return

        # –û–ø—Ä–µ–¥–µ–ª–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
        pred_num = None
        pred_str = None
        if re.match(r"^\d+$", prediction_raw):
            pred_num = int(prediction_raw)
            if pred_num < 0 or pred_num > 36:
                await message.reply_text("<i>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0-36.</i>")
                return
        else:
            pred_str = prediction_raw

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç–∞–≤–æ–∫ (—Å—Ç—Ä–æ–∫–∏)
        valid_predictions = {
            "–∫—Ä–∞—Å–Ω–æ–µ", "–∫—Ä–∞", "red",
            "—á–µ—Ä–Ω–æ–µ", "—á–µ—Ä", "black",
            "—á–µ—Ç–Ω–æ–µ", "—á–µ—Ç", "even", "—á—ë—Ç",
            "–Ω–µ—á–µ—Ç–Ω–æ–µ", "–Ω–µ—á–µ—Ç", "odd", "–Ω–µ—á—ë—Ç",
            "1-12", "13-24", "25-36",
            "–±–æ–ª", "–±–æ–ª—å—à–µ", "big",
            "–º–∞–ª", "–º–µ–Ω—å—à–µ", "small",
            "–∑–µ—Ä–æ", "zero", "–∑–µ–ª–µ–Ω—ã–π", "–∑–µ–ª–µ–Ω–æ–µ"
        }

        if pred_num is None and pred_str not in valid_predictions:
            await message.reply_text(
                "<i>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏.</i>\n–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞–≤–∫–∏: <code>–∫—Ä–∞</code>, <code>—á–µ—Ä</code>, <code>—á–µ—Ç</code>, <code>–Ω–µ—á–µ—Ç</code>, "
                "<code>1-12</code>, <code>13-24</code>, <code>25-36</code>, <code>–±–æ–ª</code>, <code>–º–∞–ª</code>, <code>–∑–µ—Ä–æ</code> –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç <i>0 –¥–æ 36</i>"
            )
            return

        # –ö—Ä—É—Ç–∏–ª–∫–∞
        winning_number = spin_roulette()  # int 0..36
        winning_color = get_color(winning_number)  # –æ–∂–∏–¥–∞–µ—Ç—Å—è '–∫—Ä–∞—Å–Ω—ã–π'/'—á–µ—Ä–Ω—ã–π'/'–∑–µ–ª–µ–Ω—ã–π'
        winning_even = is_even(winning_number)  # bool, –æ–±—ã—á–Ω–æ False –¥–ª—è 0

        payout = 0.0

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–∏
        if pred_num is not None:
            if winning_number == pred_num:
                payout = bet_amount * 35
        else:
            # —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if pred_str in ("–∫—Ä–∞", "–∫—Ä–∞—Å–Ω–æ–µ", "red") and winning_color == "–∫—Ä–∞—Å–Ω—ã–π":
                payout = bet_amount * 1.9
            elif pred_str in ("—á–µ—Ä", "—á–µ—Ä–Ω–æ–µ", "black") and winning_color == "—á–µ—Ä–Ω—ã–π":
                payout = bet_amount * 1.9
            elif pred_str in ("—á–µ—Ç", "—á–µ—Ç–Ω–æ–µ", "even", "—á—ë—Ç") and winning_even and winning_number != 0:
                payout = bet_amount * 1.9
            elif pred_str in ("–Ω–µ—á–µ—Ç", "–Ω–µ—á–µ—Ç–Ω–æ–µ", "odd", "–Ω–µ—á—ë—Ç") and (not winning_even) and winning_number != 0:
                payout = bet_amount * 1.9
            elif pred_str == "1-12" and 1 <= winning_number <= 12:
                payout = bet_amount * 2.7
            elif pred_str == "13-24" and 13 <= winning_number <= 24:
                payout = bet_amount * 2.7
            elif pred_str == "25-36" and 25 <= winning_number <= 36:
                payout = bet_amount * 2.7
            elif pred_str in ("–±–æ–ª", "–±–æ–ª—å—à–µ", "big") and 19 <= winning_number <= 36:
                payout = bet_amount * 1.9
            elif pred_str in ("–º–∞–ª", "–º–µ–Ω—å—à–µ", "small") and 1 <= winning_number <= 18:
                payout = bet_amount * 1.9
            elif pred_str in ("–∑–µ—Ä–æ", "zero", "–∑–µ–ª–µ–Ω—ã–π", "–∑–µ–ª–µ–Ω–æ–µ") and winning_number == 0:
                payout = bet_amount * 36

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –ë–î: –¥–µ–ª–∞–µ–º net-–ø—Ä–∏–ø–∏—Å—ã–≤–∞–Ω–∏–µ (–≤—ã–∏–≥—Ä—ã—à - —Å—Ç–∞–≤–∫–∞) –µ—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª, –∏–Ω–∞—á–µ –≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É
        db = sqlite3.connect(DBB)
        cursor = db.cursor()
        if payout > 0:
            net = float(payout - bet_amount)  # —á–∏—Å—Ç–∞—è –ø—Ä–∏–±–∞–≤–∫–∞ –∫ –±–∞–ª–∞–Ω—Å—É
            cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (net, user_id))
            db.commit()
            new_balance = user_data['money'] + net
            await set_win_monet(user_id, payout)
            await message.reply_text(
                f"üí∏ <b>–°—Ç–∞–≤–∫–∞:</b> <code>{format_balance(bet_amount)}</code>\n"
                f"üéâ <b>–í—ã–∏–≥—Ä—ã—à:</b> <code>{format_balance(payout)}</code>\n"
                f"üìà <b>–í—ã–ø–∞–ª–æ:</b> <code>{winning_number}</code> ({winning_color}, "
                f"{'—á–µ—Ç–Ω–æ–µ' if winning_even and winning_number != 0 else '–Ω–µ—á–µ—Ç–Ω–æ–µ' if not winning_even and winning_number != 0 else '–∑–µ–ª–µ–Ω—ã–π'})\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{format_balance(new_balance)}</code>"
            )
        else:
            # –ø—Ä–æ–∏–≥—Ä—ã—à: —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
            cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(bet_amount), user_id))
            db.commit()
            new_balance = user_data['money'] - bet_amount
            await set_lose_monet(user_id, bet_amount)
            await message.reply_text(
                f"üí∏ <b>–°—Ç–∞–≤–∫–∞:</b> <code>{format_balance(bet_amount)}</code>\n"
                f"üéü <b>–ü—Ä–æ–∏–≥—Ä—ã—à:</b> <code>{format_balance(bet_amount)}</code>\n"
                f"üìà <b>–í—ã–ø–∞–ª–æ:</b> <code>{winning_number}</code> ({winning_color}, "
                f"{'—á–µ—Ç–Ω–æ–µ' if winning_even and winning_number != 0 else '–Ω–µ—á–µ—Ç–Ω–æ–µ' if not winning_even and winning_number != 0 else '–∑–µ–ª–µ–Ω—ã–π'})\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{format_balance(new_balance)}</code>"
            )
        db.close()

    except Exception as e:
        # –≤—ã–≤–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@app.on_message(filters.command("new_channel_promo"))
async def create_channel_promo_command(client, message):
    user_id = message.from_user.id
    if user_id not in API_OWNER:
        await message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split()
    if len(args) != 4:
        await message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /new_channel_promo (–Ω–∞–∑–≤–∞–Ω–∏–µ) (—Å—É–º–º–∞) (–∞–∫—Ç–∏–≤–∞—Ü–∏–∏)")
        return

    promo_name = args[1]
    try:
        money = float(args[2])
        activations = int(args[3])
    except ValueError:
        await message.reply_text("‚ùå –°—É–º–º–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    try:
        cursor.execute("INSERT INTO promos (name, money, activations) VALUES (?, ?, ?)", (promo_name, money, activations))
        db.commit()
        await message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_name}' —Å–æ–∑–¥–∞–Ω —Å –Ω–∞–≥—Ä–∞–¥–æ–π {money} –º–æ–Ω–µ—Ç –∏ {activations} –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏.")
        
        channel_text = (
            "üéâ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!</b> üéâ\n\n"
            f"üîë <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> <code>{promo_name}</code>\n"
            f"üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {format_balance(money)} –º–æ–Ω–µ—Ç\n"
            f"üìä <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {activations}\n\n"
            "üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤ –±–æ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        )
        
        channel_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", url=f"http://t.me/Bfjsjdjndndbot?start=promo_{promo_name}")]
        ])
        
        await app.send_message("GG_dangerizardhe", channel_text, reply_markup=channel_markup)
        
    except sqlite3.IntegrityError:
        await message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        db.close()


# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –∫—Ä—É—Ç—è—Ç –∫–æ–ª–µ—Å–æ
active_wheel_players = set()

@app.on_message(filters.command("wheel") | filters.regex(r"–∫–æ–ª–µ—Å–æ", flags=re.IGNORECASE))
async def wheel_command(client, message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data:
        await message.reply_text("<i>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.</i>")
        return

    if user_id in active_wheel_players:
        await message.reply_text("<i>–í—ã —É–∂–µ –∫—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã.</i>")
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.reply_text("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wheel —Å—É–º–º–∞_—Å—Ç–∞–≤–∫–∏</i>")
        return

    bet_amount = parse_bet_amount(parts[1], user_data['money'])
    if bet_amount is None or bet_amount < 10:
        await message.reply_text("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç.</i>")
        return
    if user_data['money'] < bet_amount:
        await message.reply_text("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.</i>")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    active_wheel_players.add(user_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    asyncio.create_task(run_wheel_game(client, message, bet_amount, user_id))

async def run_wheel_game(client, message: Message, bet_amount: int, user_id: int):
    import random as rnd
    import asyncio
    import sqlite3

    try:
        # –°–æ–æ–±—â–µ–Ω–∏–µ "–ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è..."
        status_msg = await message.reply_text("üé° –ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è...\n\n<b>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è:</b>\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: 16%\nx0.2: 18%\nx0.5: 17%\nx1: 16%\nx1.5: 13%\nx2: 11%\nx5: 9%\n")

        # –ñ–¥—ë–º 1.5 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(1.5)

        # –°–µ–∫—Ç–æ—Ä–∞
        sectors_common = ["‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à", "x0.2", "x0.5"]
        sectors_rare = [ "x1", "x1.5", "x2", "x5"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ç–æ—Ä (—Å —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–æ–π)
        if bet_amount < 1000000000:
            final_sector = rnd.choice(sectors_common if rnd.random() < (2/3) else sectors_rare)
        else:
            final_sector = rnd.choice(sectors_common if rnd.random() < (3/4) else sectors_rare)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
        multiplier = 0.0
        if final_sector != "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à" and final_sector.startswith("x"):
            multiplier = float(final_sector[1:])
        win_amount = int(bet_amount * multiplier)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ
        db = sqlite3.connect(DBB)
        cursor = db.cursor()
        cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(bet_amount), user_id))
        if win_amount > 0:
            cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(win_amount), user_id))
        db.commit()
        db.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if win_amount > bet_amount:
            await set_win_monet(user_id, win_amount - bet_amount)
        else:
            await set_lose_monet(user_id, bet_amount - win_amount)

        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_text = (
            f"üé° <b>–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã</b>\n"
            f"–°–µ–∫—Ç–æ—Ä: <b>{final_sector}</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <code>{format_balance(bet_amount)}</code>\n"
            f"–í—ã–∏–≥—Ä—ã—à: <code>{format_balance(win_amount)}</code>"
        )
        await status_msg.edit_text(final_text)

    finally:
        # –£–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        active_wheel_players.discard(user_id)



@app.on_message(filters.command("lottery") | filters.regex(r"–ª–æ—Ç–µ—Ä–µ—è", flags=re.IGNORECASE))
async def lottery_command(client, message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not user_data:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–∫–∏
    args = message.text.split()
    if len(args) < 2:
        await message.reply("üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É. –ü—Ä–∏–º–µ—Ä: /lottery 100000")
        return

    bet = parse_bet_amount(args[1], user_data['money'])
    if not bet or bet <= 0:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏.")
        return
    if user_data['money'] < bet:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(bet), user_id))
    db.commit()
    db.close()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–Ω–∞—á–∫–æ–≤
    slots = [choice(LOTTERY_ICONS) for _ in range(5)]
    result_text = " ".join(slots)

    # –ü–æ–¥—Å—á—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    max_count = max(slots.count(icon) for icon in LOTTERY_ICONS)
    progress = f"{max_count}/3"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
    if max_count >= 3:
        prize = bet * 3
        db = sqlite3.connect(DBB)
        cursor = db.cursor()
        cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(prize), user_id))
        db.commit()
        db.close()
        await message.reply(
            f" {result_text}\n\n"
            f"üìä –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {progress}\n"
            f"üçÄ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {format_balance(prize)} üí∞"
        )
    else:
        await message.reply(
            f" {result_text}\n\n"
            f"üìä –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {progress}\n"
            f"üòî –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_balance(bet)} üí∞"
        )

async def buy_status_command(client, message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply_text("<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (1-11).</i>")
            return
        status_id = int(parts[1])
    except (IndexError, ValueError):
        await message.reply_text("<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (1-11).</i>")
        return
    if not 1 <= status_id <= 11:
        await message.reply_text("<i>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç 1 –¥–æ 11</i>")
        return
    if user_data['status'] >= status_id:
        await message.reply_text("<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ö—É–∂–µ —Ç–µ–∫—É—â–µ–≥–æ.</i>")
        return
    price = emoji_prices[status_id]
    if user_data['money'] < price:
        await message.reply_text("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.</i>")
        return
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET money = money - ?, status = ? WHERE id = ?", (float(price), status_id, user_id))
    db.commit()
    db.close()
    await message.reply_text(f"<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Å—Ç–∞—Ç—É—Å {emojis[status_id]} –∑–∞</b> <code>{price}</code> <b>–º–æ–Ω–µ—Ç!</b>")


# async def top_balance_command(client, message):
#     db = sqlite3.connect(DBB)
#     cursor = db.cursor()
#     cursor.execute("SELECT username, money, status FROM crash ORDER BY money DESC LIMIT 10")
#     top_users = cursor.fetchall()
#     db.close()
#     if not top_users:
#         await message.reply_text("<i>–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>")
#         return
#     top_message = "<b>üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n"
#     for i, (username, money, status) in enumerate(top_users):
#         top_message += f"<b>{i + 1})</b> {username} {emojis[status]} - <i>{format_balance(money)} –º–æ–Ω–µ—Ç</i>\n"
#     await message.reply_text(top_message)

async def get_top_users(order_by="money", order="DESC", limit=10):
    try:
        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            query = f"""
                SELECT id, username, first_name, money, status, win_count, lose_count
                FROM crash
                WHERE hidden = 0
                ORDER BY {order_by} {order}
                LIMIT ?
            """
            cursor.execute(query, (limit,))
            return cursor.fetchall()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

async def get_top_users_raw(order_by="money", order="DESC", limit=10):
    """–¢–æ–ø –ø–æ –ª—é–±–æ–º—É –ø–æ–ª—é, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ hidden."""
    try:
        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            query = f"""
                SELECT id, username, first_name, money, status, win_count, lose_count
                FROM crash
                ORDER BY {order_by} {order}
                LIMIT ?
            """
            cursor.execute(query, (limit,))
            return cursor.fetchall()
    except sqlite3.Error as e:
        print(f"[DB ERROR] get_top_users_raw: {e}")
        return []

@app.on_callback_query(filters.regex(r"^top_(balance|wins|losses)$"))
async def top_balance_callback(client, callback):
    category = callback.data.split("_")[1]

    if category == "balance":
        title = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:"
        top_users = await get_top_users()
        order_by = "money"
    elif category == "wins":
        title = "üèÖ –¢–æ–ø 10 –ø–æ –ø–æ–±–µ–¥–∞–º:"
        top_users = await get_top_users_raw(order_by="win_count")
        order_by = "win_count"
    else:
        title = "üíÄ –¢–æ–ø 10 –ø–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º:"
        top_users = await get_top_users_raw(order_by="lose_count")
        order_by = "lose_count"

    if not top_users:
        return await callback.answer("–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    text = await format_top_message(top_users, f"<b>{title}</b>", order_by=order_by)

    
    all_buttons = {
        "balance": InlineKeyboardButton("üèÜ –ü–æ –±–∞–ª–∞–Ω—Å—É", callback_data="top_balance"),
        "wins": InlineKeyboardButton("üèÖ –ü–æ –ø–æ–±–µ–¥–∞–º", callback_data="top_wins"),
        "losses": InlineKeyboardButton("üíÄ –ü–æ —Å–ª–∏–≤–∞–º", callback_data="top_losses"),
    }
    keyboard = InlineKeyboardMarkup([[btn] for key, btn in all_buttons.items() if key != category])

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        print(f"[TOP ERROR] {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–ø–∞.")

async def format_top_message(users, title, order_by="money"):
    if not users:
        return "<i>–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>"

    msg = f"<b>{title}</b>\n\n"
    for i, (user_id, username, first_name, money, status, win_count, lose_count) in enumerate(users, 1):
        name = username or first_name or f"ID {user_id}"
        emoji = emojis[status] if 0 <= status < len(emojis) else ""
        
        value = {
            "money": f"{format_balance(money)}",
            "win_count": f"{format_balance(win_count)}",
            "lose_count": f"{format_balance(lose_count)}"
        }.get(order_by, f"{format_balance(money)}")

        msg += f"<b>{i})</b> {name} {emoji} ‚Äî <i>{value}</i>\n"
    return msg

async def top_balance_command(client, message):
    top_users = await get_top_users(order_by="money", order="DESC")
    if not top_users:
        return await message.reply("<i>–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>")

    text = await format_top_message(top_users, "<b>üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>", order_by="money")
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("üèÖ –ü–æ –ø–æ–±–µ–¥–∞–º", callback_data="top_wins")],
        [InlineKeyboardButton("üíÄ –ü–æ —Å–ª–∏–≤–∞–º", callback_data="top_losses")]
    ])
    await message.reply(text, reply_markup=buttons)

async def toggle_top_status(client, message):
    user_id = message.from_user.id

    with sqlite3.connect(DBB) as db:
        cursor = db.cursor()
        cursor.execute("SELECT hidden FROM crash WHERE id = ?", (user_id,))
        result = cursor.fetchone()

        if not result:
            return await message.reply("‚ùå –¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏ –≤ –∏–≥—Ä—É.")

        hidden = result[0]

        if hidden == 1:
            
            cursor.execute("UPDATE crash SET hidden = 0 WHERE id = ?", (user_id,))
            db.commit()
            return await message.reply("üîì –¢—ã —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç –≤ —Ç–æ–ø–µ!")
        else:
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üôà –°–∫—Ä—ã—Ç—å –∏–∑ —Ç–æ–ø–∞", callback_data="hide_me")]
            ])
            return await message.reply(
                "üîì –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–µ–π—á–∞—Å <b>–æ—Ç–∫—Ä—ã—Ç</b> –≤ —Ç–æ–ø–µ.",
                reply_markup=keyboard
            )

@app.on_callback_query(filters.regex("^hide_me$"))
async def hide_me_callback(client, callback):
    user_id = callback.from_user.id

    try:
        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            cursor.execute("UPDATE crash SET hidden = 1 WHERE id = ?", (user_id,))
            db.commit()

        await callback.answer("üîí –¢—ã —Å–∫—Ä—ã—Ç –∏–∑ —Ç–æ–ø–∞.", show_alert=True)
        await callback.message.edit_text(
            "üîí –¢—ã —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ç–æ–ø–∞.\n"
            "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ —Å—Ç–∞—Ç—å –≤–∏–¥–∏–º—ã–º, –≤–≤–µ–¥–∏ /st."
        )
    except Exception as e:
        print(f"[HIDE ERROR] {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏.", show_alert=True)

@app.on_message(filters.regex(r"–∏–≥—Ä—ã", flags=re.IGNORECASE))
async def help_commahnd(client, message):
    mainn_text = """
<b>üéÆ –ò–≥—Ä—ã</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<code>–†—É–ª</code> –∏–ª–∏ <code>/rul &lt;—Å—É–º–º–∞&gt; &lt;—Å—Ç–∞–≤–∫–∞&gt;</code> ‚Äî –†—É–ª–µ—Ç–∫–∞
<code>–ö–æ—Å—Ç–∏ &lt;—Å—É–º–º–∞&gt; | &lt;—Ç–∏–ø&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
<code>–ú–∏–Ω–µ—Ä &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ –º–∏–Ω—ã
<code>–ö—Ä–∞—à &lt;—Å—É–º–º–∞&gt; &lt;(–∏–∫—Å)&gt;</code> ‚Äî –ò–≥—Ä–∞ –∫—Ä–∞—à
<code>–î—É—ç–ª—å &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –î—É—ç–ª—å –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
<code>–ë–∞—à–Ω—è &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ –±–∞—à–Ω—é üÜï
<code>–°–µ–π—Ñ &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ —Å–µ–π—Ñ üÜï (—É–≥–∞–¥–∞–π 1 –∫–ª—é—á –∏–∑ 4)
<code>–ö–æ–ª–µ—Å–æ &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã (–Ω–∞ —Ç–µ—Å—Ç–µ)
<code>–õ–æ—Ç–µ—Ä–µ—è &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ –ª–æ—Ç–µ—Ä–µ—é (–≤—ã–±–µ–π 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏) (–Ω–∞ —Ç–µ—Å—Ç–µ)
"""
    await message.reply_text(mainn_text)

@app.on_message(filters.regex(r"—Å—Ç–∞—Ç—É—Å", flags=re.IGNORECASE) or filters.regex(r"—Å—Ç–∞—Ç—É—Å—ã", flags=re.IGNORECASE) )
async def help_commfahnd(client, message):
    mainnn_text = """
<b>üèÖ –°—Ç–∞—Ç—É—Å—ã</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
" " ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (0 üí∞) (–±–æ–Ω—É—Å –æ—Ç 5–∫ –¥–æ 50–∫)
"üëç" ‚Äî 1–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 10–∫ –¥–æ 100–∫)
"üòÄ" ‚Äî 25–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 20–∫ –¥–æ 200–∫)
"ü§Ø" ‚Äî 100–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 40–∫ –¥–æ 400–∫)
"üòé" ‚Äî 500–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 80–∫ –¥–æ 800–∫)
"üëΩ" ‚Äî 2–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 100–∫ –¥–æ 1–∫–∫)
"üëæ" ‚Äî 7.5–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 300–∫ –¥–æ 3–∫–∫)
"ü§ñ" ‚Äî 25–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 700–∫ –¥–æ 7–∫–∫)
"üëª" ‚Äî 100–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 1–∫–∫ –¥–æ 10–∫–∫)
"üëë" ‚Äî 1–∫–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 5–∫–∫ –¥–æ 50–∫–∫)
"üé©" ‚Äî 1–∫–∫–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 10–∫–∫ –¥–æ 100–∫–∫)
"üé∞" ‚Äî 10–∫–∫–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 30–∫–∫ –¥–æ 300–∫–∫)
"üéÄ" ‚Äî –ü–ª–∞—Ç–Ω—ã–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π (–±–æ–Ω—É—Å –æ—Ç 50–∫–∫ –¥–æ 500–∫–∫)
"üêç" ‚Äî –ü–ª–∞—Ç–Ω—ã–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π (–±–æ–Ω—É—Å –æ—Ç 70–∫–∫ –¥–æ 700–∫–∫)

<i>/bb (1-11) - –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!</i>

"""
    await message.reply_text(mainnn_text)




# /hb ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@app.on_message(filters.command(["hb", "—Å–ø–∏—Å–æ–∫", "–ø–æ–º–æ—â—å"]))
async def help_command(client, message):
    main_text = """
<b>üìñ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<b>‚öôÔ∏è –û—Å–Ω–æ–≤–Ω–æ–µ</b>
<code>/ss</code> ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
<code>/meb</code> –∏–ª–∏ <code>–Ø</code> ‚Äî –ü—Ä–æ—Ñ–∏–ª—å
<code>–ë–æ–Ω—É—Å</code> ‚Äî –ë–æ–Ω—É—Å (–∫–∞–∂–¥—ã–µ 1 —á–∞—Å)
<code>/pr &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</code> ‚Äî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
<code>/–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ &lt;—Å—É–º–º–∞&gt; &lt;–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è&gt;</code> ‚Äî –ü–µ—Ä–µ–≤–æ–¥
<code>/bb (1-9)</code> –∏–ª–∏ <code>/–∫—É–ø–∏—Ç—å (1-9)</code> ‚Äî –ö—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å
<code>/—Ç–æ–ø</code> –∏–ª–∏ <code>—Ç–æ–ø</code> ‚Äî –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤
<code>/hb</code> –∏–ª–∏ <code>—Å–ø–∏—Å–æ–∫</code> ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
<code>/new_promo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞] [–∞–∫—Ç–∏–≤–∞—Ü–∏–π]</code> ‚Äî –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
<code>/inv</code> ‚Äî –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
<code>/market</code> ‚Äî –ú–∞—Ä–∫–µ—Ç
<code>/shop</code> ‚Äî –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
<code>—Ä–µ—Ñ</code> ‚Äî –í–∞—à–∞ —Ä–µ—Ñ
<code>/st</code> ‚Äî –°–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ç–æ–ø–µ
<code>/farm</code> ‚Äî –§–∞—Ä–º–∏–Ω–≥
"""
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ò–≥—Ä—ã", callback_data="help:games"),
         InlineKeyboardButton("üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="help:econ")],
        [InlineKeyboardButton("üõí –ú–∞—Ä–∫–µ—Ç", callback_data="help:market"),
         InlineKeyboardButton("üèÖ –°—Ç–∞—Ç—É—Å—ã", callback_data="help:statuses")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ferzister")]
    ])
    await message.reply_text(main_text, reply_markup=kb, parse_mode=enums.ParseMode.HTML)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@app.on_callback_query(filters.regex(r"^help:(games|econ|market|statuses|main)$"))
async def help_section_cb(client, callback_query):
    section = callback_query.data.split(":")[1]

    if section == "games":
        text = """
<b>üéÆ –ò–≥—Ä—ã</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<code>–†—É–ª</code> –∏–ª–∏ <code>/rul &lt;—Å—É–º–º–∞&gt; &lt;—Å—Ç–∞–≤–∫–∞&gt;</code> ‚Äî –†—É–ª–µ—Ç–∫–∞
<code>–ö–æ—Å—Ç–∏ &lt;—Å—É–º–º–∞&gt; | &lt;—Ç–∏–ø&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
<code>–ú–∏–Ω–µ—Ä &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ –º–∏–Ω—ã
<code>–ö—Ä–∞—à &lt;—Å—É–º–º–∞&gt; &lt;(–∏–∫—Å)&gt;</code> ‚Äî –ò–≥—Ä–∞ –∫—Ä–∞—à
<code>–î—É—ç–ª—å &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –î—É—ç–ª—å –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
<code>–ë–∞—à–Ω—è &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ –±–∞—à–Ω—é üÜï
<code>–°–µ–π—Ñ &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ —Å–µ–π—Ñ üÜï (—É–≥–∞–¥–∞–π 1 –∫–ª—é—á –∏–∑ 4)
<code>–ö–æ–ª–µ—Å–æ &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã (–Ω–∞ —Ç–µ—Å—Ç–µ)
<code>–õ–æ—Ç–µ—Ä–µ—è &lt;—Å—É–º–º–∞&gt;</code> ‚Äî –ò–≥—Ä–∞ –≤ –ª–æ—Ç–µ—Ä–µ—é (–≤—ã–±–µ–π 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏) (–Ω–∞ —Ç–µ—Å—Ç–µ)
"""
        nav = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="help:main")]])
        await callback_query.message.edit_text(text, reply_markup=nav, parse_mode=enums.ParseMode.HTML)

    elif section == "econ":
        text = """
<b>üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞ / –°–µ—Ä–≤–∏—Å—ã</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<code>/pr &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</code> ‚Äî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
<code>/–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ &lt;—Å—É–º–º–∞&gt; &lt;–∞–π–¥–∏&gt;</code> ‚Äî –ü–µ—Ä–µ–≤–æ–¥
<code>/bb (1-9)</code> / <code>/–∫—É–ø–∏—Ç—å (1-9)</code> ‚Äî –ö—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å
<code>/new_promo ...</code> ‚Äî –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (—Å–ø–∏—à–µ—Ç—Å—è —Å –±–∞–ª–∞–Ω—Å–∞)
<code>/inv</code> ‚Äî –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
<code>/market</code>, <code>/shop</code> ‚Äî –ú–∞—Ä–∫–µ—Ç/–ü–æ–∫—É–ø–∫–∞
<code>—Ä–µ—Ñ</code> ‚Äî –í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞
<code>/—Ç–æ–ø</code> ‚Äî –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
<code>/st</code> ‚Äî –°–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ç–æ–ø–µ
<code>/farm</code> ‚Äî –§–∞—Ä–º–∏–Ω–≥
"""
        nav = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="help:main")]])
        await callback_query.message.edit_text(text, reply_markup=nav, parse_mode=enums.ParseMode.HTML)

    elif section == "market":
        text = """
<b>üõí –ú–∞—Ä–∫–µ—Ç</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/market</code> —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω 
–∏ <code>/shop</code> —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç.
"""
        nav = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="help:main")]])
        await callback_query.message.edit_text(text, reply_markup=nav, parse_mode=enums.ParseMode.HTML)

    elif section == "statuses":
        text = """
<b>üèÖ –°—Ç–∞—Ç—É—Å—ã</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
" " ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (0 üí∞) (–±–æ–Ω—É—Å –æ—Ç 5–∫ –¥–æ 50–∫)
"üëç" ‚Äî 1–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 10–∫ –¥–æ 100–∫)
"üòÄ" ‚Äî 25–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 20–∫ –¥–æ 200–∫)
"ü§Ø" ‚Äî 100–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 40–∫ –¥–æ 400–∫)
"üòé" ‚Äî 500–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 80–∫ –¥–æ 800–∫)
"üëΩ" ‚Äî 2–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 100–∫ –¥–æ 1–∫–∫)
"üëæ" ‚Äî 7.5–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 300–∫ –¥–æ 3–∫–∫)
"ü§ñ" ‚Äî 25–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 700–∫ –¥–æ 7–∫–∫)
"üëª" ‚Äî 100–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 1–∫–∫ –¥–æ 10–∫–∫)
"üëë" ‚Äî 1–∫–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 5–∫–∫ –¥–æ 50–∫–∫)
"üé©" ‚Äî 1–∫–∫–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 10–∫–∫ –¥–æ 100–∫–∫)
"üé∞" ‚Äî 10–∫–∫–∫–∫ üí∞ (–±–æ–Ω—É—Å –æ—Ç 30–∫–∫ –¥–æ 300–∫–∫)
"üéÄ" ‚Äî –ü–ª–∞—Ç–Ω—ã–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π (–±–æ–Ω—É—Å –æ—Ç 50–∫–∫ –¥–æ 500–∫–∫)
"üêç" ‚Äî –ü–ª–∞—Ç–Ω—ã–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π (–±–æ–Ω—É—Å –æ—Ç 70–∫–∫ –¥–æ 700–∫–∫)

<i>/bb (1-11) - –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!</i>
"""
        nav = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="help:main")]])
        await callback_query.message.edit_text(text, reply_markup=nav, parse_mode=enums.ParseMode.HTML)

    elif section == "main":
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
        main_text = """
<b>üìñ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
<b>‚öôÔ∏è –û—Å–Ω–æ–≤–Ω–æ–µ</b>
<code>/ss</code> ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
<code>/meb</code> –∏–ª–∏ <code>–Ø</code> ‚Äî –ü—Ä–æ—Ñ–∏–ª—å
<code>–ë–æ–Ω—É—Å</code> ‚Äî –ë–æ–Ω—É—Å (–∫–∞–∂–¥—ã–µ 1 —á–∞—Å)
<code>/pr &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt;</code> ‚Äî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
<code>/–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ &lt;—Å—É–º–º–∞&gt; &lt;–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è&gt;</code> ‚Äî –ü–µ—Ä–µ–≤–æ–¥
<code>/bb (1-11)</code> –∏–ª–∏ <code>/–∫—É–ø–∏—Ç—å (1-11)</code> ‚Äî –ö—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å
<code>/—Ç–æ–ø</code> –∏–ª–∏ <code>—Ç–æ–ø</code> ‚Äî –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤
<code>/hb</code> –∏–ª–∏ <code>—Å–ø–∏—Å–æ–∫</code> ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
<code>/new_promo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞] [–∞–∫—Ç–∏–≤–∞—Ü–∏–π]</code> ‚Äî –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
<code>/inv</code> ‚Äî –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
<code>/market</code> ‚Äî –ú–∞—Ä–∫–µ—Ç
<code>/shop</code> ‚Äî –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç
<code>—Ä–µ—Ñ</code> ‚Äî –í–∞—à–∞ —Ä–µ—Ñ
<code>/st</code> ‚Äî –°–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ç–æ–ø–µ
<code>/farm</code> ‚Äî –§–∞—Ä–º–∏–Ω–≥
"""
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üé≤ –ò–≥—Ä—ã", callback_data="help:games"),
             InlineKeyboardButton("üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="help:econ")],
            [InlineKeyboardButton("üõí –ú–∞—Ä–∫–µ—Ç", callback_data="help:market"),
             InlineKeyboardButton("üèÖ –°—Ç–∞—Ç—É—Å—ã", callback_data="help:statuses")],
            [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ferzister")]
        ])
        await callback_query.message.edit_text(main_text, reply_markup=kb, parse_mode=enums.ParseMode.HTML)


async def save_conf_command(client, message):
    if message.from_user.id not in API_OWNER:
        return
    
    await save_json_to_db()
    await message.reply_text("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

async def save_json_to_db(json_file="hgvvv_data.json", db_file="db.db"):
    if not os.path.exists(json_file):
        return f"–§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!"

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = sqlite3.connect(db_file)
    cursor = db.cursor()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É crash
    for user in data["crash"]:
        cursor.execute("""
            INSERT OR REPLACE INTO crash (id, username, money, stone, iron, gold, diamond, emerald, last_bonus, boor, lose_count, win_count, total_games, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            user.get("id"), user.get("username"), user.get("money"), user.get("stone", 0), user.get("iron", 0),
            user.get("gold", 0), user.get("diamond", 0), user.get("emerald", 0), user.get("last_bonus"),
            user.get("boor", 1), user.get("lose_count", 0), user.get("win_count", 0), user.get("total_games", 0),
            user.get("status", 0)
        ))

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É promos
    for promo in data["promos"]:
        cursor.execute("""
            INSERT OR REPLACE INTO promos (name, money, activations)
            VALUES (?, ?, ?)
        """, (promo.get("name"), promo.get("money"), promo.get("activations")))

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_promos
    for user_promo in data["user_promos"]:
        cursor.execute("""
            INSERT OR REPLACE INTO user_promos (user_id, promo_name)
            VALUES (?, ?)
        """, (user_promo.get("user_id"), user_promo.get("promo_name")))

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É inv (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ JSON)
    if "inv" in data:
        for inv in data["inv"]:
            cursor.execute("""
                INSERT OR REPLACE INTO inv (id, details, stone_sediments, iron_ingots, gold_bars, diamond_cores, emerald_dust, iron_ingots_dense, gold_nuggets)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                inv.get("id"), inv.get("details", 0), inv.get("stone_sediments", 0), inv.get("iron_ingots", 0),
                inv.get("gold_bars", 0), inv.get("diamond_cores", 0), inv.get("emerald_dust", 0),
                inv.get("iron_ingots_dense", 0), inv.get("gold_nuggets", 0)
            ))

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É drill (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ JSON)
    if "drill" in data:
        for drill in data["drill"]:
            cursor.execute("""
                INSERT OR REPLACE INTO drill (user_id, motor_lvl, drill_head_lvl, frame, power_source, handle, cooling, gearbox, oil, energy, max_energy, max_oil_engine, max_cooling_engine, heal_drill_engine)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                drill.get("user_id"), drill.get("motor_lvl", 1), drill.get("drill_head_lvl", 1), drill.get("frame", 1),
                drill.get("power_source", 1), drill.get("handle", 0), drill.get("cooling", 0), drill.get("gearbox", 0),
                drill.get("oil", 0), drill.get("energy", 10), drill.get("max_energy", 10), drill.get("max_oil_engine", 10),
                drill.get("max_cooling_engine", 10), drill.get("heal_drill_engine", 100)
            ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ inv –∏ drill –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ crash
    cursor.execute("SELECT id FROM crash")
    user_ids = [row[0] for row in cursor.fetchall()]

    for user_id in user_ids:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ inv, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        cursor.execute("SELECT id FROM inv WHERE id = ?", (user_id,))
        if not cursor.fetchone():
            cursor.execute("""
                INSERT INTO inv (id, details, stone_sediments, iron_ingots, gold_bars, diamond_cores, emerald_dust, iron_ingots_dense, gold_nuggets)
                VALUES (?, 0, 0, 0, 0, 0, 0, 0, 0)
            """, (user_id,))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ drill, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        cursor.execute("SELECT user_id FROM drill WHERE user_id = ?", (user_id,))
        if not cursor.fetchone():
            cursor.execute("""
                INSERT INTO drill (user_id, motor_lvl, drill_head_lvl, frame, power_source, handle, cooling, gearbox, oil, energy, max_energy, max_oil_engine, max_cooling_engine, heal_drill_engine)
                VALUES (?, 1, 1, 1, 1, 0, 0, 0, 0, 10, 10, 10, 10, 100)
            """, (user_id,))

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    db.commit()
    db.close()
    return "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ inv –∏ drill!"

async def transfer_command(client, message):
    try:
        parts = message.text.split()
        if len(parts) != 3 and not message.reply_to_message:
            await message.reply_text("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç) (ID/@username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)</i>\n–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        amount_str = parts[1] if len(parts) > 1 else None
        recipient_id = None

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∏–ª–∏ username
        if len(parts) == 3:
            recipient_id = parts[2]
            if recipient_id.startswith("@"):
                recipient_username = recipient_id[1:]
                db = sqlite3.connect(DBB)
                cursor = db.cursor()
                cursor.execute("SELECT id FROM crash WHERE username = ?", (recipient_username,))
                recipient_data = cursor.fetchone()
                db.close()
                if recipient_data:
                    recipient_id = recipient_data[0]
                else:
                    await message.reply_text("<i>–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>")
                    return
            else:
                try:
                    recipient_id = int(recipient_id)
                except ValueError:
                    await message.reply_text("<i>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</i>")
                    return

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif message.reply_to_message and message.reply_to_message.from_user:
            recipient_id = message.reply_to_message.from_user.id

        if not recipient_id:
            await message.reply_text("<i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.</i>")
            return

        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        recipient_data = get_user_data(recipient_id)

        if not recipient_data:
            await message.reply_text("<i>–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.</i>")
            return

        if recipient_id == user_id:
            await message.reply_text("<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.</i>")
            return

        amount = parse_bet_amount(amount_str, user_data['money'])
        if amount is None:
            await message.reply_text("<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</i>")
            return
        if amount < 10:
            await message.reply_text("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî 10 –º–æ–Ω–µ—Ç.</i>")
            return
        if user_data['money'] < amount:
            await message.reply_text("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</i>")
            return

        db = sqlite3.connect(DBB)
        cursor = db.cursor()
        cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(amount), user_id))
        cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(amount), recipient_id))
        db.commit()
        db.close()

        await message.reply_text(
            f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ</b> <code>{format_balance(amount)}</code> <b>–º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> <code>{recipient_data['username'] or recipient_id}</code>."
        )
    except ValueError:
        await message.reply_text("<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç) (ID/@username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)</i>")
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ø—Ä–∏–º–µ—Ä 

def encrypt_user_id(user_id: int) -> str:
    cipher_map = {
        '0': '3',
        '1': '4',
        '2': '9',
        '3': '1',
        '4': '7',
        '5': '2',
        '6': '8',
        '7': '5',
        '8': '0',
        '9': '6'
    }

    encrypted = ''.join(cipher_map.get(ch, ch) for ch in str(user_id))
    return f"https://t.me/gbursebot?start=et_{encrypted}"

async def get_link(client, message):
    try:
        user_id = message.from_user.id
        encrypted_id = encrypt_user_id(user_id)
        await message.reply(f"–í–∞—à –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Å—ã–ª–∫–∞: {encrypted_id}")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def get_hash(client, message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        parts = message.text.split()
        if len(parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /hash <ID>")
            return
            
        tg_id = parts[1]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é hash
        hash_result = hash(tg_id)
        await message.reply(f"ID: {tg_id}\nHash: {hash_result}")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    

async def dice_command(client, message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.reply_text(
                "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∫–æ—Å—Ç–∏ (—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏) (—Ç–∏–ø —Å—Ç–∞–≤–∫–∏)</i>\n–ü—Ä–∏–º–µ—Ä: /–∫–æ—Å—Ç–∏ 100 –±–æ–ª—å—à–µ\n–¢–∏–ø—ã —Å—Ç–∞–≤–æ–∫: –±–æ–ª—å—à–µ, –º–µ–Ω—å—à–µ, —Ä–∞–≤–Ω–æ, [2-12]",
            )
            return
        _, bet_amount_str, prediction = parts
        prediction = prediction.lower()
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        bet_amount = parse_bet_amount(bet_amount_str, user_data['money'])
        if bet_amount is None:
            await message.reply_text("<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏.</i>")
            return
        if bet_amount < 10:
            await message.reply_text("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç.</i>")
            return
        if user_data['money'] < bet_amount:
            await message.reply_text("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</i>")
            return
        dice_result = randint(2, 12)
        payout = 0
        valid_predictions = ["–±–æ–ª", "–±–æ–ª—å—à–µ", "–º–∞–ª", "–º–µ–Ω—å—à–µ", "—Ä–∞–≤–Ω–æ"]
        if prediction not in valid_predictions and (
                not prediction.isdigit() or not (2 <= int(prediction) <= 12)):
            await message.reply_text(
                "<i>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏.</i>\n–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞–≤–∫–∏: –±–æ–ª—å—à–µ, –º–µ–Ω—å—à–µ, —Ä–∞–≤–Ω–æ, –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 12.",
            )
            return
        if prediction in ["–±–æ–ª", "–±–æ–ª—å—à–µ"] and dice_result > 7:
            payout = bet_amount * 1.9
        elif prediction in ["–º–∞–ª", "–º–µ–Ω—å—à–µ"] and dice_result < 7:
            payout = bet_amount * 1.9
        elif prediction == "—Ä–∞–≤–Ω–æ" and dice_result == 7:
            payout = bet_amount * 5.5
        elif prediction.isdigit() and 2 <= int(prediction) <= 12 and dice_result == int(prediction):
            payout = bet_amount * 5.5
        db = sqlite3.connect(DBB)
        cursor = db.cursor()
        if payout > 0:
            cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(payout - bet_amount), user_id))
            db.commit()
            bbb = user_data['money'] + int(payout - bet_amount)
            await set_win_monet(user_id, int(payout))
            await message.reply_text(
                f"<b>üé≤ –í—ã–ø–∞–ª–æ:</b> {dice_result}\n<b>üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:</b> {format_balance(int(payout))} –º–æ–Ω–µ—Ç!\n<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {format_balance(bbb)}",
            )
        else:
            cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(bet_amount), user_id))
            db.commit()
            bbb =  user_data['money'] - bet_amount
            await set_lose_monet(user_id, bet_amount)
            await message.reply_text(
                f"<b>üé≤ –í—ã–ø–∞–ª–æ:</b> {dice_result}\n<b>üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:</b> {format_balance(bet_amount)} –º–æ–Ω–µ—Ç\n<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {format_balance(bbb)}",
            )
        db.close()
    except ValueError:
        await message.reply_text(
            "<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∫–æ—Å—Ç–∏ (—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏) (—Ç–∏–ø —Å—Ç–∞–≤–∫–∏)</i>\n–ü—Ä–∏–º–µ—Ä: –∫–æ—Å—Ç–∏ 100 –±–æ–ª—å—à–µ",
        )
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

lottery_lock = asyncio.Lock()
LOTTERY_FILE = "lottery_data.json"
LOTTERY_REWARDS = ["Losse", "1–∫", "10–∫", "5–∫", "2–∫", "500", "7.5–∫", "2.5–∫"]
LOTTERY_GIFS_DIR = "gifs"

if not os.path.exists(LOTTERY_FILE):
    with open(LOTTERY_FILE, "w") as f:
        json.dump({}, f)

def load_lottery_cooldowns() -> dict:
    with open(LOTTERY_FILE, "r") as f:
        return json.load(f)

def save_lottery_cooldowns(data: dict):
    with open(LOTTERY_FILE, "w") as f:
        json.dump(data, f)

async def show_lottery_menu(client, message):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å", callback_data="lottery:spin")]
    ])
    await message.reply("üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)





import random
import sqlite3
import json
from random import randint
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from asyncio import Lock

active_mines_games = {}          # game_id -> game_data dict
user_locks = {}

def load_game_db(game_id):
    try:
        with sqlite3.connect(DBB) as db:
            r = db.execute("SELECT game_data FROM mines_games WHERE game_id = ?", (game_id,)).fetchone()
            return json.loads(r[0]) if r else None
    except Exception as e:
        logger.exception(f"load_game_db error: {e}")
        return None

def save_game_db(game_id, game):
    try:
        with sqlite3.connect(DBB) as db:
            db.execute(
                "INSERT OR REPLACE INTO mines_games (game_id,user_id,game_data) VALUES (?,?,?)",
                (game_id, game['user_id'], json.dumps(game))
            )
            db.commit()
    except Exception as e:
        logger.exception(f"save_game_db error: {e}")

def delete_game_db(game_id):
    try:
        with sqlite3.connect(DBB) as db:
            db.execute("DELETE FROM mines_games WHERE game_id = ?", (game_id,))
            db.commit()
    except Exception as e:
        logger.exception(f"delete_game_db error: {e}")

def cleanup(game_id):
    active_mines_games.pop(game_id, None)
    delete_game_db(game_id)

# --- –ù–∞–¥—ñ–π–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è / —Ñ–æ–ª–±–µ–∫ (—Ä–µ–¥–∞–≥—É—î, –∞–±–æ —à–ª–µ –Ω–æ–≤–µ) ---
async def edit_or_send(client, chat_id, msg_id, text, reply_markup=None):
    """–°–ø—Ä–æ–±–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è; –ø—Ä–∏ –Ω–µ–≤–¥–∞—á—ñ ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    seconds = None
    # –§–æ–ª–±–µ–∫: —è–∫—â–æ –Ω–µ–º–∞—î id ‚Äî –ø—Ä–æ—Å—Ç–æ —à–ª–µ–º–æ
    if not msg_id:
        try:
            m = await client.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            return getattr(m, "id", None)
        except Exception as e:
            logger.exception(f"send_message fallback failed: {e}")
            return None

    # –°–ø—Ä–æ–±–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    try:
        await client.edit_message_text(chat_id, msg_id, text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        return msg_id
    except FloodWait as fw:
        seconds = getattr(fw, "value", getattr(fw, "x", 1))
        logger.warning(f"FloodWait during edit: {seconds}s")
        await asyncio.sleep(seconds)
        try:
            await client.edit_message_text(chat_id, msg_id, text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            return msg_id
        except Exception as e:
            logger.exception(f"edit retry failed: {e}")
    except Exception as e:
        logger.exception(f"Unexpected error during edit: {e}")

    # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–ª–æ ‚Äî —à–ª–µ–º–æ –Ω–æ–≤–µ
    try:
        m = await client.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        return getattr(m, "id", None)
    except Exception as e:
        logger.exception(f"Fallback send_message also failed: {e}")
        return None

# --- –ü–æ–±—É–¥–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mines_positions —è–≤–Ω–æ) ---
async def create_mines_keyboard(game_id, opened_cells, mines_positions, exploded, last_index, all_opened):
    btns = []
    mines_set = set(mines_positions or [])
    for i in range(25):
        if i == last_index and exploded:
            face = 'üí•'
        elif i in opened_cells:
            face = 'üåÄ'
        elif (exploded or all_opened) and i in mines_set:
            face = 'üí£'
        else:
            face = '‚ùî'
        btns.append(InlineKeyboardButton(face, callback_data=f"mines_cell_{game_id}_{i}"))
    kb = [btns[i:i+5] for i in range(0, 25, 5)]
    markup = InlineKeyboardMarkup(kb)
    if not exploded and not all_opened:
        if opened_cells:
            markup.inline_keyboard.append([InlineKeyboardButton("üí∞ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", callback_data=f"mines_take_{game_id}")])
        else:
            markup.inline_keyboard.append([InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"mines_cancel_{game_id}")])
    return markup

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
MULTIPLIERS = [
    1.0,1.05,1.18,1.32,1.51,1.79,2.01,2.3,2.9,3.5,4.3,5.2,
    6.98,9.11,12.94,15.79,23.41,34.11,53.97,89.69,187.38,356.45,2433.8
]

# --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∏ ---
async def send_game_message(client, game, status="continue", win_amount=None):
    gid = game['game_id']
    uid = game['user_id']
    board = game.get('board', ['‚ùî']*25)
    opened = game.get('opened_cells', [])
    bet = game.get('bet_amount', 0)
    mult = game.get('current_multiplier', 1.0)
    exploded = game.get('exploded', False)
    all_opened = game.get('all_cells_opened', False)

    try:
        balance = format_balance(get_user_data(uid)['money'])
    except Exception:
        balance = "‚Äî"

    # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ mines_positions
    mines_positions = game.get('mines_positions', [])

    if status == "lose":
        markup = await create_mines_keyboard(gid, opened, mines_positions, True, game.get('last_cell_index'), False)
        text = (f"<b>üí• –ë—É–º! –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É.</b>\n"
                f"–°—Ç–∞–≤–∫–∞: <code>{format_balance(bet)}</code>\n"
                f"–ë–∞–ª–∞–Ω—Å: <code>{balance}</code>")
    elif status == "win":
        markup = await create_mines_keyboard(gid, opened, mines_positions, False, None, True)
        text = (f"<b>üéâ –í—Å–µ –æ—Ç–∫—Ä—ã—Ç–æ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <code>{format_balance(win_amount)}</code></b>\n"
                f"–ë–∞–ª–∞–Ω—Å: <code>{balance}</code>")
    else:  # continue
        markup = await create_mines_keyboard(gid, opened, mines_positions, exploded, None, all_opened)
        possible = format_balance(int(bet * mult))
        text = (f"<b>üü¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–≥—Ä–∞—Ç—å</b>\n"
                f"–û—Ç–∫—Ä—ã—Ç–æ: <b>{len(opened)}</b>\n"
                f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <code>{mult:.2f}x</code>\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: <code>{possible}</code>")

    new_id = await edit_or_send(client, game['chat_id'], game.get('message_id'), text, reply_markup=markup)
    if new_id and new_id != game.get('message_id'):
        game['message_id'] = new_id
        active_mines_games[gid] = game
        save_game_db(gid, game)

# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏ ---
@rate_limit
async def mines_command(client, message):
    uid = message.from_user.id
    if not await check_user(uid):
        return await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    if await is_banned_user(uid):
        return await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")

    loader = await message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä—ã...")
    try:
        parts = (message.text or "").split()
        if len(parts) != 2:
            return await loader.edit_text("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –º–∏–Ω–µ—Ä (—Å—É–º–º–∞)</i>")

        bet = parse_bet_amount(parts[1], get_user_data(uid)['money'])
        if not bet or bet < 10:
            return await loader.edit_text("<i>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ / –º–∏–Ω —Å—Ç–∞–≤–∫–∞ 10</i>")
        if get_user_data(uid)['money'] < bet:
            return await loader.edit_text("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.</i>")

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        with sqlite3.connect(DBB) as db:
            db.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(bet), uid))
            db.commit()

        game_id = str(randint(1000000, 9999999))
        board = ['‚ùî'] * 25
        mines = sample(range(25), 2)

        game = {
            'user_id': uid,
            'bet_amount': bet,
            'board': board,
            'mines_positions': mines,
            'opened_cells': [],
            'current_multiplier': 1.0,
            'message_id': None,
            'chat_id': message.chat.id,
            'exploded': False,
            'all_cells_opened': False,
            'game_id': game_id
        }

        active_mines_games[game_id] = game
        save_game_db(game_id, game)

        markup = await create_mines_keyboard(game_id, [], mines, False, None, False)
        msg = await message.reply("<b>üí£ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å</b>", reply_markup=markup)
        game['message_id'] = msg.id
        save_game_db(game_id, game)

        await client.delete_messages(message.chat.id, loader.id)
    except FloodWait as fw:
        await loader.edit_text(f"–û—à–∏–±–∫–∞: {fw}")
    except Exception as e:
        logger.exception(f"mines_command error: {e}")
        await loader.edit_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

# --- –ö–ª—ñ–∫ –ø–æ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ ---
@rate_limit
@app.on_callback_query(filters.regex(r'^mines_cell_'))
async def mines_cell_callback(client, cq):
    uid = cq.from_user.id
    data = cq.data.split('_')
    if len(data) < 4:
        return await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    gid, idx = data[2], int(data[3])

    if uid not in user_locks:
        user_locks[uid] = asyncio.Lock()
    if user_locks[uid].locked():
        return await cq.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")

    async with user_locks[uid]:
        try:
            game = active_mines_games.get(gid) or load_game_db(gid)
            if not game or game.get('user_id') != uid:
                return await cq.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            if game.get('exploded') or game.get('all_cells_opened'):
                return await cq.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            if idx in game.get('opened_cells', []):
                return await cq.answer("–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")

            board = game.get('board', ['‚ùî']*25)
            mines = game.get('mines_positions', [])
            opened = game.get('opened_cells', [])
            bet = game.get('bet_amount', 0)
            chat_id = game.get('chat_id')
            msg_id = game.get('message_id')

            # --- –ü–æ–ø–∞–¥–∞–Ω–Ω—è –≤ –º—ñ–Ω—É (—Ä–µ–∞–ª—å–Ω–∞ –º—ñ–Ω–∞) ---
            if idx in mines:
                game['exploded'] = True
                game['last_cell_index'] = idx

                unopened = [i for i in range(25) if i not in opened and i not in mines]
                if unopened:
                    third = choice(unopened)
                    mines.append(third)
                    board[third] = 'üí£'

                # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –º—ñ–Ω–∏ —ñ –≤–∏–¥—ñ–ª—è—î–º–æ –≤–∏–±—Ä–∞–Ω—É
                for m in mines:
                    board[m] = 'üí£'
                board[idx] = 'üí•'  # –≤–∏–±—É—Ö–Ω—É—Ç–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞

                game['mines_positions'] = mines
                game['board'] = board
                active_mines_games[gid] = game
                save_game_db(gid, game)

                # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞–≤–∫—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –ë–î/—Å—Ç–∞—Ç—É—Å
                await set_lose_monet(uid, bet)
                await send_game_message(client, game, status="lose")

                cleanup(gid)
                return await cq.answer()

            # --- –°–∫—Ä–∏–ø—Ç–æ–≤–∏–π —à–∞–Ω—Å –ø—Ä–æ–≥—Ä–∞—à—É (–¥–æ–¥–∞—î–º–æ –º—ñ–Ω—É –≤ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É –∫–ª—ñ—Ç–∏–Ω–∫—É) ---
            if randint(1, 11) == 1:
                mines.append(idx)
                board[idx] = 'üí•'
                game['last_cell_index'] = idx
                game['exploded'] = True

                for m in mines:
                    board[m] = 'üí£'
                board[idx] = 'üí•'

                game['mines_positions'] = mines
                game['board'] = board
                active_mines_games[gid] = game
                save_game_db(gid, game)

                await set_lose_monet(uid, bet)
                await send_game_message(client, game, status="lose")

                cleanup(gid)
                return await cq.answer()

            # --- –ë–µ–∑–ø–µ—á–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ ---
            opened.append(idx)
            board[idx] = 'üåÄ'
            num_open = len(opened)

            game['opened_cells'] = opened
            game['board'] = board
            game['current_multiplier'] = MULTIPLIERS[min(num_open, len(MULTIPLIERS)-1)]
            active_mines_games[gid] = game
            save_game_db(gid, game)

            await send_game_message(client, game, status="continue")

            # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–≥—Ä–∞—à (22 –≤—ñ–¥–∫—Ä–∏—Ç—ñ) ---
            if num_open >= 22:
                win = int(bet * game['current_multiplier'])
                try:
                    with sqlite3.connect(DBB) as db:
                        db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(win), uid))
                        db.commit()
                except Exception as e_db:
                    logger.exception(f"DB awarding win failed: {e_db}")

                await set_win_monet(uid, win)
                game['all_cells_opened'] = True
                for m in game.get('mines_positions', []):
                    board[m] = 'üí£'
                game['board'] = board
                save_game_db(gid, game)

                await send_game_message(client, game, status="win", win_amount=win)
                cleanup(gid)

            await cq.answer()
        except FloodWait as fw:
            wait_seconds = getattr(fw, "value", getattr(fw, "x", 1))
            logger.warning(f"FloodWait for user {uid}: sleeping {wait_seconds}s")
            await asyncio.sleep(wait_seconds)
            game = active_mines_games.get(gid) or load_game_db(gid)
            if game and not (game.get('exploded') or game.get('all_cells_opened')):
                try:
                    await send_game_message(client, game, status="continue")
                except Exception as e:
                    logger.exception(f"Error after FloodWait updating game {gid}: {e}")
            return await cq.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logger.exception(f"Error in mines_cell_callback for user {uid}: {e}")
            try:
                game = active_mines_games.get(gid) or load_game_db(gid)
                if game:
                    await send_game_message(client, game, status="continue")
            except Exception:
                pass
            return await cq.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑ ---
@rate_limit
@app.on_callback_query(filters.regex(r'^mines_take_'))
async def mines_take_prize_callback(client, cq):
    uid = cq.from_user.id
    if uid not in user_locks:
        user_locks[uid] = asyncio.Lock()
    if user_locks[uid].locked():
        return await cq.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏...")
    async with user_locks[uid]:
        gid = cq.data.split('_')[2]
        game = active_mines_games.get(gid) or load_game_db(gid)
        if not game or game.get('user_id') != uid:
            return await cq.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        if game.get('exploded') or game.get('all_cells_opened'):
            return await cq.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        bet = game.get('bet_amount', 0)
        win = int(bet * game.get('current_multiplier', 1.0))

        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(win), uid))
                db.execute("DELETE FROM mines_games WHERE game_id = ?", (gid,))
                db.commit()
        except Exception as e:
            logger.exception(f"DB error in take prize: {e}")

        await set_win_monet(uid, win)
        user_data = get_user_data(uid)
        balance = format_balance(user_data['money'])
        await edit_or_send(client, game['chat_id'], game.get('message_id'),
                           f"<b>üéâ –í—ã –∑–∞–±—Ä–∞–ª–∏ –ø—Ä–∏–∑: <code>{format_balance(win)}</code>\n–ë–∞–ª–∞–Ω—Å: <code>{balance}</code></b>",
                           reply_markup=None)
        cleanup(gid)
        await cq.answer()

# --- –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É ---
@rate_limit
@app.on_callback_query(filters.regex(r'^mines_cancel_'))
async def mines_cancel_callback(client, cq):
    uid = cq.from_user.id
    if uid not in user_locks:
        user_locks[uid] = asyncio.Lock()
    if user_locks[uid].locked():
        return await cq.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏...")
    async with user_locks[uid]:
        gid = cq.data.split('_')[2]
        game = active_mines_games.get(gid) or load_game_db(gid)
        if not game or game.get('user_id') != uid:
            return await cq.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        if game.get('exploded') or game.get('all_cells_opened'):
            return await cq.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        bet = game.get('bet_amount', 0)
        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(bet), uid))
                db.execute("DELETE FROM mines_games WHERE game_id = ?", (gid,))
                db.commit()
        except Exception as e:
            logger.exception(f"DB error in cancel: {e}")

        user_data = get_user_data(uid)
        balance = format_balance(user_data['money'])
        await edit_or_send(client, game['chat_id'], game.get('message_id'),
                           f"<b>üö´ –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å: <code>{balance}</code></b>",
                           reply_markup=None)
        cleanup(gid)
        await cq.answer()

# --- –ê–¥–º—ñ–Ω—Å—å–∫–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∏–≤ —è–∫ –±—É–ª–æ) ---

@app.on_message(filters.command('uhhh'))
async def hhh(client, message):
    tg_id = message.from_user.id
    if tg_id not in API_OWNER:
        return

    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /uhhh <—Å—É–º–º–∞> <user_id>")
        return

    bet_str = parts[1]
    send_id = parts[2]

    user_data = get_user_data(send_id)
    if not user_data:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    log_msgs = {
        "chat_id": message.chat.id,
        "message_id": message.id,
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "text": message.text,
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    await save_log(log_msgs)

    user_money = float(user_data['money'])
    money = parse_bet_amount(str(bet_str), user_money)
    money = float(money)

    try:
        with sqlite3.connect(DBB) as db:
            db.execute("UPDATE crash SET money = money - ? WHERE id = ?", (money, send_id))
            db.commit()
    except Exception as e:
        logger.exception(f"DB error in hhh: {e}")

    user = await client.get_users(send_id)
    await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} {format_balance(money)}üí∞")
    await app.send_message("https://t.me/qpdnsnnfd", f"""
<b>–ú–æ–º–µ–Ω—Ç: –°–Ω—è—Ç–∏—è</b>
<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.first_name} (@{message.from_user.username} #{message.from_user.id})
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} (@{user.username} #{user.id})
<b>–°—É–º–º–∞:</b> -{format_balance(money)} (-{money})
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

<b>–§—É–ª–ª —Ç–µ–∫—Å—Ç:</b> <pre lang='txt'>{message.text}</pre>
""")

@app.on_message(filters.command('hhh'))
async def hhh(client, message):
    tg_id = message.from_user.id
    if tg_id not in API_OWNER:
        return

    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hhh <—Å—É–º–º–∞> <user_id>")
        return

    bet_str = parts[1]
    send_id = parts[2]

    user_data = get_user_data(send_id)
    if not user_data:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    log_msgs = {
        "chat_id": message.chat.id,
        "message_id": message.id,
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "text": message.text,
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    await save_log(log_msgs)

    user_money = float(user_data['money'])
    money = parse_bet_amount(str(bet_str), user_money)
    money = float(money)

    try:
        with sqlite3.connect(DBB) as db:
            db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (money, send_id))
            db.commit()
    except Exception as e:
        logger.exception(f"DB error in hhh: {e}")

    user = await client.get_users(send_id)
    await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} –Ω–∞ {format_balance(money)}üí∞")
    await app.send_message("https://t.me/qpdnsnnfd", f"""
<b>–ú–æ–º–µ–Ω—Ç: –í—ã–¥–∞—á–∞</b>
<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.first_name} (@{message.from_user.username} #{message.from_user.id})
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} (@{user.username} #{user.id})
<b>–°—É–º–º–∞:</b> {format_balance(money)} ({money})
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

<b>–§—É–ª–ª —Ç–µ–∫—Å—Ç:</b> <pre lang='txt'>{message.text}</pre>
""")

# ============ BAN SYSTEM ============

is_banned_users = 'banned_users.json'


if not os.path.exists(is_banned_users):
    with open(is_banned_users, 'w') as f:
        json.dump([], f)

async def ban_user(user_id):
    with open(is_banned_users, 'r') as f:
        banned_users = json.load(f)

    user_id = int(user_id)  
    if user_id not in banned_users:
        banned_users.append(user_id)

        
        with open(is_banned_users, 'w') as f:
            json.dump(banned_users, f)

async def get_banned_users():
    with open(is_banned_users, 'r') as f:
        return json.load(f)

async def is_banned_user(user_id):
    banned_users = await get_banned_users()
    return int(user_id) in banned_users  

async def unban_user(user_id):
    with open(is_banned_users, 'r') as f:
        banned_users = json.load(f)

    user_id = int(user_id)  
    if user_id in banned_users:
        banned_users.remove(user_id)
        
        
        with open(is_banned_users, 'w') as f:
            json.dump(banned_users, f)

PAGE_SIZE = 50  
USER_PAGES = {}  

# async def get_top_users(order_by="money", order="DESC", limit=10):
#     """–ë–µ—Ä—ë—Ç —Ç–æ–ø –∏–∑ –±–∞–∑—ã –ø–æ –Ω—É–∂–Ω–æ–º—É –ø–æ–ª—é."""
#     try:
#         with sqlite3.connect(DBB) as db:
#             cursor = db.cursor()
#             query = f"""
#                 SELECT id, username, first_name, money, status, win_count, lose_count
#                 FROM crash
#                 ORDER BY {order_by} {order}
#                 LIMIT ?
#             """
#             cursor.execute(query, (limit,))
#             return cursor.fetchall()
#     except sqlite3.Error as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
#         return []

# async def format_top_message(users, title, order_by="money"):
#     if not users:
#         return "<i>–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>"

#     msg = f"<b>{title}</b>\n\n"
#     for i, (user_id, username, first_name, money, status, win_count, lose_count) in enumerate(users, 1):
#         name = username or first_name or f"ID {user_id}"
#         emoji = emojis[status] if 0 <= status < len(emojis) else ""
        
#         value = {
#             "money": f"{format_balance(money)}",
#             "win_count": f"{format_balance(win_count)}",
#             "lose_count": f"{format_balance(lose_count)}"
#         }.get(order_by, f"{format_balance(money)}")

#         msg += f"<b>{i})</b> {name} {emoji} ‚Äî <i>{value}</i>\n"
#     return msg

# async def top_balance_command(client, message):
#     top_users = await get_top_users(order_by="money", order="DESC")
#     if not top_users:
#         await message.reply("<i>–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>")
#         return

#     text = await format_top_message(top_users, "<b>üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>", order_by="money")
#     buttons = InlineKeyboardMarkup([
#         [InlineKeyboardButton("–¢–æ–ø –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º", callback_data="top_wins")],
#         [InlineKeyboardButton("–¢–æ–ø –ø–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º", callback_data="top_losses")]
#     ])
#     await message.reply(text, reply_markup=buttons)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–æ–ø–∞
# @app.on_callback_query(filters.regex(r"^top_(balance|wins|losses)$"))
# async def top_balance_callback(client, callback):
#     category = callback.data.split("_")[1]

#     if category == "balance":
#         order_by = "money"
#         title = "<b>üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>"
#     elif category == "wins":
#         order_by = "win_count"
#         title = "<b>üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º:</b>"
#     else:
#         order_by = "lose_count"
#         title = "<b>üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º:</b>"

#     top_users = await get_top_users(order_by=order_by, order="DESC")
#     if not top_users:
#         await callback.answer("–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
#         return

#     text = await format_top_message(top_users, title, order_by=order_by)

#     # –ö–Ω–æ–ø–∫–∏, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é
#     all_buttons = {
#         "balance": InlineKeyboardButton("–¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É", callback_data="top_balance"),
#         "wins": InlineKeyboardButton("–¢–æ–ø –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º", callback_data="top_wins"),
#         "losses": InlineKeyboardButton("–¢–æ–ø –ø–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º", callback_data="top_losses"),
#     }

#     buttons = [btn for key, btn in all_buttons.items() if key != category]
#     keyboard = InlineKeyboardMarkup([[btn] for btn in buttons])

#     try:
#         await callback.message.edit_text(text, reply_markup=keyboard)
#         await callback.answer()
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#         await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞.")

@app.on_inline_query()
async def inline_ref_handler(client, inline_query: InlineQuery):
    query = inline_query.query.lower()

    if query in ["—Ä–µ—Ñ", "ref", "–†–µ—Ñ", "Ref"]:
        user_id = inline_query.from_user.id
        bot_info = await client.get_me()
        BOT_USERNAME = bot_info.username

        ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
        text = "–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –∏–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π!"

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", url=ref_link)]
        ])

        await inline_query.answer(
            results=[
                InlineQueryResultArticle(
                    title="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
                    description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥—É",
                    input_message_content=InputTextMessageContent(text),
                    reply_markup=keyboard
                )
            ],
            cache_time=0  # 0 —á—Ç–æ–±—ã –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–ª—Å—è, –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 3600
        )
    elif query in ["—Ç–æ–ø", "top", "tb"]:
        top_users = await get_top_users(order_by="money", order="DESC")
        if not top_users:
            text = "<i>–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>"
        else:
            text = await format_top_message(top_users, "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:", order_by="money")

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–¢–æ–ø –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º", callback_data="top_wins")],
            [InlineKeyboardButton("–¢–æ–ø –ø–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞–º", callback_data="top_losses")]
        ])

        await inline_query.answer(
            results=[
                InlineQueryResultArticle(
                    title="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤",
                    description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø 10 –ø–æ –±–∞–ª–∞–Ω—Å—É",
                    input_message_content=InputTextMessageContent(text),
                    reply_markup=keyboard
                )
            ],
            cache_time=0
        )

    else:
        text = """
–ü–æ–º–æ—â—å –ø–æ –ò–Ω–ª–∞–π–Ω –ó–∞–ø—Ä–æ—Å–∞–º"""
        await inline_query.answer(
            results=[
                InlineQueryResultArticle(
                    title="–ü–æ–º–æ—â—å",
                    description="–ü–æ–º–æ—â—å –ø–æ –ò–Ω–ª–∞–π–Ω –ó–∞–ø—Ä–æ—Å–∞–º",
                    input_message_content=InputTextMessageContent(text),
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
                        ]
                    )
                )
            ],
            cache_time=0
        )




async def my_refs_handler(client, message):
    user_id = message.from_user.id

    db = sqlite3.connect(DBB)
    cursor = db.cursor()

    cursor.execute("SELECT ref_count FROM ref_system WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    db.close()

    BOT1 = await app.get_me()
    BOT_USERNAME = BOT1.username
    await message.reply(f"<b>üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b><code>https://t.me/{BOT_USERNAME}?start=ref_{user_id}</code>\nüí∞ <b>–ó–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 3.000.000 –º–æ–Ω–µ—Ç!</b>")

async def start_handler(client, message):
    user_id = message.from_user.id
    args = message.text.split()  # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
    print(f"Received /start with args: {args}")

    # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: –ø—Ä–æ—Å—Ç–æ /start
    if len(args) == 1:
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω—ã –∏ –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã.\n"
                           "–ò—Å–ø–æ–ª—å–∑—É–π /hb –∏–ª–∏ '—Å–ø–∏—Å–æ–∫' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º: /start ref_{id}
    if len(args) == 2 and args[1].startswith("ref_"):
        ref_id = args[1].replace("ref_", "")  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        print(ref_id)
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫
        try:
            ref_id = int(ref_id)
        except ValueError:
            ref_id = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not await check_user(user_id):
            register_user(user_id, message.from_user.username, message.from_user.first_name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏—Ç —Å–≤–æ—é –∂–µ —Å—Å—ã–ª–∫—É
            if ref_id and ref_id != user_id and await check_user(ref_id):
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ ref_system
                db = sqlite3.connect(DBB)
                cursor = db.cursor()
                cursor.execute("SELECT * FROM ref_system WHERE user_id = ?", (user_id,))
                if cursor.fetchone() is None:
                    cursor.execute("INSERT INTO ref_system (user_id, invited_by) VALUES (?, ?)", (user_id, ref_id))
                    cursor.execute("UPDATE ref_system SET ref_count = ref_count + 1 WHERE user_id = ?", (ref_id,))
                    cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (3000000, user_id))
                    db.commit()
                    await app.send_message(ref_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} ({user_id}) –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—É.\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3.000.000 –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
                    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω—ã –∏ –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã.\n"
                           "–ò—Å–ø–æ–ª—å–∑—É–π /hb –∏–ª–∏ '—Å–ø–∏—Å–æ–∫' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.")

                else:
                    await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–∞.")
                db.close()
            else:
                await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: /start promo_{promo_name}
    if len(args) == 2 and args[1].startswith("promo_"):
        promo_name = args[1].replace("promo_", "")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not await check_user(user_id):
            register_user(user_id, message.from_user.username, message.from_user.first_name)
            await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
        if await is_banned_user(user_id):
            await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
        db = sqlite3.connect(DBB)
        cursor = db.cursor()
        cursor.execute("SELECT money, activations FROM promos WHERE name = ?", (promo_name,))
        promo = cursor.fetchone()

        if not promo:
            await message.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            db.close()
            return

        money, activations = promo

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        cursor.execute("SELECT 1 FROM user_promos WHERE user_id = ? AND promo_name = ?", (user_id, promo_name))
        if cursor.fetchone():
            await message.reply("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
            db.close()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        if activations <= 0:
            await message.reply("–£ —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
            cursor.execute("DELETE FROM promos WHERE name = ?", (promo_name,))
            db.commit()
            db.close()
            return

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(money), user_id))
        cursor.execute("INSERT INTO user_promos (user_id, promo_name) VALUES (?, ?)", (user_id, promo_name))
        cursor.execute("UPDATE promos SET activations = activations - 1 WHERE name = ?", (promo_name,))
        db.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
        cursor.execute("SELECT activations FROM promos WHERE name = ?", (promo_name,))
        remaining_activations = cursor.fetchone()[0]
        if remaining_activations <= 0:
            cursor.execute("DELETE FROM promos WHERE name = ?", (promo_name,))
            db.commit()

        db.close()

        await message.reply(f"–ü—Ä–æ–º–æ–∫–æ–¥ '{promo_name}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                          f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {money} –º–æ–Ω–µ—Ç.\n"
                          f"–í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(get_user_data(user_id)['money'])}")

from random import sample, choices
from string import ascii_letters, digits

treasure_locks = {}

# @app.on_message(filters.command("–∫–ª–∞–¥"))
@rate_limit
async def treasure_game_command(client, message):
    args = message.text.split()
    if len(args) != 3:
        await message.reply_text("–ü—Ä–∏–º–µ—Ä: <code>–∫–ª–∞–¥ 10000 2</code> (—Å—Ç–∞–≤–∫–∞, –∫–æ–ª-–≤–æ –∫–ª–∞–¥–æ–≤ –æ—Ç 1 –¥–æ 4)")
        return

    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        await message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. /ss")
        return

    bet = parse_bet_amount(args[1], user_data['money'])
    treasures = int(args[2])
    if not bet or bet <= 0 or treasures < 1 or treasures > 4:
        await message.reply_text("–°—Ç–∞–≤–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏–ª–∏ –∫–æ–ª-–≤–æ –∫–ª–∞–¥–æ–≤ –Ω–µ –æ—Ç 1 –¥–æ 4.")
        return

    if user_data['money'] < bet:
        await message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        return

    game_id = ''.join(choices(ascii_letters + digits, k=8))

    positions = [(i, j) for i in range(4) for j in range(4)]
    treasure_positions = sample(positions, treasures)
    board = {
        "treasures": treasure_positions,
        "opened": []
    }

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(bet), user_id))
    cursor.execute("INSERT INTO treasure_games (id, user_id, bet, treasures, attempts_left, found, board) VALUES (?, ?, ?, ?, ?, ?, ?)",
                   (game_id, user_id, bet, treasures, 3, 0, json.dumps(board)))
    db.commit()
    db.close()

    await send_treasure_board(client, message.chat.id, game_id)


# ================== –ö–û–ú–ê–ù–î–´ ==================
@app.on_message(filters.command("farm") | filters.regex(r"–§–∞—Ä–º–∞", flags=re.IGNORECASE) | filters.regex(r"–§–µ—Ä–º–∞", flags=re.IGNORECASE))
async def farm_menu(client, message):
    user_id = message.from_user.id
    if not await check_user(user_id):
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss")
        return
    
    # –í—ã–≤–æ–¥–∏–º —Ñ–µ—Ä–º—É —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    farm = get_user_farm(user_id)
    text = "üè¶ <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞</b>\n\n"
    total_income = 0
    for dev_id, dev in farm_devices.items():
        count = farm[dev_id]["count"]
        income = dev["income"] * count
        total_income += income
        text += f"{dev['name']}: <b>{count}</b> —à—Ç ‚Üí {income:,} üí∞/—á–∞—Å\n"
    text += f"\n‚è≥ –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{total_income:,} üí∞/—á–∞—Å</b>"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –ó–∞–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥", callback_data=f"claim_{user_id}")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data=f"buuy_menu_{user_id}")]
    ])
    await message.reply(text, reply_markup=kb)

@app.on_callback_query(filters.regex(r"claim_"))
async def claim_callback(client, callback_query):
    user_id = callback_query.from_user.id
    if f"claim_{user_id}" != callback_query.data:
        await callback_query.answer("‚ùå –ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    income = claim_income(user_id)
    if income > 0:
        await callback_query.message.edit_text(f"üì• –í—ã –∑–∞–±—Ä–∞–ª–∏ {income:,} üí∞",
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_farm_{user_id}")]]
                                               ))
    else:
        await callback_query.message.edit_text("‚åõ –ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –∑–∞–±–∏—Ä–∞—Ç—å.",
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_farm_{user_id}")]]
                                               ))

@app.on_callback_query(filters.regex(r"buuy_menu_"))
async def buy_menu(client, callback_query):
    user_id = callback_query.from_user.id
    if f"buuy_menu_{user_id}" != callback_query.data:
        await callback_query.answer("‚ùå –ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    # –ü–æ–∫—É–ø–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    kb = []
    for dev_id, dev in farm_devices.items():
        price = get_device_price(user_id, dev_id)
        kb.append([InlineKeyboardButton(f"{dev['name']} ‚Äî {price:,} üí∞", callback_data=f"buuy_{dev_id}_{user_id}")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_farm_{user_id}")])
    
    await callback_query.message.edit_text("üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>:", reply_markup=InlineKeyboardMarkup(kb))

@app.on_callback_query(filters.regex(r"buuy_"))
async def buy_device(client, callback_query):
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    parts = callback_query.data.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    if len(parts) != 3:
        await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    
    dev_id, user_id = parts[1], int(parts[2])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ user_id —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
    if user_id != callback_query.from_user.id:
        await callback_query.answer("‚ùå –ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_data(user_id)
    if user_data is None:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    price = get_device_price(user_id, dev_id)
    if user_data["money"] < price:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∞", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    farm = get_user_farm(user_id)
    new_count = farm[dev_id]["count"] + 1
    update_user_farm(user_id, dev_id, new_count)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(price), user_id))
    db.commit()
    db.close()
    
    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    kb = []
    for d_id, dev in farm_devices.items():
        new_price = get_device_price(user_id, d_id)
        kb.append([InlineKeyboardButton(f"{dev['name']} ‚Äî {new_price:,} üí∞", callback_data=f"buuy_{d_id}_{user_id}")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_farm_{user_id}")])
    
    await callback_query.message.edit_text(
        f"üéâ –í—ã –∫—É–ø–∏–ª–∏ {farm_devices[dev_id]['name']}!\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {new_count} —à—Ç.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(kb)
    )

@app.on_callback_query(filters.regex(r"back_farm_"))
async def back_farm(client, callback_query):
    user_id = callback_query.from_user.id
    if f"back_farm_{user_id}" != callback_query.data:
        await callback_query.answer("‚ùå –ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –º–µ–Ω—é —Ñ–µ—Ä–º—ã
    farm = get_user_farm(user_id)
    text = "üè¶ <b>–í–∞—à–∞ —Ñ–µ—Ä–º–∞</b>\n\n"
    total_income = 0
    for dev_id, dev in farm_devices.items():
        count = farm[dev_id]["count"]
        income = dev["income"] * count
        total_income += income
        text += f"{dev['name']}: <b>{count}</b> —à—Ç ‚Üí {income:,} üí∞/—á–∞—Å\n"
    text += f"\n‚è≥ –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>{total_income:,} üí∞/—á–∞—Å</b>"
    
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –ó–∞–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥", callback_data=f"claim_{user_id}")],
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data=f"buuy_menu_{user_id}")]
    ])
    await callback_query.message.edit_text(text, reply_markup=kb)



async def send_treasure_board(client, chat_id, game_id, edit_message=None):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT board, attempts_left, found, treasures, user_id FROM treasure_games WHERE id = ?", (game_id,))
    data = cursor.fetchone()
    db.close()

    if not data:
        return

    board, attempts_left, found, treasures, user_id = json.loads(data[0]), data[1], data[2], data[3], data[4]
    treasures_set = [tuple(x) for x in board["treasures"]]
    opened = [tuple(x) for x in board["opened"]]

    buttons = []
    for i in range(4):
        row = []
        for j in range(4):
            pos = (i, j)
            if pos in opened:
                label = "üéÅ" if pos in treasures_set else "‚ùå"
            else:
                label = "‚¨ú"
            row.append(InlineKeyboardButton(label, callback_data=f"treasure_{game_id}_{i}_{j}"))
        buttons.append(row)

    buttons.append([InlineKeyboardButton("üí∞ –ó–∞–±—Ä–∞—Ç—å", callback_data=f"treasure_take_{game_id}")])
    text = f"üéØ <b>–ö–ª–∞–¥</b>\n–ü–æ–ø—ã—Ç–æ–∫: <b>{attempts_left}</b>\n–ù–∞–π–¥–µ–Ω–æ: <b>{found}</b> –∏–∑ {treasures}"
    markup = InlineKeyboardMarkup(buttons)

    if edit_message:
        await edit_message.edit_text(text, reply_markup=markup)
    else:
        await client.send_message(chat_id, text, reply_markup=markup)


@app.on_callback_query(filters.regex(r"^treasure_([a-zA-Z0-9]+)_(\d)_(\d)$"))
@rate_limit
async def handle_treasure_click(client, callback):
    game_id, i, j = callback.data.split("_")[1:]
    i, j = int(i), int(j)

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT user_id, bet, treasures, attempts_left, found, board FROM treasure_games WHERE id = ?", (game_id,))
    data = cursor.fetchone()
    if not data:
        await callback.message.edit_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id, bet, treasures, attempts_left, found, board_raw = data
    if callback.from_user.id != user_id:
        await callback.answer("–ù–µ —Ç–≤–æ—è –∏–≥—Ä–∞.", show_alert=True)
        return

    if game_id not in treasure_locks:
        treasure_locks[game_id] = asyncio.Lock()

    async with treasure_locks[game_id]:
        board = json.loads(board_raw)
        board["treasures"] = [tuple(x) for x in board["treasures"]]
        board["opened"] = [tuple(x) for x in board["opened"]]
        pos = (i, j)

        if pos in board["opened"]:
            await callback.answer("–£–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ.")
            return

        board["opened"].append(pos)
        msg = "üéÅ –ö–ª–∞–¥ –Ω–∞–π–¥–µ–Ω!" if pos in board["treasures"] else "‚ùå –ú–∏–º–æ."
        if pos in board["treasures"]:
            found += 1
        else:
            attempts_left -= 1

        if found == treasures:
            win = int(bet * treasure_multiplier(treasures))
            cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(win), user_id))
            cursor.execute("DELETE FROM treasure_games WHERE id = ?", (game_id,))
            db.commit()
            db.close()
            await callback.message.edit_text(f"üéâ –í—Å–µ –∫–ª–∞–¥—ã –Ω–∞–π–¥–µ–Ω—ã! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{format_balance(win)}</b> –º–æ–Ω–µ—Ç!")
            return

        if attempts_left <= 0:
            cursor.execute("DELETE FROM treasure_games WHERE id = ?", (game_id,))
            db.commit()
            db.close()
            reveal = "ü™ô –ö–ª–∞–¥—ã –±—ã–ª–∏ —Ç—É—Ç:\n" + "\n".join([f"({x},{y})" for x, y in board["treasures"]])
            await callback.message.edit_text("üòû –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n\n" + reveal)
            return

        cursor.execute("UPDATE treasure_games SET board = ?, attempts_left = ?, found = ? WHERE id = ?",
                       (json.dumps(board), attempts_left, found, game_id))
        db.commit()
        db.close()

        await callback.answer(msg)
        await send_treasure_board(client, callback.message.chat.id, game_id, edit_message=callback.message)


@app.on_callback_query(filters.regex(r"^treasure_take_([a-zA-Z0-9]+)$"))
@rate_limit
async def handle_treasure_take(client, callback):
    game_id = callback.data.split("_")[2]

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT user_id, bet, treasures, found FROM treasure_games WHERE id = ?", (game_id,))
    data = cursor.fetchone()
    if not data:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id, bet, treasures, found = data
    if callback.from_user.id != user_id:
        await callback.answer("–ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞.")
        return

    if game_id not in treasure_locks:
        treasure_locks[game_id] = asyncio.Lock()

    async with treasure_locks[game_id]:
        k = treasure_multiplier(treasures)
        win = int(bet * (found / treasures) * k)

        cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(win), user_id))
        cursor.execute("DELETE FROM treasure_games WHERE id = ?", (game_id,))
        db.commit()
        db.close()

        await callback.message.edit_text(f"üí∞ –ó–∞–±—Ä–∞–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{format_balance(win)}</b> –º–æ–Ω–µ—Ç (–∑–∞ {found}/{treasures} –∫–ª–∞–¥–æ–≤)")


@app.on_message(filters.command("–∫–ª–∞–¥_–æ—Ç–ª–∞–¥–∫–∞"))
@rate_limit
async def debug_treasure_game(client, message):
    user_id = message.from_user.id
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT id, board FROM treasure_games WHERE user_id = ? ORDER BY created_at DESC LIMIT 1", (user_id,))
    data = cursor.fetchone()
    db.close()

    if not data:
        await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    game_id, board_raw = data
    board = json.loads(board_raw)
    treasures = [tuple(x) for x in board["treasures"]]
    await message.reply_text(f"üß≠ –ò–≥—Ä–∞ ID: <code>{game_id}</code>\n–ö–ª–∞–¥—ã:\n" + "\n".join([f"({i}, {j})" for i, j in treasures]))


def treasure_multiplier(treasures):
    return {
        1: 3.5,
        2: 2.2,
        3: 1.7,
        4: 1.3
    }.get(treasures, 1.0)

@app.on_message(filters.command("–∫–ª–∞–¥_–æ—Ç–ª–∞–¥–∫–∞"))
@rate_limit
async def debug_treasure_game(client, message):
    user_id = message.from_user.id
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT board FROM treasure_games WHERE user_id = ?", (user_id,))
    data = cursor.fetchone()
    db.close()

    if not data:
        await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    board = json.loads(data[0])
    treasures = [tuple(x) for x in board["treasures"]]
    await message.reply_text("üß≠ –ö–ª–∞–¥—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç—É—Ç:\n" + "\n".join([f"({i}, {j})" for i, j in treasures]))


def treasure_multiplier(treasures):
    return {
        1: 3.5,
        2: 2.2,
        3: 1.7,
        4: 1.3
    }.get(treasures, 1.0)


PAGE_SIZE = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
USER_PAGES = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_SORT = {}   # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_FILTER = {} # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@app.on_message(filters.command('users'))
async def get_all_users(client, message):
    tg_id = message.from_user.id
    if tg_id not in API_OWNER:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ —Ñ–∏–ª—å—Ç—Ä
    USER_PAGES[tg_id] = 0
    USER_SORT[tg_id] = "default"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    USER_FILTER[tg_id] = "all"    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ–∏–ª—å—Ç—Ä "–≤—Å–µ"

    users = await fetch_users_data(tg_id)
    if not users:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ.")
        return

    await send_users_page(client, message, tg_id, users, 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞
async def fetch_users_data(tg_id):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()

    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    base_query = "SELECT id, username, first_name, money, status FROM crash"

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    filter_type = USER_FILTER.get(tg_id, "all")
    if filter_type == "banned":
        where_clause = " WHERE status = 1"
    elif filter_type == "rich":
        where_clause = " WHERE money > 1000"
    else:
        where_clause = ""

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    sort_type = USER_SORT.get(tg_id, "default")
    if sort_type == "money_high":
        order_by = " ORDER BY money DESC"
    elif sort_type == "money_low":
        order_by = " ORDER BY money ASC"
    elif sort_type == "active":
        order_by = " ORDER BY status ASC"
    elif sort_type == "inactive":
        order_by = " ORDER BY status DESC"
    else:
        order_by = ""

    query = f"{base_query}{where_clause}{order_by}"
    cursor.execute(query)
    users = cursor.fetchall()
    db.close()
    return users

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
async def send_users_page(client, message, tg_id, users, page):
    start_idx = page * PAGE_SIZE
    end_idx = start_idx + PAGE_SIZE
    users_page = users[start_idx:end_idx]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    current_filter = USER_FILTER.get(tg_id, "all")
    filter_display = {
        "all": "–í—Å–µ",
        "banned": "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ",
        "rich": "–° –¥–µ–Ω—å–≥–∞–º–∏ > 1000"
    }
    current_sort = USER_SORT.get(tg_id, "default")
    sort_display = {
        "default": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "money_high": "–î–µ–Ω—å–≥–∏ (–º–Ω–æ–≥–æ)",
        "money_low": "–î–µ–Ω—å–≥–∏ (–º–∞–ª–æ)",
        "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ",
        "inactive": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ",
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    total_pages = ((len(users) - 1) // PAGE_SIZE) + 1
    text = (f"üë• <b>–∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤:</b> {len(users)}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page + 1}/{total_pages}\n"
            f"–§–∏–ª—å—Ç—Ä: {filter_display[current_filter]}\n"
            f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_display[current_sort]}\n\n")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    emojis = ["", "üëç", "üòÄ", "ü§Ø", "üòé", "üëΩ", "üëæ", "ü§ñ", "üëª", "üëë", "üé©", "üé∞", "üéÄ", "üêç", "ü¶à"]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    for idx, (user_id, username, first_name, money, status) in enumerate(users_page, start=start_idx + 1):
        display_name = f"@{username}" if username else f"ID {user_id}"
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞: –µ—Å–ª–∏ status == 0, —Ç–æ üî¥, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ emojis
        status_emoji = "üî¥" if status == 0 else emojis[status] if 0 < status < len(emojis) else "‚ùì"
        text += f"{idx}) {display_name} [{user_id}] - {money}üí∞ - {status_emoji}\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨Ö –ü—Ä–æ—à–ª–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"users_page:{page - 1}"))
    if end_idx < len(users):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°", callback_data=f"users_page:{page + 1}"))
    if nav_buttons:
        buttons.append(nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filter_buttons = [
        [InlineKeyboardButton(f"–í—Å–µ{' ‚úÖ' if current_filter == 'all' else ''}", callback_data="users_filter:all"),
         InlineKeyboardButton(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ{' ‚úÖ' if current_filter == 'banned' else ''}", callback_data="users_filter:banned")],
        [InlineKeyboardButton(f"–° –¥–µ–Ω—å–≥–∞–º–∏ > 1000{' ‚úÖ' if current_filter == 'rich' else ''}", callback_data="users_filter:rich")]
    ]
    buttons.extend(filter_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_buttons = [
        [InlineKeyboardButton(f"–î–µ–Ω—å–≥–∏ (–º–Ω–æ–≥–æ){' ‚úÖ' if current_sort == 'money_high' else ''}", callback_data="users_sort:money_high"),
         InlineKeyboardButton(f"–î–µ–Ω—å–≥–∏ (–º–∞–ª–æ){' ‚úÖ' if current_sort == 'money_low' else ''}", callback_data="users_sort:money_low")],
        [InlineKeyboardButton(f"–ê–∫—Ç–∏–≤–Ω—ã–µ{' ‚úÖ' if current_sort == 'inactive' else ''}", callback_data="users_sort:inactive"),
         InlineKeyboardButton(f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ{' ‚úÖ' if current_sort == 'active' else ''}", callback_data="users_sort:active")],
        [InlineKeyboardButton(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é{' ‚úÖ' if current_sort == 'default' else ''}", callback_data="users_sort:default")]
    ]
    buttons.extend(sort_buttons)

    reply_markup = InlineKeyboardMarkup(buttons) if buttons else None
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
    if message.text and message.text.startswith("/users"):
        await message.reply_text(text, reply_markup=reply_markup, disable_web_page_preview=True)
    else:
        await message.edit_text(text, reply_markup=reply_markup, disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü
@app.on_callback_query(filters.regex(r"users_page:(\d+)"))
async def change_users_page(client, callback_query):
    page = int(callback_query.matches[0].group(1))
    tg_id = callback_query.from_user.id

    if tg_id not in API_OWNER:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", show_alert=True)
        return

    users = await fetch_users_data(tg_id)
    if not users:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ.", show_alert=True)
        return

    USER_PAGES[tg_id] = page
    await send_users_page(client, callback_query.message, tg_id, users, page)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
@app.on_callback_query(filters.regex(r"users_filter:(\w+)"))
async def change_users_filter(client, callback_query):
    filter_type = callback_query.matches[0].group(1)
    tg_id = callback_query.from_user.id

    if tg_id not in API_OWNER:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä
    current_filter = USER_FILTER.get(tg_id, "all")
    if current_filter == filter_type:
        await callback_query.answer("–≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    USER_FILTER[tg_id] = filter_type
    USER_PAGES[tg_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é

    users = await fetch_users_data(tg_id)
    if not users:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç—Ç–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ—Ç.", show_alert=True)
        return

    await send_users_page(client, callback_query.message, tg_id, users, 0)
    await callback_query.answer(f"–§–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {filter_type}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@app.on_callback_query(filters.regex(r"users_sort:(\w+)"))
async def change_users_sort(client, callback_query):
    sort_type = callback_query.matches[0].group(1)
    tg_id = callback_query.from_user.id

    if tg_id not in API_OWNER:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    current_sort = USER_SORT.get(tg_id, "default")
    if current_sort == sort_type:
        await callback_query.answer("–≠—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    USER_SORT[tg_id] = sort_type
    USER_PAGES[tg_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é

    users = await fetch_users_data(tg_id)
    if not users:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ.", show_alert=True)
        return

    await send_users_page(client, callback_query.message, tg_id, users, 0)
    await callback_query.answer(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {sort_type}")

    # (""" CREATE TABLE IF NOT EXISTS drill (
    #                user_id INTEGER PRIMARY KEY, 0
    #                motor_lvl INTEGER DEFAULT 1 - —É—Ä–æ–≤–µ–Ω—å –º–æ—Ç–æ—Ä–∞, 1
    #                drill_head_lvl INTEGER DEFAULT 1 - —É—Ä–æ–≤–µ–Ω—å –¥—Ä–µ–ª—å, 2
    #                frame INTEGER DEFAULT 1 - –∫–∞—Ä–∫–∞—Å, 3
    #                power_source INTEGER DEFAULT 1 - –ø–∏—Ç–∞–Ω–∏–µ, 4
    #                handle INTEGER DEFAULT 0 - –¥–µ—Ä–∂–∞—Ç–µ–ª—å, 5
    #                cooling INTEGER DEFAULT 0 - –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ, 6
    #                gearbox INTEGER DEFAULT 0 - —Ä–µ–¥—É–∫—Ç–æ—Ä, 7
    #                oil INTEGER DEFAULT 0 - –º–∞—Å–ª–æ, 8
    #                energy INTEGER DEFAULT 10 - —ç–Ω–µ—Ä–≥–∏—è, 9
    #                max_energy INTEGER DEFAULT 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è, 10
    #                max_oil_engine INTEGER DEFAULT 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –º–∞—Å–ª–æ, 11
    #                max_cooling_engine INTEGER DEFAULT 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ, 12
    #                heal_drill_engine INTEGER DEFAULT 10 - –ª–µ—á–µ–Ω–∏–µ –¥—Ä–µ–ª—å 13,
    #                drill_state INTEGER DEFAULT 0 - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–µ–ª—å, 14 [0 - ]
    #                ) """)
    
@app.on_message(filters.command("buy_drill"))
async def buy_drill_command(client, message):
    user_id = message.from_user.id
    if not await check_user(user_id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ —Ä–µ–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    if await is_banned_user(user_id):
        await message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    drill_data = await get_user_drill_data(user_id)
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä–µ–ª—å
    if drill_data:  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, –∑–Ω–∞—á–∏—Ç –¥—Ä–µ–ª—å —É–∂–µ –∫—É–ø–ª–µ–Ω–∞
        await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥—Ä–µ–ª—å!")
        return
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä–µ–ª–∏
    cost = 5000
    if user_data["money"] < cost:
        await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {cost} –º–æ–Ω–µ—Ç.")
        return
    
    # –ü–æ–∫—É–ø–∫–∞ –¥—Ä–µ–ª–∏
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(cost), user_id))
    if drill_data:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å (–Ω–æ –¥—Ä–µ–ª—å "–Ω–µ –∫—É–ø–ª–µ–Ω–∞"), –æ–±–Ω–æ–≤–ª—è–µ–º
        cursor.execute("""
            UPDATE drill 
            SET motor_lvl = 1, drill_head_lvl = 1, frame = 1, power_source = 1, 
                handle = 0, cooling = 0, gearbox = 0, oil = 0, 
                energy = 10, max_energy = 10, max_oil_engine = 10, 
                max_cooling_engine = 10, heal_drill_engine = 10
            WHERE user_id = ?
        """, (user_id,))
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute("""
            INSERT INTO drill (user_id, motor_lvl, drill_head_lvl, frame, power_source, 
                              handle, cooling, gearbox, oil, energy, max_energy, 
                              max_oil_engine, max_cooling_engine, heal_drill_engine)
            VALUES (?, 1, 1, 1, 1, 0, 0, 0, 0, 10, 10, 10, 10, 10)
        """, (user_id,))
    db.commit()
    db.close()
    
    await message.reply(f"üéâ –í—ã –∫—É–ø–∏–ª–∏ –¥—Ä–µ–ª—å –∑–∞ {cost} –º–æ–Ω–µ—Ç! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å –ø–æ–º–æ—â—å—é /mine.")

SEND_BATCH = 30       # —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –ø–∞—É–∑–æ–π
SLEEP_TIME = 2        # —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Å–ø–∞—Ç—å –ø–æ—Å–ª–µ SEND_BATCH

@app.on_message(filters.command("rass"))
async def rass_command(client, message):
    if message.from_user.id not in API_OWNER:
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /rass <—Ç–µ–∫—Å—Ç>")
        return

    text = parts[1]
    await message.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ —Ñ–æ–Ω–µ.")
    asyncio.create_task(start_rassilka(client, text))
    await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –†–∞—Å—Å—ã–ª–∫–∞</b>
<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.first_name} (@{message.from_user.username} #{message.from_user.id})
==================
<b>–¢–µ–∫—Å—Ç:</b> {text}
==================
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

<b>–§—É–ª–ª —Ç–µ–∫—Å—Ç:</b> <pre lang='txt'>{message.text}</pre>
""")

async def start_rassilka(client, text):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT id FROM crash")
    users = [row[0] for row in cursor.fetchall()]
    db.close()

    total = len(users)
    success = 0
    failed = 0

    print(f"=== –†–∞—Å—Å—ã–ª–∫–∞: {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")

    for i, user_id in enumerate(users, start=1):
        try:
            await client.send_message(user_id, text)
            success += 1
            print(f"[‚úÖ] {user_id}")
        except Exception as e:
            failed += 1
            print(f"[‚ùå] {user_id} ‚Äî {str(e)}")

    print(f"–ì–æ—Ç–æ–≤–æ. ‚úÖ: {success} ‚ùå: {failed}")

@app.on_message(filters.command("gt"))
async def gt(client, message):
    tg_id = message.from_user.id
    if tg_id not in API_OWNER:
        return
    await message.reply(message)  
    await message.reply(f"<emoji id=5431376038628171216>üìä</emoji>")  

duel_data = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–∏
duel_locks = {}  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

from asyncio import Lock
import random
import asyncio

async def duel_command(client, message):
    user_id = message.from_user.id
    if not await check_user(user_id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ —Ä–µ–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    if await is_banned_user(user_id):
        await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥—É—ç–ª—å <—Å—Ç–∞–≤–∫–∞>")
        return

    bet_amount_str = parts[1]
    user_data = get_user_data(user_id)
    bet_amount = parse_bet_amount(bet_amount_str, user_data['money'])

    if bet_amount is None:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.")
        return
    if bet_amount < 10:
        await message.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 10 –º–æ–Ω–µ—Ç.")
        return
    if user_data['money'] < bet_amount:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        return

    for game in duel_data.values():
        if game['player1_id'] == user_id or game.get('player2_id') == user_id:
            # –æ—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å
            btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥—É—ç–ª—å", callback_data=f"duel_cancel_{game['game_id']}")
            await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –¥—É—ç–ª—å!", reply_markup=InlineKeyboardMarkup([[btn]]))
            return

    game_id = str(randint(100000, 99999999))
    duel_data[game_id] = {
        "game_id": game_id,
        "player1_id": user_id,
        "player2_id": None,
        "player1_num": None,
        "player2_num": None,
        "bet": bet_amount,
        "chat_id": message.chat.id,
        "message_id": None,
        "state": "select_number",
        "round": 1,
        "timeout": asyncio.get_event_loop().time() + 180,
        "used_dice": []
    }
    duel_locks[game_id] = Lock()

    try:
        with sqlite3.connect(DBB) as db:
            db.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(bet_amount), user_id))
            db.commit()
    except sqlite3.Error:
        await message.reply("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(str(i), callback_data=f"duel_select_{game_id}_{i}") for i in range(1, 4)],
        [InlineKeyboardButton(str(i), callback_data=f"duel_select_{game_id}_{i}") for i in range(4, 7)]
    ])
    msg = await message.reply("–í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –∏–≥—Ä—É. –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:", reply_markup=markup)
    duel_data[game_id]["message_id"] = msg.id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
@app.on_callback_query(filters.regex(r"^duel_select_"))
async def duel_select_callback(client, cq):
    user_id = cq.from_user.id
    if not await check_user(user_id) or await is_banned_user(user_id):
        await cq.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª–∏.")
        return

    parts = cq.data.split("_")
    if len(parts) != 4:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    game_id, number = parts[2], int(parts[3])
    game = duel_data.get(game_id)

    if not game:
        await cq.answer("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if game["player1_id"] != user_id:
        await cq.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –¥—É—ç–ª—å!")
        return
    if game["state"] != "select_number":
        await cq.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ!")
        return
    if not 1 <= number <= 6:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    async with duel_locks[game_id]:
        if game_id not in duel_data:
            await cq.answer("–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        game["player1_num"] = number
        game["state"] = "awaiting_opponent"

        user = await client.get_users(user_id)
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data=f"duel_accept_{game_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"duel_cancel_{game_id}")]
        ])
        await client.edit_message_text(
            chat_id=game["chat_id"],
            message_id=game["message_id"],
            text=f"üëë –ò–≥—Ä–æ–∫ {user.first_name} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å!\n"
                 f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(game['bet'])} –º–æ–Ω–µ—Ç\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞: {number}",
            reply_markup=markup
        )
    await cq.answer()

# –û—Ç–º–µ–Ω–∞ –¥—É—ç–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
@app.on_callback_query(filters.regex(r"^duel_cancel_"))
async def duel_cancel_callback(client, cq):
    user_id = cq.from_user.id
    if not await check_user(user_id) or await is_banned_user(user_id):
        await cq.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª–∏.")
        return

    parts = cq.data.split("_")
    if len(parts) != 3:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    game_id = parts[2]
    game = duel_data.get(game_id)

    if not game:
        await cq.answer("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if game["player1_id"] != user_id:
        await cq.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –¥—É—ç–ª—å!")
        return
    if game["state"] not in ["select_number", "awaiting_opponent"]:
        await cq.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ!")
        return

    async with duel_locks[game_id]:
        if game_id not in duel_data:
            await cq.answer("–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(game["bet"]), game["player1_id"]))
                db.commit()
        except sqlite3.Error:
            await cq.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return

        await client.edit_message_text(
            chat_id=game["chat_id"],
            message_id=game["message_id"],
            text="‚ùå –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º!",
            reply_markup=None
        )
        del duel_data[game_id]
        del duel_locks[game_id]
    await cq.answer()
    try:
        await cq.message.edit("‚ùå –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º!")
    except Exception:
        pass

# –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞
@app.on_callback_query(filters.regex(r"^duel_accept_"))
async def duel_accept_callback(client, cq):
    user_id = cq.from_user.id
    if not await check_user(user_id) or await is_banned_user(user_id):
        await cq.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª–∏.")
        return

    parts = cq.data.split("_")
    if len(parts) != 3:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    game_id = parts[2]
    game = duel_data.get(game_id)

    if not game:
        await cq.answer("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if game["player1_id"] == user_id:
        await cq.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –¥—É—ç–ª—å!")
        return
    if game["state"] != "awaiting_opponent":
        await cq.answer("–î—É—ç–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return
    if any(g["player1_id"] == user_id or g.get("player2_id") == user_id for g in duel_data.values()):
        await cq.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –¥—É—ç–ª—å!")
        return

    user_data = get_user_data(user_id)
    if user_data["money"] < game["bet"]:
        await cq.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")
        return

    async with duel_locks[game_id]:
        if game_id not in duel_data:
            await cq.answer("–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(game["bet"]), user_id))
                db.commit()
        except sqlite3.Error:
            await cq.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return

        game["player2_id"] = user_id
        game["state"] = "opponent_select"

        player1 = await client.get_users(game["player1_id"])
        player2 = await client.get_users(user_id)
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton(str(i), callback_data=f"duel_opponent_{game_id}_{i}") for i in range(1, 4)],
            [InlineKeyboardButton(str(i), callback_data=f"duel_opponent_{game_id}_{i}") for i in range(4, 7)]
        ])
        await client.edit_message_text(
            chat_id=game["chat_id"],
            message_id=game["message_id"],
            text=f"‚öîÔ∏è –ò–≥—Ä–æ–∫ {player1.first_name} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å –∏–≥—Ä–æ–∫–∞ {player2.first_name}!\n"
                 f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(game['bet'])} –º–æ–Ω–µ—Ç\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 1: {game['player1_num']}\n\n"
                 f"–ò–≥—Ä–æ–∫ 2, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=markup
        )
    await cq.answer()

# –í—ã–±–æ—Ä —á–∏—Å–ª–∞ –≤—Ç–æ—Ä—ã–º –∏–≥—Ä–æ–∫–æ–º
@app.on_callback_query(filters.regex(r"^duel_opponent_"))
async def duel_opponent_callback(client, cq):
    user_id = cq.from_user.id
    if not await check_user(user_id) or await is_banned_user(user_id):
        await cq.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª–∏.")
        return

    parts = cq.data.split("_")
    if len(parts) != 4:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    game_id, number = parts[2], int(parts[3])
    game = duel_data.get(game_id)

    if not game:
        await cq.answer("–î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if game["player2_id"] != user_id:
        await cq.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –¥—É—ç–ª—å!")
        return
    if game["state"] != "opponent_select":
        await cq.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ!")
        return
    if number == game["player1_num"]:
        await cq.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ç–æ –∂–µ —á–∏—Å–ª–æ, —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ 1!")
        return
    if not 1 <= number <= 6:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    async with duel_locks[game_id]:
        if game_id not in duel_data:
            await cq.answer("–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        game["player2_num"] = number
        game["state"] = "throwing_dice"
        await play_duel_round(client, game_id)
    await cq.answer()

# –õ–æ–≥–∏–∫–∞ —Ä–∞—É–Ω–¥–æ–≤
async def play_duel_round(client, game_id):
    game = duel_data.get(game_id)
    if not game:
        return

    player1 = await client.get_users(game["player1_id"])
    player2 = await client.get_users(game["player2_id"])
    chat_id = game["chat_id"]
    message_id = game["message_id"]

    await client.edit_message_text(
        chat_id, message_id,
        text=f"‚öîÔ∏è {player1.first_name} vs {player2.first_name}\n"
             f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(game['bet'])} –º–æ–Ω–µ—Ç\n"
             f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 1: {game['player1_num']}\n"
             f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 2: {game['player2_num']}\n\n"
             f"üé≤ –ö–∏–¥–∞–µ–º –∫–æ—Å—Ç–∏..."
    )
    await asyncio.sleep(3)

    all_numbers = list(range(1, 7))
    available = [n for n in all_numbers if n not in game["used_dice"]]
    if not available:
        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(game["bet"]), game["player1_id"]))
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(game["bet"]), game["player2_id"]))
                db.commit()
        except sqlite3.Error:
            pass
        await client.edit_message_text(
            chat_id, message_id,
            text=f"‚öîÔ∏è {player1.first_name} vs {player2.first_name}\n"
                 f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(game['bet'])} –º–æ–Ω–µ—Ç\n\n"
                 f"üé≤ –í—Å–µ —á–∏—Å–ª–∞ —É–∂–µ –≤—ã–ø–∞–¥–∞–ª–∏!\n"
                 f"üè≥Ô∏è –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.",
            reply_markup=None
        )
        del duel_data[game_id]
        del duel_locks[game_id]
        return

    dice_result = choice(available)
    game["used_dice"].append(dice_result)
    game["round"] += 1
    current_bet = game["bet"]

    if dice_result == game["player1_num"] and dice_result == game["player2_num"]:
        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(current_bet // 2), game["player1_id"]))
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(current_bet // 2), game["player2_id"]))
                db.commit()
        except sqlite3.Error:
            pass
        await client.edit_message_text(
            chat_id, message_id,
            text=f"‚öîÔ∏è {player1.first_name} vs {player2.first_name}\n"
                 f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(current_bet)} –º–æ–Ω–µ—Ç\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 1: {game['player1_num']}\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 2: {game['player2_num']}\n\n"
                 f"üé≤ –í—ã–ø–∞–ª–æ: {dice_result}\n"
                 f"üè≥Ô∏è –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –ø–æ–¥–µ–ª–µ–Ω–∞ –ø–æ–ø–æ–ª–∞–º.",
            reply_markup=None
        )
        del duel_data[game_id]
        del duel_locks[game_id]
        return

    elif dice_result == game["player1_num"]:
        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", ((float(current_bet * 2), game["player1_id"])))
                db.commit()
        except sqlite3.Error:
            pass
        await client.edit_message_text(
            chat_id, message_id,
            text=f"‚öîÔ∏è {player1.first_name} vs {player2.first_name}\n"
                 f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(current_bet)} –º–æ–Ω–µ—Ç\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 1: {game['player1_num']}\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 2: {game['player2_num']}\n\n"
                 f"üé≤ –í—ã–ø–∞–ª–æ: {dice_result}\n"
                 f"üëë –ü–æ–±–µ–¥–∏–ª {player1.first_name}! (+{format_balance(current_bet * 2)} –º–æ–Ω–µ—Ç)",
            reply_markup=None
        )
        await set_win_monet(player1.id, current_bet)
        await set_lose_monet(player2.id, current_bet)
        del duel_data[game_id]
        del duel_locks[game_id]
        return

    elif dice_result == game["player2_num"]:
        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(current_bet * 2), game["player2_id"]))
                db.commit()
        except sqlite3.Error:
            pass
        await client.edit_message_text(
            chat_id, message_id,
            text=f"‚öîÔ∏è {player1.first_name} vs {player2.first_name}\n"
                 f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(current_bet)} –º–æ–Ω–µ—Ç\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 1: {game['player1_num']}\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 2: {game['player2_num']}\n\n"
                 f"üé≤ –í—ã–ø–∞–ª–æ: {dice_result}\n"
                 f"üëë –ü–æ–±–µ–¥–∏–ª {player2.first_name}! (+{format_balance(current_bet * 2)} –º–æ–Ω–µ—Ç)",
            reply_markup=None
        )
        del duel_data[game_id]
        del duel_locks[game_id]
        return

    game["bet"] = int(current_bet * 0.95)
    if game["bet"] < 1:
        await client.edit_message_text(
            chat_id, message_id,
            text=f"‚öîÔ∏è {player1.first_name} vs {player2.first_name}\n"
                 f"üí∞ –°—Ç–∞–≤–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 1: {game['player1_num']}\n"
                 f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 2: {game['player2_num']}\n\n"
                 f"üé≤ –í—ã–ø–∞–ª–æ: {dice_result}\n"
                 f"üè≥Ô∏è –°—Ç–∞–≤–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=None
        )
        del duel_data[game_id]
        del duel_locks[game_id]
        return

    await client.edit_message_text(
        chat_id, message_id,
        text=f"‚öîÔ∏è {player1.first_name} vs {player2.first_name}\n"
             f"üí∞ –°—Ç–∞–≤–∫–∞: {format_balance(game['bet'])} –º–æ–Ω–µ—Ç\n"
             f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 1: {game['player1_num']}\n"
             f"üé≤ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–∞ 2: {game['player2_num']}\n\n"
             f"üé≤ –†–∞—É–Ω–¥ {game['round']}:\n"
             f"–í—ã–ø–∞–ª–æ: {dice_result}\n"
             f"–ù–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª, —Å—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ 5%.",
        reply_markup=None
    )
    await asyncio.sleep(2)
    await play_duel_round(client, game_id)



@app.on_message(filters.command('ggm'))
async def global_get_money(client, message):
    user_id = message.from_user.id
    if user_id not in API_OWNER:
        return

    if len(message.text.split()) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤—ã–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞–º: /ggm [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    
    amount = int(message.text.split()[1])
    if amount <= 0:
        await message.reply("‚ùå –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤—ã–¥–∞—Ç—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT id, money FROM crash")
    rows = cursor.fetchall()
    db.close()

    for row in rows:
        user_id = row[0]
        try:
            with sqlite3.connect(DBB) as db:
                db.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(amount), user_id))
                db.commit()
        except sqlite3.Error:
            pass
        print(f"‚úÖ {user_id} –ø–æ–ª—É—á–∏–ª {amount} –º–æ–Ω–µ—Ç.")

@app.on_message(filters.command('p_ban'))
async def handle_ban_user(client, message):
    tg_id = message.from_user.id
    if tg_id not in API_OWNER:  
        return

    if len(message.text.split()) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /p_ban <id>")
        return

    user_id = message.text.split()[1]
    if await is_banned_user(user_id):
        await message.reply("‚úÖ –ò–≥—Ä–æ–∫ —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
        return
    
    await ban_user(user_id)
    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
    await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –ë–∞–Ω</b>
<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.first_name} (@{message.from_user.username} #{message.from_user.id})
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} (@{user.username} #{user.id})
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

<b>–§—É–ª–ª —Ç–µ–∫—Å—Ç:</b> <pre lang='txt'>{message.text}</pre>
""")

@app.on_message(filters.command('p_unban'))
async def handle_unban_user(client, message):
    tg_id = message.from_user.id
    if tg_id not in API_OWNER:
        return

    if len(message.text.split()) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /p_unban <id>")
        return

    user_id = message.text.split()[1]

    if not await is_banned_user(user_id):
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        return

    await unban_user(user_id)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –†–∞–∑–±–∞–Ω</b>
<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.first_name} (@{message.from_user.username} #{message.from_user.id})
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} (@{user.username} #{user.id})
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

<b>–§—É–ª–ª —Ç–µ–∫—Å—Ç:</b> <pre lang='txt'>{message.text}</pre>
""")

# ----------------------- –ë–ê–®–ù–Ø ----------------------- #

TOWER_MULTIPLIERS = [1.1, 1.3, 1.6, 2.0, 2.4, 2.9, 3.5, 5.0, 7.1]

# In-memory game state and cooldowns
# —Ç–µ–ø–µ—Ä—å: game_id -> state
active_tower_games = {}
# user_id -> list of game_ids
user_tower_games = {}
tower_cooldowns = {}
button_cooldowns = {}

def format_balance(balance):
    balance = float(balance)
    if balance == 0:
        return "0"
    exponent = int(math.log10(abs(balance)))
    group = exponent // 3
    scaled_balance = balance / (10 ** (group * 3))
    formatted_balance = f"{scaled_balance:.2f}"
    suffix = "–∫" * group
    return formatted_balance.rstrip('0').rstrip('.') + suffix

def parse_bet_input(arg: str, user_money: Optional[Union[int, float, str, Decimal]] = None) -> int:
    if arg is None:
        return -1

    s = str(arg).strip().lower()
    s = s.replace(" ", "").replace("_", "")

    if s in ("–≤—Å–µ", "–≤—Å—ë", "all"):
        um = _to_decimal_safe(user_money)
        if um is None:
            return -1
        try:
            return int(um)
        except Exception:
            return -1

    m = re.fullmatch(r'([0-9]+(?:[.,][0-9]{1,2})?)([k–∫]*)', s)
    if not m:
        return -1

    num_str, k_suffix = m.groups()
    num_str = num_str.replace(',', '.')
    try:
        num = Decimal(num_str)
    except Exception:
        return -1

    multiplier = Decimal(1000) ** len(k_suffix)
    result = num * multiplier

    try:
        return int(result)
    except Exception:
        return -1


async def get_balance(user_id: int) -> int:
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT money FROM crash WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    db.close()
    return row[0] if row else 0

async def update_balance(user_id: int, delta: int):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (delta, user_id))
    db.commit()
    db.close()

def create_tower_game(game_id: str, user_id: int, bet: int):
    bombs = []
    for _ in range(9):
        row = [0] * 5
        row[rnd.randint(0, 4)] = 1
        bombs.append(row)
    state = {
        "user_id": user_id,
        "bet": bet,
        "level": 0,
        "bombs": bombs,
        "selected": [],
        "lost": False,
        "game_id": game_id
    }
    active_tower_games[game_id] = state
    user_tower_games.setdefault(user_id, []).append(game_id)
    return state

def remove_tower_game(game_id: str):
    state = active_tower_games.pop(game_id, None)
    if not state:
        return
    uid = state.get("user_id")
    if uid and uid in user_tower_games:
        if game_id in user_tower_games[uid]:
            user_tower_games[uid].remove(game_id)
        if not user_tower_games[uid]:
            del user_tower_games[uid]

def build_tower_keyboard(game_id: str, state: dict) -> InlineKeyboardMarkup:
    level = state["level"]
    bombs = state["bombs"]
    selected = state["selected"]
    kb = []
    # Current row buttons include game_id and index
    buttons = [
        InlineKeyboardButton("‚ùî", callback_data=f"tower_choose_{game_id}_{i}") for i in range(5)
    ]
    kb.append(buttons)
    # Completed rows (bottom-up)
    for i in range(level - 1, -1, -1):
        row = bombs[i]
        choice = selected[i]
        row_btns = []
        for j in range(5):
            emoji = "üåÄ" if j == choice else "‚ùî"
            row_btns.append(InlineKeyboardButton(emoji, callback_data="noop"))
        kb.append(row_btns)
    # Control buttons
    if level == 0:
        kb.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"tower_cancel_{game_id}")])
    else:
        kb.append([InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", callback_data=f"tower_collect_{game_id}")])
    return InlineKeyboardMarkup(kb)

def build_final_tower_keyboard(game_id: str, state: dict) -> InlineKeyboardMarkup:
    bombs = state["bombs"]
    selected = state["selected"]
    lost = state["lost"]
    last = len(selected) - 1 if lost else min(len(selected) - 1, 8)
    kb = []
    for i in range(last, -1, -1):
        row = bombs[i]
        choice = selected[i]
        row_btns = []
        for j in range(5):
            if row[j] == 1 and j == choice:
                emoji = "üí•"
            elif row[j] == 1:
                emoji = "üí£"
            elif j == choice:
                emoji = "üåÄ"
            else:
                emoji = "‚ùî"
            row_btns.append(InlineKeyboardButton(emoji, callback_data="noop"))
        kb.append(row_btns)
    # no control buttons on final keyboard
    return InlineKeyboardMarkup(kb)

# Start tower - allows up to 2 concurrent games per user
@app.on_message(filters.text & filters.regex(r"^–±–∞—à–Ω—è", flags=re.IGNORECASE))
async def start_tower(client: Client, message: Message):
    user_id = message.from_user.id
    parts = message.text.split()
    if len(parts) != 2:
        return await message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ë–∞—à–Ω—è <—Å—Ç–∞–≤–∫–∞>, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–∞—à–Ω—è 300 –∏–ª–∏ –ë–∞—à–Ω—è 1–∫")
    arg = parts[1]
    balance = await get_balance(user_id)
    bet = parse_bet_input(arg, balance)
    if bet == -1:
        return await message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ'.")
    if bet < 10 or bet > balance:
        return await message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
    now = asyncio.get_event_loop().time()
    if user_id in tower_cooldowns and now - tower_cooldowns[user_id] < 5:
        return await message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–π.")
    tower_cooldowns[user_id] = now

    # limit to 2 active games per user
    active_list = user_tower_games.get(user_id, [])
    if len(active_list) >= 2:
        return await message.reply_text("–£ –≤–∞—Å —É–∂–µ 2 –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã. –ó–∞–∫–æ–Ω—á–∏—Ç–µ –æ–¥–Ω—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é.")

    # Subtract bet
    await update_balance(user_id, -bet)

    # create game with unique id
    game_id = uuid.uuid4().hex
    state = create_tower_game(game_id, user_id, bet)

    await message.reply_text(
        f"üü¢ –¢—ã –Ω–∞—á–∞–ª –∏–≥—Ä—É \"–ë–∞—à–Ω—è\"!\n====================\n–£—Ä–æ–≤–µ–Ω—å: 1/10\n–°—Ç–∞–≤–∫–∞: {format_balance(bet)}\n–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x1.1",
        reply_markup=build_tower_keyboard(game_id, state)
    )

# Choose button handler (data: tower_choose_{game_id}_{idx})
@app.on_callback_query(filters.regex(r"^tower_choose_"))
async def handle_choose(client: Client, callback: CallbackQuery):
    data = callback.data  # e.g. tower_choose_abcd1234_2
    parts = data.split("_", 3)
    # parts = ["tower","choose","{game_id}","{idx}"]
    if len(parts) < 4:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
    game_id = parts[2]
    try:
        idx = int(parts[3])
    except ValueError:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)

    state = active_tower_games.get(game_id)
    if not state:
        return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
    user_id = callback.from_user.id
    if state["user_id"] != user_id:
        return await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)

    level = state["level"]
    # append selected
    state["selected"].append(idx)
    if state["bombs"][level][idx] == 1:
        state["lost"] = True
        balance = await get_balance(user_id)
        await callback.message.edit_text(
            f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(balance)}",
            reply_markup=build_final_tower_keyboard(game_id, state)
        )
        remove_tower_game(game_id)
        return

    state["level"] += 1
    # won full tower
    if state["level"] >= 9:
        win = round(state["bet"] * TOWER_MULTIPLIERS[8])
        await update_balance(user_id, win)
        balance = await get_balance(user_id)
        await callback.message.edit_text(
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–±—Ä–∞–ª–∏ {format_balance(win)}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(balance)}",
            reply_markup=build_final_tower_keyboard(game_id, state)
        )
        remove_tower_game(game_id)
        return

    mult = TOWER_MULTIPLIERS[state["level"] - 1]
    await callback.message.edit_text(
        f"üü¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–≥—Ä–∞—Ç—å!\n====================\n–£—Ä–æ–≤–µ–Ω—å: {state['level']+1}/10\n–°—Ç–∞–≤–∫–∞: {format_balance(state['bet'])}\n–í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {format_balance(state['bet'] * mult)}\n–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{mult:.1f}",
        reply_markup=build_tower_keyboard(game_id, state)
    )

# Cancel specific game (data: tower_cancel_{game_id})
@app.on_callback_query(filters.regex(r"^tower_cancel_"))
async def handle_cancel(client: Client, callback: CallbackQuery):
    data = callback.data
    parts = data.split("_", 2)
    if len(parts) < 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
    game_id = parts[2]
    state = active_tower_games.get(game_id)
    if not state:
        return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    user_id = callback.from_user.id
    if state["user_id"] != user_id:
        return await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)
    if state['level'] != 0:
        return await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", show_alert=True)
    bet = state['bet']
    await update_balance(user_id, bet)
    await callback.message.edit_text(f"–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, {format_balance(bet)} –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    remove_tower_game(game_id)

# Collect specific game (data: tower_collect_{game_id})
@app.on_callback_query(filters.regex(r"^tower_collect_"))
async def handle_collect(client: Client, callback: CallbackQuery):
    data = callback.data
    parts = data.split("_", 2)
    if len(parts) < 3:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
    game_id = parts[2]
    state = active_tower_games.get(game_id)
    if not state:
        return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    user_id = callback.from_user.id
    if state["user_id"] != user_id:
        return await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)
    if state['level'] == 0:
        return await callback.answer("–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ.", show_alert=True)
    lvl = state['level'] - 1
    win = round(state['bet'] * TOWER_MULTIPLIERS[lvl])
    await update_balance(user_id, win)
    balance = await get_balance(user_id)
    await callback.message.edit_text(
        f"–í—ã –∑–∞–±—Ä–∞–ª–∏ {format_balance(win)}!\n–í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(balance)}",
        reply_markup=None
    )
    remove_tower_game(game_id)


from datetime import datetime
import uuid
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import pytz

@app.on_message(filters.command("ssss"))
async def test_bank_interest(client, message):
    user_id = message.from_user.id
    if user_id not in API_OWNER:
        return

    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)

    with sqlite3.connect(DBB) as db:
        cursor = db.cursor()
        cursor.execute("SELECT deposit_id, current_amount FROM bank_deposits WHERE is_active = 1")
        deposits = cursor.fetchall()
        for deposit_id, current_amount in deposits:
            new_amount = int(current_amount * 1.05)  # +5%
            cursor.execute("UPDATE bank_deposits SET current_amount = ? WHERE deposit_id = ?",
                          (float(new_amount), deposit_id))
        db.commit()

    await message.reply(f"[BANK] –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è {len(deposits)} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ {now.strftime('%Y-%m-%d %H:%M:%S %Z')}")
    print(f"[BANK] –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è {len(deposits)} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ {now.strftime('%Y-%m-%d %H:%M:%S %Z')}")

async def bank_command(client, message):
    user_id = message.from_user.id
    if not await check_user(user_id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ —Ä–µ–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    if await is_banned_user(user_id):
        await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    parts = message.text.split()
    user_data = get_user_data(user_id)
    moscow_tz = pytz.timezone('Europe/Moscow')

    if len(parts) == 1:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            cursor.execute("SELECT deposit_id, amount, current_amount, created_at FROM bank_deposits WHERE user_id = ? AND is_active = 1", (user_id,))
            deposits = cursor.fetchall()

        if not deposits:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤.\n–°–æ–∑–¥–∞–π—Ç–µ –¥–µ–ø–æ–∑–∏—Ç: /bank <—Å—É–º–º–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100–∫, 1.5–∫–∫) –∏–ª–∏ /bank –≤—Å–µ")
            return

        response = "<b>üè¶ –í–∞—à–∏ –¥–µ–ø–æ–∑–∏—Ç—ã:</b>\n\n"
        for deposit in deposits:
            deposit_id, amount, current_amount, created_at = deposit
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º created_at –≤ –ú–°–ö
            created_at_dt = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
            created_at_msk = pytz.utc.localize(created_at_dt).astimezone(moscow_tz)
            response += (f"üìå <b>–î–µ–ø–æ–∑–∏—Ç ID:</b> <code>{deposit_id[:8]}</code>\n"
                        f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: <code>{format_balance(amount)}</code>\n"
                        f"üìà –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <code>{format_balance(current_amount)}</code>\n"
                        f"üìÖ –°–æ–∑–¥–∞–Ω: <code>{created_at_msk.strftime('%Y-%m-%d %H:%M:%S')}</code>\n\n")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        inline_keyboard = [[InlineKeyboardButton(f"–ó–∞–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç {deposit[0][:8]}", callback_data=f"bank_close_{deposit[0]}")] for deposit in deposits]
        markup = InlineKeyboardMarkup(inline_keyboard)
        
        response += f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <code>{format_balance(user_data['money'])}</code>\n"
        response += "<i>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ 5% –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ 00:00 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ú–°–ö.</i>"
        await message.reply(response, reply_markup=markup)
        return

    if len(parts) == 2:
        # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
        input_amount = parts[1].lower()
        if input_amount in ("–≤—Å–µ", "–≤—Å—ë"):
            amount = user_data['money']
        else:
            amount = parse_bet_amount(input_amount, user_data['money'])
            if amount is None:
                await message.reply("<i>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000, 100–∫, 1.5–∫–∫) –∏–ª–∏ '–≤—Å–µ'</i>")
                return

        if amount < 10:
            await message.reply("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ ‚Äî 10 –º–æ–Ω–µ—Ç.</i>")
            return
        if amount > user_data['money']:
            await message.reply("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</i>")
            return
        if amount == 0:
            await message.reply("<i>–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç.</i>")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            cursor.execute("SELECT COUNT(*) FROM bank_deposits WHERE user_id = ? AND is_active = 1", (user_id,))
            deposit_count = cursor.fetchone()[0]

        if deposit_count >= 10:
            await message.reply("<i>–£ –≤–∞—Å —É–∂–µ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–¥–∏–Ω, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.</i>")
            return

        # –°–æ–∑–¥–∞–µ–º 
        deposit_id = str(uuid.uuid4())
        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(amount), user_id))
            cursor.execute("INSERT INTO bank_deposits (deposit_id, user_id, amount, current_amount) VALUES (?, ?, ?, ?)",
                          (deposit_id, user_id, float(amount), float(amount)))
            db.commit()

        balance = format_balance(user_data['money'] - amount)
        await message.reply(f"<b>üè¶ –î–µ–ø–æ–∑–∏—Ç —Å–æ–∑–¥–∞–Ω!</b>\nID: <code>{deposit_id[:8]}</code>\n–°—É–º–º–∞: <code>{format_balance(amount)}</code>\nüí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance}</code>")
        await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞</b>
<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {message.from_user.first_name} (@{message.from_user.username} #{message.from_user.id})
<b>–°—É–º–º–∞:</b> {format_balance(amount)}
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            """)
        update_quest(user_id, 3)
        if is_quest_completed(user_id, 3):
            if not check_verifed_quests(user_id, 3):
                await app.send_message(user_id, "<b>–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∫–≤–µ—Å—Ç</b> '–ö–ª–∞–¥–º–µ–Ω'!")
                verifed_quests_completed(user_id, 3)


        return

    await message.reply("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bank ‚Äî –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n/bank <—Å—É–º–º–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100–∫, 1.5–∫–∫) –∏–ª–∏ /bank –≤—Å–µ ‚Äî –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞</i>")

@app.on_callback_query(filters.regex(r'^bank_close_'))
async def bank_close_callback(client, callback_query):
    user_id = callback_query.from_user.id
    deposit_id = callback_query.data.split('_')[2]

    if user_id not in user_locks:
        user_locks[user_id] = Lock()

    if user_locks[user_id].locked():
        await callback_query.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞!")
        return

    async with user_locks[user_id]:
        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            cursor.execute("SELECT current_amount FROM bank_deposits WHERE deposit_id = ? AND user_id = ? AND is_active = 1",
                          (deposit_id, user_id))
            deposit = cursor.fetchone()

            if not deposit:
                await callback_query.answer("–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
                return

            current_amount = deposit[0]
            cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(current_amount), user_id))
            cursor.execute("UPDATE bank_deposits SET is_active = 0 WHERE deposit_id = ?", (deposit_id,))
            db.commit()

        user_data = get_user_data(user_id)
        balance = format_balance(user_data['money'])
        await callback_query.message.edit_text(
            f"<b>üè¶ –î–µ–ø–æ–∑–∏—Ç –∑–∞–∫—Ä—ã—Ç!</b>\nID: <code>{deposit_id[:8]}</code>\n–í—ã –ø–æ–ª—É—á–µ–Ω–æ: <code>{format_balance(current_amount)}</code>\nüí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance}</code>"
        )
        await callback_query.answer()
    
    await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞</b>
<b>–ó–∞–∫—Ä—ã–≤–∞—Ç–µ–ª—å:</b> {callback_query.from_user.first_name} (@{callback_query.from_user.username} #{callback_query.from_user.id})
<b>–î–µ–ø–æ–∑–∏—Ç:</b> {deposit_id}
<b>–°—É–º–º–∞:</b> {format_balance(current_amount)}
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            """)

def get_user_quests(user_id: int):
    data = load_quests()
    str_id = str(user_id)
    return data.get(str_id, [])

def format_quests(quests: list):
    text = "<b>üìú –í–∞—à–∏ –∫–≤–µ—Å—Ç—ã:</b>\n\n"
    for q in quests:
        status = "‚úÖ" if q["completed"] else "‚ùå"
        text += f"‚Ä¢ <b>{q['quest_name']}</b> {status}\n"
        text += f"  ‚îî {q['quest_description']}\n"
        text += f"  ‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: <code>{q['count']} / {q['max_count']}</code>\n\n"
    return text


def completed_all_quests(user_id):
    quests = get_user_quests(user_id)
    for quest in quests:
        if not is_quest_completed(quest):
            return False
    return True

def all_quests_completed(quests: list):
    return all(q.get("completed", False) for q in quests)

def is_quest_completed(user_id: str, quest_id: int) -> bool:
    with open(QUESTS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)

    user_quests = data.get(str(user_id), [])
    for quest in user_quests:
        if quest["quest_id"] == quest_id:
            return quest.get("completed", False)
    return False

def create_default_quests(user_id):
    global default_quests
    with open(QUESTS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)

    data[str(user_id)] = default_quests

    with open(QUESTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# @app.on_message(filters.command(["quests", "–∫–≤–µ—Å—Ç—ã", "qu"]))
async def show_quests(client: Client, message: Message):
    user_id = message.from_user.id
    quests = get_user_quests(user_id)

    if not quests:
        create_default_quests(user_id)
        await message.reply("–ü–û–ü–†–û–ë–£–ô–¢–ï –ï–©–ï –†–ê–ó")
        return

    if all_quests_completed(quests):
        await message.reply(f"üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∫–≤–µ—Å—Ç—ã!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ 2 —á–∞—Å—Ç—å –∏–≤–µ–Ω—Ç–∞: {encrypt_user_id(user_id)}", quote=True)
        return

    text = format_quests(quests)
    await message.reply(text, quote=True)



@app.on_message(filters.command("answer"))
async def show_quests_answer(client: Client, message: Message):
    user_id = str(message.from_user.id)
    args = message.text.split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /answer (–æ—Ç–≤–µ—Ç)")
        return
    answer = args[1]
    if answer == "–º–∏–Ω–æ—Ä":
        await message.reply("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        update_quest(user_id, 5)
    else:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")

@app.on_message(filters.command("fff"))
async def add_shop_item(client, message):
    user_id = message.from_user.id
    if user_id not in API_OWNER:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split()
    if len(parts) < 4:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /fff (–Ω–∞–∑–≤–∞–Ω–∏–µ) (—Ü–µ–Ω–∞) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n–ü—Ä–∏–º–µ—Ä: /fff –º–µ—á 1000 5")
        return

    # –í—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∏—Å–ª–∞, —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    name = " ".join(parts[1:-2])
    price_str, quantity_str = parts[-2], parts[-1]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        price = int(price_str)
        quantity = int(quantity_str)
        if price < 0 or quantity < 0:
            await message.reply("–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏.")
            return
    except ValueError:
        await message.reply("–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    try:
        cursor.execute("INSERT INTO shop (name, price, quantity) VALUES (?, ?, ?)", (name, price, quantity))
        db.commit()
        await message.reply(f"–ü—Ä–µ–¥–º–µ—Ç '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω!\n–¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
    except sqlite3.IntegrityError:
        await message.reply(f"–ü—Ä–µ–¥–º–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
    finally:
        db.close()
    await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω</b>
<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {message.from_user.first_name} (@{message.from_user.username} #{message.from_user.id})
<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {name}
<b>–¶–µ–Ω–∞:</b> {price} –º–æ–Ω–µ—Ç
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

<b>–§—É–ª–ª —Ç–µ–∫—Å—Ç:</b> <pre lang='txt'>{message.text}</pre>
""")

SHOP_PAGE_SIZE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
SHOP_PAGES = {}      # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
SHOP_CALLER = {}     # –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ /shop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
SHOP_SORT = {}       # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

from pyrogram.enums import ChatType, ParseMode


async def show_shop(client, message):

    if message.chat.type == ChatType.PRIVATE:
        pass
    else:
        await message.reply("–ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    user_id = message.from_user.id
    if not await check_user(user_id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ —Ä–µ–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    if await is_banned_user(user_id):
        await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SHOP_PAGES[user_id] = 0
    SHOP_SORT[user_id] = "default"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    items = fetch_shop_items(SHOP_SORT[user_id])

    if not items:
        await message.reply("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    msg = await message.reply("üõí –ó–∞–≥—Ä—É–∂–∞—é –º–∞–≥–∞–∑–∏–Ω...")
    SHOP_CALLER[msg.id] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /shop
    await update_shop_message(client, msg, user_id, items, 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
def fetch_shop_items(sort_type):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ORDER BY –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if sort_type == "cheap":
        order_by = "ORDER BY price ASC"
    elif sort_type == "expensive":
        order_by = "ORDER BY price DESC"
    elif sort_type == "new":
        order_by = "ORDER BY created_at DESC"
    elif sort_type == "old":
        order_by = "ORDER BY created_at ASC"
    elif sort_type == "quantity_high":
        # –ü—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: -1 (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–≤–µ—Ä—Ö—É
        order_by = "ORDER BY CASE WHEN quantity = -1 THEN 0 ELSE 1 END, quantity DESC"
    elif sort_type == "quantity_low":
        # –ü—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: -1 (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–Ω–∏–∑—É
        order_by = "ORDER BY CASE WHEN quantity = -1 THEN 1 ELSE 0 END, quantity ASC"
    else:
        order_by = ""  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    query = f"SELECT name, price, quantity FROM shop {order_by}"
    cursor.execute(query)
    items = cursor.fetchall()
    db.close()
    return items

async def update_shop_message(client, message, user_id, items, page):
    start_idx = page * SHOP_PAGE_SIZE
    end_idx = start_idx + SHOP_PAGE_SIZE
    items_page = items[start_idx:end_idx]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    current_sort = SHOP_SORT.get(user_id, "default")
    sort_display = {
        "default": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "cheap": "–î–µ—à–µ–≤—ã–µ",
        "expensive": "–î–æ—Ä–æ–≥–∏–µ",
        "new": "–ù–æ–≤—ã–µ",
        "old": "–°—Ç–∞—Ä—ã–µ",
        "quantity_high": "–ö–æ–ª-–≤–æ (–º–Ω–æ–≥–æ)",
        "quantity_low": "–ö–æ–ª-–≤–æ (–º–∞–ª–æ)"
    }
    text = (f"üõí <b>–ú–∞–≥–∞–∑–∏–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{((len(items) - 1) // SHOP_PAGE_SIZE) + 1}):</b>\n"
            f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}\n"
            f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_display[current_sort]}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    buttons = []
    for name, price, quantity in items_page:
        display_qty = "‚ùå" if quantity == 0 else f"{quantity if quantity > 0 else '‚ùå'}"
        button_text = f"{name} ‚Äî {format_balance(price)} ({display_qty})"
        buttons.append([InlineKeyboardButton(button_text, callback_data=f"shop_info:{name}:{page}")])
    
    buttons.append([InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"market_view_edit")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"shop_page:{page - 1}"))
    if end_idx < len(items):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"shop_page:{page + 1}"))
    if nav_buttons:
        buttons.append(nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π
    sort_buttons = [
        [InlineKeyboardButton(f"–î–µ—à–µ–≤—ã–µ{' ‚úÖ' if current_sort == 'cheap' else ''}", callback_data="shop_sort:cheap"),
         InlineKeyboardButton(f"–î–æ—Ä–æ–≥–∏–µ{' ‚úÖ' if current_sort == 'expensive' else ''}", callback_data="shop_sort:expensive")],
        [InlineKeyboardButton(f"–ù–æ–≤—ã–µ{' ‚úÖ' if current_sort == 'new' else ''}", callback_data="shop_sort:new"),
         InlineKeyboardButton(f"–°—Ç–∞—Ä—ã–µ{' ‚úÖ' if current_sort == 'old' else ''}", callback_data="shop_sort:old")],
        [InlineKeyboardButton(f"–ö–æ–ª-–≤–æ (–º–Ω–æ–≥–æ){' ‚úÖ' if current_sort == 'quantity_high' else ''}", callback_data="shop_sort:quantity_high"),
         InlineKeyboardButton(f"–ö–æ–ª-–≤–æ (–º–∞–ª–æ){' ‚úÖ' if current_sort == 'quantity_low' else ''}", callback_data="shop_sort:quantity_low")],
        [InlineKeyboardButton(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é{' ‚úÖ' if current_sort == 'default' else ''}", callback_data="shop_sort:default")]
    ]
    buttons.extend(sort_buttons)

    reply_markup = InlineKeyboardMarkup(buttons) if buttons else None
    await client.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.id,
        text=text,
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü
@app.on_callback_query(filters.regex(r"shop_page:(\d+)"))
async def change_shop_page(client, callback_query):
    page = int(callback_query.matches[0].group(1))
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /shop
    if SHOP_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    items = fetch_shop_items(SHOP_SORT.get(user_id, "default"))

    if not items:
        await callback_query.answer("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SHOP_PAGES[user_id] = page

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_shop_message(client, callback_query.message, user_id, items, page)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@app.on_callback_query(filters.regex(r"shop_sort:(\w+)"))
async def change_shop_sort(client, callback_query):
    sort_type = callback_query.matches[0].group(1)
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /shop
    if SHOP_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    current_sort = SHOP_SORT.get(user_id, "default")
    if current_sort == sort_type:
        await callback_query.answer("–≠—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    SHOP_SORT[user_id] = sort_type
    SHOP_PAGES[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    items = fetch_shop_items(sort_type)

    if not items:
        await callback_query.answer("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_shop_message(client, callback_query.message, user_id, items, 0)
    await callback_query.answer(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {sort_type}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
@app.on_callback_query(filters.regex(r"shop_info:"))
async def shop_item_info(client, callback_query):
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /shop
    if SHOP_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω!", show_alert=True)
        return

    parts = callback_query.data.split(":")
    item_name, page = parts[1], int(parts[2])

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT name, price, quantity FROM shop WHERE name = ?", (item_name,))
    item = cursor.fetchone()
    db.close()

    if not item:
        await callback_query.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    name, price, quantity = item
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
    is_out_of_stock = quantity == 0
    display_qty = "‚ùå" if is_out_of_stock else f"–í—Å–µ–≥–æ: {quantity if quantity > 0 else '‚àû'}"
    user_data = get_user_data(user_id)
    balance = user_data["money"]

    text = (f"üõí <b>–ü—Ä–µ–¥–º–µ—Ç: {name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {format_balance(price)} \n"
            f"üì¶ {display_qty}\n"
            f"üíº –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(balance)} ")

    # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if is_out_of_stock:
        buttons = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"shop_back:{page}")]]
    else:
        buttons = [
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å", callback_data=f"shop_buy:{name}:{page}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"shop_back:{page}")]
        ]

    reply_markup = InlineKeyboardMarkup(buttons)

    await client.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=message_id,
        text=text,
        reply_markup=reply_markup
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@app.on_callback_query(filters.regex(r"shop_buy:"))
async def shop_buy_item(client, callback_query):
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /shop
    if SHOP_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω!", show_alert=True)
        return

    parts = callback_query.data.split(":")
    item_name, page = parts[1], int(parts[2])

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT name, price, quantity FROM shop WHERE name = ?", (item_name,))
    item = cursor.fetchone()

    if not item:
        await callback_query.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    name, price, quantity = item
    user_data = get_user_data(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
    if quantity == 0:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!", show_alert=True)
        return
    if user_data["money"] < price:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    with sqlite3.connect(DBB) as db:
        cursor = db.cursor()
        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(price), user_id))
        if quantity != -1:
            cursor.execute("UPDATE shop SET quantity = quantity - 1 WHERE name = ?", (item_name,))
        cursor.execute("""
            INSERT INTO inv_user (user_id, item_name, quantity)
            VALUES (?, ?, 1)
            ON CONFLICT(user_id, item_name)
            DO UPDATE SET quantity = quantity + 1
        """, (user_id, item_name))
        db.commit()

    cursor.execute("SELECT name, price, quantity FROM shop WHERE name = ?", (item_name,))
    updated_item = cursor.fetchone()
    db.close()

    name, price, quantity = updated_item
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    is_out_of_stock = quantity == 0
    display_qty = "–¢–æ–≤–∞—Ä –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" if is_out_of_stock else f"–û—Å—Ç–∞–ª–æ—Å—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ: {quantity if quantity > 0 else '‚àû'}"
    new_balance = user_data["money"] - price

    text = (f"üéâ <b>–í—ã –∫—É–ø–∏–ª–∏: {name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {format_balance(price)} \n"
            f"üì¶ {display_qty}\n"
            f"üíº –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(new_balance)}")

    await app.send_message("-1004869586301", f"""
    <b>–ú–æ–º–µ–Ω—Ç: –ü–æ–∫—É–ø–∫–∞</b>
    <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {callback_query.from_user.first_name} (@{callback_query.from_user.username} #{callback_query.from_user.id})
    <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {name}
    <b>–°—É–º–º–∞:</b> {format_balance(price)} ({price})
    <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    """)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –µ—â–µ"
    if is_out_of_stock:
        buttons = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"shop_back:{page}")]]
    else:
        buttons = [
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –µ—â–µ", callback_data=f"shop_buy:{name}:{page}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"shop_back:{page}")]
        ]

    reply_markup = InlineKeyboardMarkup(buttons)

    await client.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=message_id,
        text=text,
        reply_markup=reply_markup
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@app.on_callback_query(filters.regex(r"shop_back:"))
async def shop_back(client, callback_query):
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /shop
    if SHOP_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω!", show_alert=True)
        return

    page = int(callback_query.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    items = fetch_shop_items(SHOP_SORT.get(user_id, "default"))

    if not items:
        await callback_query.answer("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.", show_alert=True)
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    await update_shop_message(client, callback_query.message, user_id, items, page)
    await callback_query.answer()

async def sell_item(client, message):
    args = message.text.split()
    if len(args) < 4:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sell [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–µ–¥–º–µ—Ç–∞] [—Ü–µ–Ω–∞] [–∫–æ–ª-–≤–æ]")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–≤—Å–µ —Å–ª–æ–≤–∞ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö), —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    item = " ".join(args[1:-2])
    try:
        price = float(parse_bet_amount((args[-2]), args[-2]))
        amount = parse_bet_amount((args[-1]), args[-1])
    except ValueError:
        return await message.reply("–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    if price < 0 or amount <= 0:
        return await message.reply("–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏.")

    user_id = message.from_user.id

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT quantity FROM inv_user WHERE user_id = ? AND item_name = ?", (user_id, item))
    result = cursor.fetchone()

    if not result or result[0] < amount:
        db.close()
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")

    # –≤—ã—á–∏—Ç–∞–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    cursor.execute("UPDATE inv_user SET quantity = quantity - ? WHERE user_id = ? AND item_name = ?", (amount, user_id, item))

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ç
    cursor.execute("INSERT INTO MARKETPLACE (seller_id, item_name, price, quantity) VALUES (?, ?, ?, ?)",
                   (user_id, item, price, float(amount)))
    db.commit()
    db.close()

    await message.reply(f"‚úÖ –í—ã –≤—ã—Å—Ç–∞–≤–∏–ª–∏ <b>{item}</b> √ó{amount} –ø–æ <b>{format_balance(price)}</b> –º–æ–Ω–µ—Ç.")

# 

async def view_market(client, message):
    
    if message.chat.type == ChatType.PRIVATE:
        pass
    else:
        await message.reply("–ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üõç –ö—É–ø–∏—Ç—å", callback_data="market_buy")],
        [InlineKeyboardButton("üì¶ –ü—Ä–æ–¥–∞—Ç—å", callback_data="market_sell")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ª–æ—Ç—ã", callback_data="market_my_offers")]
    ])
    await message.reply("üõí <b>–ú–∞—Ä–∫–µ—Ç:</b>", reply_markup=markup)

@app.on_callback_query(filters.regex(r"market_buy"))
async def market_buy_main(client, callback_query):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT DISTINCT item_name FROM MARKETPLACE")
    items = cursor.fetchall()
    db.close()

    if not items:
        return await callback_query.message.edit_text("‚ùå –ù–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

    buttons = [
        [InlineKeyboardButton(f"{item[0]}", callback_data=f"buy_item_group_{item[0]}")] for item in items
    ]
    markup = InlineKeyboardMarkup(buttons)
    await callback_query.message.edit_text("üîé –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)
# helper: –±–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –ø—Ä–æ–¥–∞–≤—Ü—è
async def safe_username(client, seller_id):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —á–∏—Ç–∞–±–µ–ª—å–Ω–µ —ñ–º'—è –ø—Ä–æ–¥–∞–≤—Ü—è.
    –ü–µ—Ä–µ–≤–∞–≥–∞: –ø—Ä–æ–±—É—î client.get_users, –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –¥–∏–≤–∏—Ç—å—Å—è –≤ –ë–î, —è–∫—â–æ —ñ —Ç–∞–º –Ω—ñ—á–æ–≥–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î '#id'.
    """
    try:
        # –ü—Ä–æ–±—É—î–º–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ int ‚Äî —è–∫—â–æ –≤ –ë–î –ª–µ–∂–∏—Ç—å —Ä—è–¥–æ–∫, –∞–ª–µ —Ç–∞–º —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç—ñ
        seller_id_int = int(seller_id)
    except Exception:
        seller_id_int = seller_id  # –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î

    # —Å–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–µ–∑ API
    try:
        user = await client.get_users(seller_id_int)
        if user:
            return f"@{user.username}" if getattr(user, "username", None) else user.first_name or str(seller_id)
    except Exception as e:
        logger.debug(f"safe_username: client.get_users failed for {seller_id} -> {e}")

    # fallback: –±–µ—Ä–µ–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ—ó –ë–î (—è–∫—â–æ —î —Ç–∞–±–ª–∏—Ü—è crash –∑ username)
    try:
        from contextlib import closing
        with closing(sqlite3.connect(DBB)) as db:
            cur = db.cursor()
            cur.execute("SELECT username FROM crash WHERE id = ?", (seller_id,))
            r = cur.fetchone()
            if r and r[0]:
                return f"@{r[0]}"
    except Exception as e:
        logger.debug(f"safe_username: db fallback failed for {seller_id} -> {e}")

    # –æ—Å—Ç–∞–Ω–Ω—ñ–π fallback ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ id
    return f"#{seller_id}"

# –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π market_item_group
@app.on_callback_query(filters.regex(r"buy_item_group_(.+)"))
@rate_limit
async def market_item_group(client, callback_query):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    try:
        item = callback_query.data.split("_", 3)[-1]
        user_id = callback_query.from_user.id

        with closing(sqlite3.connect(DBB)) as db:
            cursor = db.cursor()
            cursor.execute(
                "SELECT rowid, seller_id, price, quantity FROM MARKETPLACE WHERE item_name = ?",
                (item,)
            )
            offers = cursor.fetchall()

        if not offers:
            try:
                await callback_query.message.edit_text("‚ùå –≠—Ç–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ.")
            except MessageNotModified:
                pass
            return

        buttons = []
        text = f"üì¶ <b>{item}</b> ‚Äî –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n"
        for rowid, seller_id, price, quantity in offers:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω–∏–π —Ö–µ–ª–ø–µ—Ä –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ get_users
            seller_display = await safe_username(client, seller_id)
            name = seller_display[:10]  # –æ–±—Ä—ñ–∑–∞—î–º–æ –¥–æ–≤–≥–µ —ñ–º'—è
            buttons.append([InlineKeyboardButton(
                f"{name} | {format_balance(price)} | {quantity} —à—Ç",
                callback_data=f"buy_confirm_{rowid}_{item}"
            )])
        buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="market_view_edit")])

        try:
            await callback_query.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except MessageNotModified:
            logger.debug("market_item_group: message not modified, ignoring.")
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ market_item_group (item={item}): {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@app.on_callback_query(filters.regex(r"buy_confirm_(\d+)_(.+)"))
@rate_limit
async def buy_confirm(client, callback_query):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ (–∏–∑–º–µ–Ω–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è safe_username)."""
    try:
        data = callback_query.data.split("_")
        market_id = int(data[2])
        item = data[3]
        user_id = callback_query.from_user.id

        with closing(sqlite3.connect(DBB)) as db:
            cursor = db.cursor()
            cursor.execute(
                "SELECT seller_id, price, quantity FROM MARKETPLACE WHERE rowid = ? AND item_name = ?",
                (market_id, item)
            )
            offer = cursor.fetchone()

            if not offer:
                try:
                    await callback_query.message.edit_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
                except MessageNotModified:
                    pass
                return

            seller_id, price, quantity = offer

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            seller_name = await safe_username(client, seller_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            cursor.execute("SELECT money FROM crash WHERE id = ?", (user_id,))
            buyer_money = cursor.fetchone()
            if not buyer_money or buyer_money[0] < price:
                try:
                    await callback_query.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
                except MessageNotModified:
                    pass
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = (
            f"üì¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: <b>{item}</b>\n"
            f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{seller_name}</b>\n"
            f"–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: <b>{format_balance(price)}</b> –º–æ–Ω–µ—Ç\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>1</b> (–¥–æ—Å—Ç—É–ø–Ω–æ: {quantity})\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{format_balance(buyer_money[0])}</b> –º–æ–Ω–µ—Ç\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:"
        )
        buttons = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"buy_final_{market_id}_{item}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"buy_item_group_{item}")]
        ]

        try:
            await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))
        except MessageNotModified:
            logger.debug("buy_confirm: message not modified, ignoring.")
        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_confirm (market_id={locals().get('market_id')}, item={locals().get('item')}): {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@app.on_callback_query(filters.regex(r"buy_final_(\d+)_(.+)"))
@rate_limit
async def buy_final(client, callback_query):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ (–∏–∑–º–µ–Ω–µ–Ω–æ: safe —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫)."""
    try:
        data = callback_query.data.split("_")
        market_id = int(data[2])
        item = data[3]
        user_id = callback_query.from_user.id
        current_message_text = callback_query.message.text or ""

        with closing(sqlite3.connect(DBB)) as db:
            cursor = db.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            cursor.execute(
                "SELECT seller_id, price, quantity FROM MARKETPLACE WHERE rowid = ? AND item_name = ?",
                (market_id, item)
            )
            offer = cursor.fetchone()

            if not offer:
                try:
                    await callback_query.message.edit_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.")
                except MessageNotModified:
                    pass
                return

            seller_id, price, quantity = offer

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç —É —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if user_id == seller_id:
                try:
                    await callback_query.message.edit_text("‚ùå –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç —É —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                except MessageNotModified:
                    pass
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            cursor.execute("SELECT money FROM crash WHERE id = ?", (user_id,))
            buyer_money = cursor.fetchone()
            if not buyer_money or buyer_money[0] < price:
                try:
                    await callback_query.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
                except MessageNotModified:
                    pass
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message_text = f"üéâ –í—ã –∫—É–ø–∏–ª–∏ <b>{item}</b> –∑–∞ <b>{format_balance(price)}</b> –º–æ–Ω–µ—Ç."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if new_message_text == current_message_text:
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è market_id={market_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                await callback_query.answer("–ü–æ–∫—É–ø–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
                return

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
                cursor.execute(
                    "UPDATE crash SET money = money - ? WHERE id = ?",
                    (price, user_id)
                )
                if cursor.rowcount == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")

                cursor.execute(
                    "UPDATE crash SET money = money + ? WHERE id = ?",
                    (price, seller_id)
                )
                if cursor.rowcount == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É.")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                cursor.execute(
                    "INSERT OR IGNORE INTO inv_user (user_id, item_name, quantity) VALUES (?, ?, 0)",
                    (user_id, item)
                )
                cursor.execute(
                    "UPDATE inv_user SET quantity = quantity + 1 WHERE user_id = ? AND item_name = ?",
                    (user_id, item)
                )
                if cursor.rowcount == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                if quantity <= 1:
                    cursor.execute("DELETE FROM MARKETPLACE WHERE rowid = ?", (market_id,))
                else:
                    cursor.execute(
                        "UPDATE MARKETPLACE SET quantity = quantity - 1 WHERE rowid = ?",
                        (market_id,)
                    )
                    if cursor.rowcount == 0:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.")

                db.commit()
            except Exception as e:
                db.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (market_id={market_id}): {e}")
                try:
                    await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞.")
                except MessageNotModified:
                    pass
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ "–ö—É–ø–∏—Ç—å –µ—â–µ", –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω)
        buttons = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="market_view_edit")]]
        if quantity > 1:
            buttons.append([InlineKeyboardButton("–ö—É–ø–∏—Ç—å –µ—â–µ", callback_data=f"buy_item_group_{item}")])

        try:
            await callback_query.message.edit_text(new_message_text, reply_markup=InlineKeyboardMarkup(buttons))
        except MessageNotModified:
            logger.debug("buy_final: message not modified, ignoring.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞/–ª–æ–≥
        try:
            seller_info = get_user_data(seller_id) or {"username": str(seller_id), "id": seller_id}
            await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –ü–æ–∫—É–ø–∫–∞ —É –∏–≥—Ä–æ–∫–∞</b>
<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {callback_query.from_user.first_name} (@{callback_query.from_user.username} #{callback_query.from_user.id})
<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {seller_info.get('username')} (#{seller_info.get('id')})
<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {item}
<b>–°—É–º–º–∞:</b> {format_balance(price)} ({price})
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            """)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –æ –ø–æ–∫—É–ø–∫–µ –∞–¥–º–∏–Ω—É: {e}")

        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except –∏ –ø—Ä–∏–≤–æ–¥–∏–º id –∫ int
        try:
            seller_id_int = int(seller_id)
            try:
                await app.send_message(seller_id_int, f"–í–∞—à –ø—Ä–µ–¥–º–µ—Ç {item} –ø—Ä–æ–¥–∞–Ω –∏–≥—Ä–æ–∫—É {callback_query.from_user.first_name} –∑–∞ {format_balance(price)} –º–æ–Ω–µ—Ç.")
            except RPCError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_id}: {e}")
        except (ValueError, TypeError):
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π seller_id –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {seller_id}")

        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_final (market_id={locals().get('market_id')}, item={locals().get('item')}): {e}")
        try:
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        except MessageNotModified:
            pass

from typing import List, Tuple
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from contextlib import closing
import sqlite3
import logging

logger = logging.getLogger(__name__)

async def validate_item_quantity(user_id: int, item: str, quantity: int) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with closing(sqlite3.connect(DBB)) as db:
        cursor = db.cursor()
        cursor.execute("SELECT quantity FROM inv_user WHERE user_id = ? AND item_name = ?", 
                      (user_id, item))
        result = cursor.fetchone()
        if not result or result[0] < quantity:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏."
        return True, ""

def create_quantity_keyboard(item: str, max_quantity: int, current_quantity: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤."""
    buttons = [
        [
            InlineKeyboardButton("+1", callback_data=f"sell_qty:{item}:{min(max_quantity, current_quantity + 1)}"),
            InlineKeyboardButton("+10", callback_data=f"sell_qty:{item}:{min(max_quantity, current_quantity + 10)}"),
            InlineKeyboardButton("+100", callback_data=f"sell_qty:{item}:{min(max_quantity, current_quantity + 100)}"),
            InlineKeyboardButton("–í—Å–µ", callback_data=f"sell_qty:{item}:{max_quantity}")
        ],
        [
            InlineKeyboardButton("-1", callback_data=f"sell_qty:{item}:{max(0, current_quantity - 1)}"),
            InlineKeyboardButton("-10", callback_data=f"sell_qty:{item}:{max(0, current_quantity - 10)}"),
            InlineKeyboardButton("-100", callback_data=f"sell_qty:{item}:{max(0, current_quantity - 100)}"),
            InlineKeyboardButton("–°–±—Ä–æ—Å", callback_data=f"sell_qty:{item}:0")
        ]
    ]
    if current_quantity > 0:
        buttons.append([InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"sell_price:{item}:{current_quantity}")])
    buttons.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="sell_cancel")])
    return InlineKeyboardMarkup(buttons)

def create_price_keyboard(item: str, quantity: int, current_price: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã."""
    buttons = [
        [
            InlineKeyboardButton("+100", callback_data=f"sell_price_adj:{item}:{quantity}:{current_price + 100}"),
            InlineKeyboardButton("+1–∫", callback_data=f"sell_price_adj:{item}:{quantity}:{current_price + 1000}"),
            InlineKeyboardButton("+10–∫", callback_data=f"sell_price_adj:{item}:{quantity}:{current_price + 10000}"),
            InlineKeyboardButton("+100–∫", callback_data=f"sell_price_adj:{item}:{quantity}:{current_price + 100000}"),
            InlineKeyboardButton("+1–∫–∫", callback_data=f"sell_price_adj:{item}:{quantity}:{current_price + 1000000}")
        ],
        [
            InlineKeyboardButton("-100", callback_data=f"sell_price_adj:{item}:{quantity}:{max(0, current_price - 100)}"),
            InlineKeyboardButton("-1–∫", callback_data=f"sell_price_adj:{item}:{quantity}:{max(0, current_price - 1000)}"),
            InlineKeyboardButton("-10–∫", callback_data=f"sell_price_adj:{item}:{quantity}:{max(0, current_price - 10000)}"),
            InlineKeyboardButton("-100–∫", callback_data=f"sell_price_adj:{item}:{quantity}:{max(0, current_price - 100000)}"),
            InlineKeyboardButton("-1–∫–∫", callback_data=f"sell_price_adj:{item}:{quantity}:{max(0, current_price - 1000000)}")
        ]
    ]
    buttons.append([InlineKeyboardButton("–°–±—Ä–æ—Å", callback_data=f"sell_price_adj:{item}:{quantity}:0")])
    if current_price > 0:
        buttons.append([InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"sell_confirm:{item}:{quantity}:{current_price}")])
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"sell_qty:{item}:{quantity}")])
    return InlineKeyboardMarkup(buttons)

@app.on_callback_query(filters.regex(r"market_sell"))
@rate_limit
async def market_sell_choose_item(client, callback_query):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏."""
    user_id = callback_query.from_user.id
    try:
        with closing(sqlite3.connect(DBB)) as db:
            cursor = db.cursor()
            cursor.execute("SELECT item_name, quantity FROM inv_user WHERE user_id = ? AND quantity > 0", 
                          (user_id,))
            items = cursor.fetchall()

        if not items:
            await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return

        buttons = [
            [InlineKeyboardButton(f"{name} √ó{qty}", callback_data=f"sell_item_{name}")]
            for name, qty in sorted(items, key=lambda x: x[0])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        ]
        buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="market_view_edit")])
        
        await callback_query.message.edit_text(
            "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ market_sell_choose_item: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@app.on_callback_query(filters.regex(r"sell_item_(.+)"))
@rate_limit
async def sell_item_selection(client, callback_query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    item = callback_query.data.split("_", 2)[-1]
    user_id = callback_query.from_user.id

    try:
        with closing(sqlite3.connect(DBB)) as db:
            cursor = db.cursor()
            cursor.execute("SELECT quantity FROM inv_user WHERE user_id = ? AND item_name = ?", 
                          (user_id, item))
            result = cursor.fetchone()

        if not result or result[0] <= 0:
            await callback_query.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return

        quantity = result[0]
        await callback_query.message.edit_text(
            f"üì¶ <b>{item}</b>\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {quantity} —à—Ç.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
            reply_markup=create_quantity_keyboard(item, quantity, 0)
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ sell_item_selection: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@app.on_callback_query(filters.regex(r"sell_qty:(.+):(\d+)"))
@rate_limit
async def update_quantity(client, callback_query):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    try:
        item, quantity = callback_query.data.split(":")[1:]
        quantity = int(quantity)
        user_id = callback_query.from_user.id

        valid, error = await validate_item_quantity(user_id, item, quantity)
        if not valid:
            await callback_query.answer(error, show_alert=True)
            return

        with closing(sqlite3.connect(DBB)) as db:
            cursor = db.cursor()
            cursor.execute("SELECT quantity FROM inv_user WHERE user_id = ? AND item_name = ?", 
                          (user_id, item))
            max_quantity = cursor.fetchone()[0]

        await callback_query.message.edit_text(
            f"üì¶ <b>{item}</b>\n"
            f"–í—ã–±—Ä–∞–Ω–æ: {quantity} —à—Ç. –∏–∑ {max_quantity} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
            reply_markup=create_quantity_keyboard(item, max_quantity, quantity)
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_quantity: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@app.on_callback_query(filters.regex(r"sell_price:(.+):(\d+)"))
@rate_limit
async def select_price(client, callback_query):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã."""
    try:
        item, quantity = callback_query.data.split(":")[1:]
        quantity = int(quantity)
        user_id = callback_query.from_user.id

        valid, error = await validate_item_quantity(user_id, item, quantity)
        if not valid:
            await callback_query.answer(error, show_alert=True)
            return

        await callback_query.message.edit_text(
            f"üì¶ <b>{item}</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:",
            reply_markup=create_price_keyboard(item, quantity, 0)
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_price: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@app.on_callback_query(filters.regex(r"sell_price_adj:(.+):(\d+):(\d+)"))
@rate_limit
async def adjust_price(client, callback_query):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã."""
    try:
        item, quantity, price = callback_query.data.split(":")[1:]
        quantity = int(quantity)
        price = int(price)
        user_id = callback_query.from_user.id

        valid, error = await validate_item_quantity(user_id, item, quantity)
        if not valid:
            await callback_query.answer(error, show_alert=True)
            return

        await callback_query.message.edit_text(
            f"üì¶ <b>{item}</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {format_balance(price)} –º–æ–Ω–µ—Ç\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É:",
            reply_markup=create_price_keyboard(item, quantity, price)
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ adjust_price: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@app.on_callback_query(filters.regex(r"sell_confirm:(.+):(\d+):(\d+)"))
@rate_limit
async def confirm_sell(client, callback_query):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å."""
    try:
        item, quantity, price = callback_query.data.split(":")[1:]
        quantity = int(quantity)
        price = int(price)
        user_id = callback_query.from_user.id

        if quantity <= 0:
            await callback_query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0.", show_alert=True)
            return
        if price <= 0:
            await callback_query.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", show_alert=True)
            return

        valid, error = await validate_item_quantity(user_id, item, quantity)
        if not valid:
            await callback_query.answer(error, show_alert=True)
            return

        with closing(sqlite3.connect(DBB)) as db:
            cursor = db.cursor()
            try:
                # –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                cursor.execute(
                    "UPDATE inv_user SET quantity = quantity - ? WHERE user_id = ? AND item_name = ?",
                    (quantity, user_id, item)
                )
                if cursor.rowcount == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                cursor.execute(
                    "INSERT INTO MARKETPLACE (seller_id, item_name, price, quantity) VALUES (?, ?, ?, ?)",
                    (user_id, item, price, quantity)
                )
                if cursor.rowcount == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å.")

                db.commit()
            except Exception as e:
                db.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å.", show_alert=True)
                return

        await callback_query.message.edit_text(
            f"‚úÖ –í—ã –≤—ã—Å—Ç–∞–≤–∏–ª–∏ <b>{item}</b> √ó{quantity} –ø–æ <b>{format_balance(price)}</b> –º–æ–Ω–µ—Ç –∑–∞ –µ–¥–∏–Ω–∏—Ü—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="market_view_edit")]
            ])
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_sell: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    
    await app.send_message("-1004869586301", f"""
<b>–ú–æ–º–µ–Ω—Ç: –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</b>
<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {callback_query.from_user.first_name} (@{callback_query.from_user.username} #{callback_query.from_user.id})
<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {item}
<b>–°—É–º–º–∞:</b> {format_balance(price)} ({price})
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}
<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            """)

@app.on_callback_query(filters.regex(r"sell_cancel"))
@rate_limit
async def cancel_sell(client, callback_query):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏."""
    await callback_query.message.edit_text(
        "‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="market_view_edit")]
        ])
    )
    await callback_query.answer()
    
@app.on_callback_query(filters.regex("market_my_offers"))
async def market_my_lots(client, callback_query):
    user_id = callback_query.from_user.id
    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT rowid, item_name, price, quantity FROM MARKETPLACE WHERE seller_id = ?", (user_id,))
    offers = cursor.fetchall()
    db.close()

    if not offers:
        return await callback_query.message.edit_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")

    text = "üìã <b>–í–∞—à–∏ –ª–æ—Ç—ã:</b>\n"
    buttons = []
    for rowid, item, price, quantity in offers:
        text += f"‚Ä¢ {item} ‚Äî {price} –º–æ–Ω. √ó{quantity}\n"
        buttons.append([InlineKeyboardButton(f"‚ùå –£–±—Ä–∞—Ç—å {item}", callback_data=f"remove_offer_{rowid}")])
    
    buttons.append([InlineKeyboardButton(f"–ù–∞–∑–∞–¥", callback_data=f"market_view_edit")])

    await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

@app.on_callback_query(filters.regex(r"remove_offer_(\d+)"))
async def remove_offer(client, callback_query):
    rowid = int(callback_query.data.split("_")[-1])
    user_id = callback_query.from_user.id

    db = sqlite3.connect(DBB)
    cursor = db.cursor()
    cursor.execute("SELECT item_name, quantity FROM MARKETPLACE WHERE rowid = ? AND seller_id = ?", (rowid, user_id))
    offer = cursor.fetchone()
    if not offer:
        db.close()
        return await callback_query.answer("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    item, quantity = offer
    cursor.execute("UPDATE inv_user SET quantity = quantity + ? WHERE user_id = ? AND item_name = ?", (quantity, user_id, item))
    cursor.execute("DELETE FROM MARKETPLACE WHERE rowid = ?", (rowid,))
    db.commit()
    db.close()

    await callback_query.answer("‚úÖ –õ–æ—Ç —É–¥–∞–ª—ë–Ω.")
    await market_my_lots(client, callback_query)

from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import MessageNotModified

@app.on_callback_query(filters.regex(r"buy_(\d+)"))
@rate_limit
async def buy_item(client, callback_query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ."""
    try:
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query.data: {callback_query.data}")
        market_id = int(callback_query.data.split("_")[1])
        user_id = callback_query.from_user.id
        current_message_text = callback_query.message.text or ""

        with closing(sqlite3.connect(DBB)) as db:
            cursor = db.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
            cursor.execute(
                "SELECT seller_id, item_name, price, quantity FROM MARKETPLACE WHERE rowid = ?",
                (market_id,)
            )
            offer = cursor.fetchone()

            if not offer:
                await callback_query.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.", show_alert=True)
                return

            seller_id, item, price, quantity = offer

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ–∫—É–ø–∞–µ—Ç —É —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if user_id == seller_id:
                await callback_query.answer("‚ùå –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç —É —Å–∞–º–æ–≥–æ —Å–µ–±—è.", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            cursor.execute("SELECT money FROM crash WHERE id = ?", (user_id,))
            buyer_money = cursor.fetchone()
            if not buyer_money or buyer_money[0] < price:
                await callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.", show_alert=True)
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message_text = f"üéâ –í—ã –∫—É–ø–∏–ª–∏ <b>{item}</b> –∑–∞ <b>{format_balance(price)}</b> –º–æ–Ω–µ—Ç."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if new_message_text == current_message_text:
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è market_id={market_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                await callback_query.answer("–ü–æ–∫—É–ø–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
                return

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏
                cursor.execute(
                    "UPDATE crash SET money = money - ? WHERE id = ?",
                    (price, user_id)
                )
                if cursor.rowcount == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")

                cursor.execute(
                    "UPDATE crash SET money = money + ? WHERE id = ?",
                    (price, seller_id)
                )
                if cursor.rowcount == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É.")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                cursor.execute(
                    "INSERT OR IGNORE INTO inv_user (user_id, item_name, quantity) VALUES (?, ?, 0)",
                    (user_id, item)
                )
                cursor.execute(
                    "UPDATE inv_user SET quantity = quantity + 1 WHERE user_id = ? AND item_name = ?",
                    (user_id, item)
                )
                if cursor.rowcount == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                if quantity <= 1:
                    cursor.execute("DELETE FROM MARKETPLACE WHERE rowid = ?", (market_id,))
                else:
                    cursor.execute(
                        "UPDATE MARKETPLACE SET quantity = quantity - 1 WHERE rowid = ?",
                        (market_id,)
                    )
                    if cursor.rowcount == 0:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.")

                db.commit()
            except Exception as e:
                db.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (market_id={market_id}): {e}")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞.", show_alert=True)
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ "–ö—É–ø–∏—Ç—å –µ—â–µ", –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω)
        buttons = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="market_buy")]]

        try:
            await callback_query.message.edit_text(
                new_message_text,
                reply_markup=InlineKeyboardMarkup(buttons)
            )
        except MessageNotModified:
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è market_id={market_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É.")
            await callback_query.answer("–ü–æ–∫—É–ø–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
            return

        await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_item (market_id={market_id}): {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@app.on_callback_query(filters.regex(r"market_view_edit"))
async def market_view_edit(client, callback_query):
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üõç –ö—É–ø–∏—Ç—å", callback_data="market_buy")],
        [InlineKeyboardButton("üì¶ –ü—Ä–æ–¥–∞—Ç—å", callback_data="market_sell")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ª–æ—Ç—ã", callback_data="market_my_offers")]
    ])
    await callback_query.message.edit_text("üõí <b>–ú–∞—Ä–∫–µ—Ç:</b>", reply_markup=markup)

@app.on_callback_query(filters.regex(r"market_view"))
async def market_view(client, callback_query):
    await view_market(client, callback_query.message)
    await callback_query.answer()


async def reset_data_command(client, message):
    user_id = message.from_user.id
    if user_id not in API_OWNER:
        return

    try:
        db = sqlite3.connect(DBB)
        cursor = db.cursor()
        cursor.execute("""
            UPDATE crash
            SET money = 0,
                stone = 0,
                iron = 0,
                gold = 0,
                diamond = 0,
                emerald = 0,
                lose_count = 0,
                win_count = 0,
                total_games = 0
        """)
        db.commit()
        db.close()
        await message.reply("–£–°–ü–ï–• –£–£–°–£–ö–ê")
    except Exception as e:
        await message.reply(e)
        
async def reset_all_command(client, message):
    user_id = message.from_user.id
    if user_id not in API_OWNER:
        return

    try:
        db = sqlite3.connect(DBB)
        cursor = db.cursor()

        cursor.execute("""
            UPDATE inv
            SET details = 0,
                stone_sediments = 0,
                iron_ingots = 0,
                gold_bars = 0,
                diamond_cores = 0,
                emerald_dust = 0,
                iron_ingots_dense = 0,
                gold_nuggets = 0
        """)

        cursor.execute("DELETE FROM user_promos")
        cursor.execute("DELETE FROM promos")

        cursor.execute("UPDATE crash SET status = 0")

        db.commit()
        db.close()

        await message.reply("–£–°–ü–ï–• –£–£–°–£–ö–ê")
    except Exception as e:
        await message.reply(e)

INV_PAGE_SIZE = 10
INV_PAGES = {}    
INV_CALLER = {}   
INV_SORT = {}     

async def show_inventory(client, message):
    user_id = message.from_user.id
    if not await check_user(user_id):
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ss –∏–ª–∏ —Ä–µ–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    if await is_banned_user(user_id):
        await message.reply("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    INV_PAGES[user_id] = 0
    INV_SORT[user_id] = "default"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    items = fetch_inventory_items(user_id, INV_SORT[user_id])

    if not items:
        await message.reply("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    msg = await message.reply("üéí –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...")
    INV_CALLER[msg.id] = user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /inv
    await update_inventory_message(client, msg, user_id, items, 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å —É—á–µ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
def fetch_inventory_items(user_id, sort_type):
    db = sqlite3.connect(DBB)
    cursor = db.cursor()

    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: —Å–æ–µ–¥–∏–Ω—è–µ–º inv_user —Å shop, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏ created_at
    base_query = """
        SELECT inv_user.item_name, inv_user.quantity, shop.price, shop.created_at
        FROM inv_user
        JOIN shop ON inv_user.item_name = shop.name
        WHERE inv_user.user_id = ?
    """

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ORDER BY –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if sort_type == "cheap":
        order_by = "ORDER BY shop.price ASC"
    elif sort_type == "expensive":
        order_by = "ORDER BY shop.price DESC"
    elif sort_type == "new":
        order_by = "ORDER BY shop.created_at DESC"
    elif sort_type == "old":
        order_by = "ORDER BY shop.created_at ASC"
    elif sort_type == "quantity_high":
        order_by = "ORDER BY inv_user.quantity DESC"
    elif sort_type == "quantity_low":
        order_by = "ORDER BY inv_user.quantity ASC"
    else:
        order_by = ""  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    query = f"{base_query} {order_by}"
    cursor.execute(query, (user_id,))
    items = cursor.fetchall()
    db.close()
    return items

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
async def update_inventory_message(client, message, user_id, items, page):
    start_idx = page * INV_PAGE_SIZE
    end_idx = start_idx + INV_PAGE_SIZE
    items_page = items[start_idx:end_idx]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    current_sort = INV_SORT.get(user_id, "default")
    sort_display = {
        "default": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "cheap": "–î–µ—à–µ–≤—ã–µ",
        "expensive": "–î–æ—Ä–æ–≥–∏–µ",
        "new": "–ù–æ–≤—ã–µ",
        "old": "–°—Ç–∞—Ä—ã–µ",
        "quantity_high": "–ö–æ–ª-–≤–æ (–º–Ω–æ–≥–æ)",
        "quantity_low": "–ö–æ–ª-–≤–æ (–º–∞–ª–æ)"
    }
    text = (f"üéí <b>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{((len(items) - 1) // INV_PAGE_SIZE) + 1}):</b>\n"
            f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}\n"
            f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_display[current_sort]}\n\n"
            f"–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    buttons = []
    for item_name, quantity, price, created_at in items_page:
        if quantity == 0:
            pass
        else:
            button_text = f"{item_name} ‚Äî ({quantity})"
            buttons.append([InlineKeyboardButton(button_text, callback_data=f"inv_info:{item_name}:{page}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"inv_page:{page - 1}"))
    if end_idx < len(items):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"inv_page:{page + 1}"))
    if nav_buttons:
        buttons.append(nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π
    sort_buttons = [
        [InlineKeyboardButton(f"–î–µ—à–µ–≤—ã–µ{' ‚úÖ' if current_sort == 'cheap' else ''}", callback_data="inv_sort:cheap"),
         InlineKeyboardButton(f"–î–æ—Ä–æ–≥–∏–µ{' ‚úÖ' if current_sort == 'expensive' else ''}", callback_data="inv_sort:expensive")],
        [InlineKeyboardButton(f"–ù–æ–≤—ã–µ{' ‚úÖ' if current_sort == 'new' else ''}", callback_data="inv_sort:new"),
         InlineKeyboardButton(f"–°—Ç–∞—Ä—ã–µ{' ‚úÖ' if current_sort == 'old' else ''}", callback_data="inv_sort:old")],
        [InlineKeyboardButton(f"–ö–æ–ª-–≤–æ (–º–Ω–æ–≥–æ){' ‚úÖ' if current_sort == 'quantity_high' else ''}", callback_data="inv_sort:quantity_high"),
         InlineKeyboardButton(f"–ö–æ–ª-–≤–æ (–º–∞–ª–æ){' ‚úÖ' if current_sort == 'quantity_low' else ''}", callback_data="inv_sort:quantity_low")],
        [InlineKeyboardButton(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é{' ‚úÖ' if current_sort == 'default' else ''}", callback_data="inv_sort:default")]
    ]
    buttons.extend(sort_buttons)

    reply_markup = InlineKeyboardMarkup(buttons) if buttons else None
    await client.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.id,
        text=text,
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü
@app.on_callback_query(filters.regex(r"inv_page:(\d+)"))
async def change_inventory_page(client, callback_query):
    page = int(callback_query.matches[0].group(1))
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /inv
    if INV_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    items = fetch_inventory_items(user_id, INV_SORT.get(user_id, "default"))

    if not items:
        await callback_query.answer("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    INV_PAGES[user_id] = page

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_inventory_message(client, callback_query.message, user_id, items, page)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
@app.on_callback_query(filters.regex(r"inv_sort:(\w+)"))
async def change_inventory_sort(client, callback_query):
    sort_type = callback_query.matches[0].group(1)
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /inv
    if INV_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    current_sort = INV_SORT.get(user_id, "default")
    if current_sort == sort_type:
        await callback_query.answer("–≠—Ç–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    INV_SORT[user_id] = sort_type
    INV_PAGES[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    items = fetch_inventory_items(user_id, sort_type)

    if not items:
        await callback_query.answer("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_inventory_message(client, callback_query.message, user_id, items, 0)
    await callback_query.answer(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {sort_type}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç
@app.on_callback_query(filters.regex(r"inv_info:"))
async def inventory_item_info(client, callback_query):
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /inv
    if INV_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!", show_alert=True)
        return

    parts = callback_query.data.split(":")
    item_name, page = parts[1], int(parts[2])

    db = sqlite3.connect(DBB)
    cursor = db.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Å–∫–æ–ª—å–∫–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞)
    cursor.execute("SELECT quantity FROM inv_user WHERE user_id = ? AND item_name = ?", (user_id, item_name))
    user_item = cursor.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ (—Ü–µ–Ω–∞ –∏ –æ–±—â–µ–µ –∫–æ–ª-–≤–æ)
    cursor.execute("SELECT name, price, quantity FROM shop WHERE name = ?", (item_name,))
    shop_item = cursor.fetchone()

    db.close()

    if not shop_item:
        await callback_query.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    name, price, all_quantity = shop_item
    user_quantity = user_item[0] if user_item else 0

    text = (f"üéí <b>–ü—Ä–µ–¥–º–µ—Ç: <code>{name}</code></b>\n"
            f"üí∞ –¶–µ–Ω–∞: {price} –º–æ–Ω–µ—Ç\n"
            f"üì¶ –£ –≤–∞—Å: {user_quantity} —à—Ç.\n"
            f"üì¶ –í—Å–µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: {all_quantity} —à—Ç.")

    buttons = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"inv_back:{page}")]]
    reply_markup = InlineKeyboardMarkup(buttons)

    await client.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=message_id,
        text=text,
        reply_markup=reply_markup
    )

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@app.on_callback_query(filters.regex(r"inv_back:"))
async def inventory_back(client, callback_query):
    user_id = callback_query.from_user.id
    message_id = callback_query.message.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /inv
    if INV_CALLER.get(message_id) != user_id:
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!", show_alert=True)
        return

    page = int(callback_query.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    items = fetch_inventory_items(user_id, INV_SORT.get(user_id, "default"))

    if not items:
        await callback_query.answer("–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.", show_alert=True)
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    await update_inventory_message(client, callback_query.message, user_id, items, page)
    await callback_query.answer()
import os
import speech_recognition as sr
from pydub import AudioSegment

from pyrogram import Client, filters
import os
import speech_recognition as sr
import subprocess

FFMPEG_PATH = r"C:\Users\Yuukiro\AppData\Local\Microsoft\WinGet\Packages\Gyan.FFmpeg_Microsoft.Winget.Source_8wekyb3d8bbwe\ffmpeg-7.1.1-full_build\bin\ffmpeg.exe"

# @app.on_message(filters.voice)
@rate_limit
async def handle_voice_command(client, message):
    user_id = message.from_user.id
    tes = await message.reply_text("–†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    ogg_path = await message.download()
    wav_path = ogg_path.replace(".ogg", ".wav")

    try:
        subprocess.run([
            FFMPEG_PATH,
            "-i", ogg_path,
            wav_path
        ], check=True)

        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)

        text = recognizer.recognize_google(audio_data, language="ru-RU")
        print(f"[VOICE CMD] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")

        message.text = "/" + text.lower()
        await handle_text_commands(client, message)
        await tes.edit(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \n```voice\n{text}```", parse_mode=enums.ParseMode.MARKDOWN)

    except subprocess.CalledProcessError:
        await tes.edit("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except sr.UnknownValueError:
        await tes.edit("ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except sr.RequestError:
        await tes.edit("üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.")
    finally:
        if os.path.exists(ogg_path):
            os.remove(ogg_path)
        if os.path.exists(wav_path):
            os.remove(wav_path)

import logging
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums import ChatMemberStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def join_channel_command(client: Client, message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –±–æ—Ç–∞ –Ω–∞ –∫–∞–Ω–∞–ª."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if message.from_user.id not in API_OWNER:  # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_ADMIN_ID –Ω–∞ –≤–∞—à ID
        await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # ID –∫–∞–Ω–∞–ª–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ @username)
    channel_url = "@GG_dangerizardhe"  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        chat = await client.join_chat(channel_url)
        await message.reply_text(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {chat.title}!")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
        if "USER_ALREADY_PARTICIPANT" in str(e):
            await message.reply_text("–ë–æ—Ç —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.")
        elif "CHAT_ADMIN_REQUIRED" in str(e):
            await message.reply_text("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.")
        else:
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {str(e)}")

async def save_log(log_data: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª.
    
    Args:
        log_data (dict): –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """

    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    log_file = 'log.json'
    logs = []
    
    # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(log_file):
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                logs = json.load(f)
            if not isinstance(logs, list):  # –ù–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                logs = []
        except (json.JSONDecodeError, Exception):
            logs = []
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'time' not in log_data:
        log_data['time'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    logs.append(log_data)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    try:
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")

# –ø—Ä–∏–º–µ—Ä: log_msgs = {
    #     "chat_id": message.chat.id,
    #     "message_id": message.id,
    #     "user_id": message.from_user.id,
    #     "username": message.from_user.username,
    #     "first_name": message.from_user.first_name,
    #     "text": txt,
    #     "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # }
    # await save_log(log_msg)


antispam_cache = {}
from time import time
async def antispam(client: Client, message: Message):
    user_id = message.from_user.id

    if user_id in API_OWNER:
        return False

    now = time()
    
    if user_id not in antispam_cache:
        antispam_cache[user_id] = {'count': 1, 'time': now}
        return False

    # –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    if now - antispam_cache[user_id]['time'] > 3:
        antispam_cache[user_id]['count'] = 1
        antispam_cache[user_id]['time'] = now
        return False

    antispam_cache[user_id]['count'] += 1

    if antispam_cache[user_id]['count'] > 5:
        await message.delete()
        return True

    return False

safe_games = {}

def _is_safe_active(_, __, message):
    try:
        return message.from_user and (message.from_user.id in safe_games)
    except Exception:
        return False

from pyrogram import filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
import asyncio
import random as rnd

@app.on_message(
    (filters.command("safe") | filters.regex(r"^—Å–µ–π—Ñ(?:\s+\S+)?", flags=re.IGNORECASE))
)
async def start_safe(client, message: Message):
    user_id = message.from_user.id

    # –†–æ–∑–±—ñ—Ä —Å—Ç–∞–≤–∫–∏
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /safe <—Å—Ç–∞–≤–∫–∞> –∏–ª–∏ —Å–µ–π—Ñ <—Å—Ç–∞–≤–∫–∞>")

    balance = await get_balance(user_id)
    bet = parse_bet_input(parts[1].strip(), balance)
    if bet == -1:
        return await message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞.")
    if bet < 10:
        return await message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 10 –º–æ–Ω–µ—Ç.")
    if bet > balance:
        return await message.reply_text("–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å.")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ cooldown
    now = asyncio.get_event_loop().time()
    if not hasattr(start_safe, "_cooldowns"):
        start_safe._cooldowns = {}
    cd = start_safe._cooldowns
    if user_id in cd and now - cd[user_id] < 5:
        return await message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–π.")
    cd[user_id] = now

    # –°–ø–∏—Å—É—î–º–æ —Å—Ç–∞–≤–∫—É
    await update_balance(user_id, -bet)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤
    correct_key = rnd.randint(1, 4)
    safe_games[user_id] = {"correct": correct_key, "bet": bet}

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(f"üîë –ö–ª—é—á {i}", callback_data=f"safe_pick:{user_id}:{i}")]
        for i in range(1, 5)
    ]
    cancel_btn = [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=f"safe_cancel:{user_id}")]
    buttons.append(cancel_btn)

    await message.reply_text(
        f"üîí –ò–≥—Ä–∞ ¬´–°–µ–π—Ñ¬ª –Ω–∞—á–∞—Ç–∞!\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ 4 –∫–ª—é—á–µ–π.\n"
        f"–ï—Å–ª–∏ —É–≥–∞–¥–∞–µ—à—å ‚Äî –ø–æ–ª—É—á–∏—à—å {format_balance(str(bet * 2.5))} –º–æ–Ω–µ—Ç!",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


@app.on_callback_query(filters.regex(r"^safe_pick:(\d+):(\d+)$"))
async def safe_pick_cb(client, callback_query):
    user_id = callback_query.from_user.id
    game_owner_id = int(callback_query.data.split(":")[1])
    pick = int(callback_query.data.split(":")[2])

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–≤—Ü—è
    if user_id != game_owner_id:
        return await callback_query.answer("‚õî –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)

    if user_id not in safe_games:
        return await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", show_alert=True)

    game = safe_games.pop(user_id)
    correct_key = game["correct"]
    bet = game["bet"]

    if pick == correct_key:
        win_amount = int(bet * 2.5)
        await update_balance(user_id, win_amount)
        balance = await get_balance(user_id)
        await callback_query.message.edit_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö–ª—é—á {pick} –ø–æ–¥–æ—à—ë–ª!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_balance(win_amount)} –º–æ–Ω–µ—Ç!\n–ë–∞–ª–∞–Ω—Å: {str(format_balance(balance))}"
        )
    else:
        balance = await get_balance(user_id)
        await callback_query.message.edit_text(
            f"–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—ã–ª –∫–ª—é—á {correct_key}.\n–°—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–µ–ª–∞.\n{format_balance(str(balance))}"
        )


@app.on_callback_query(filters.regex(r"^safe_cancel:(\d+)$"))
async def safe_cancel_cb(client, callback_query):
    user_id = callback_query.from_user.id
    game_owner_id = int(callback_query.data.split(":")[1])

    if user_id != game_owner_id:
        return await callback_query.answer("‚õî –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)

    if user_id not in safe_games:
        return await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.", show_alert=True)

    game_data = safe_games.pop(user_id)
    refund = game_data["bet"]
    await update_balance(user_id, refund)

    await callback_query.message.edit_text(
        f"–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {format_balance(refund)} –º–æ–Ω–µ—Ç."
    )

@app.on_message(filters.text)
@rate_limit
async def handle_text_commands(client: Client, message):
    
    if not message.from_user:
        return

    parts = message.text.split()
    txt = parts[0].lower().lstrip('/')
    tt = 'GG_dangerizardhe'
    channel_url = f"@{tt}" 

    valid_commands = {
        '—Å–ø–∏—Å–æ–∫', '–ø–æ–º–æ—â—å', 'hb', '–∫–æ—Å—Ç–∏', '–±–æ–Ω—É—Å', '–∫—É–ø–∏—Ç—å', '—Ä—É–ª', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏', '—Ç–æ–ø', '–º–∏–Ω–µ—Ä', 'bb', 'ss', '—Ä–µ–≥', "—Ä—É–ª–µ—Ç–∫–∞", "—à–æ–ø", "shop", "–º–∞–≥–∞–∑–∏–Ω", "sell", "–ø—Ä–æ–¥–∞—Ç—å", "market", "–º–∞—Ä–∫–µ—Ç", "bank", "–±–∞–Ω–∫",
        '—è', 'pr', 'meb', 'tb', '–∫—Ä–∞—à', 'inv', '–∏–Ω–≤', 'mine', '–¥–æ–±—ã—Ç—å', 'drill', '–¥—Ä–µ–ª—å', '–ø–∏—Ä–∞–º–∏–¥–∞', "duel", "–¥—É—ç–ª—å", "–¥—É–µ–ª—å", "–±–∞–Ω–∫", "bank", "miner", "–º–∏–Ω–µ—Ä—ã",
        'pay', 'sell', '–ø—Ä–æ–¥–∞—Ç—å', 'market', '–º–∞—Ä–∫–µ—Ç', 'new_promo', "qu", 'quests', "–∫–≤–µ—Å—Ç—ã", "—Ä–µ—Ñ", "my_ref", "start", "st", "—Å–∫—Ä—ã—Ç—å", "–±–∞—à–Ω—è", "—Å–µ–π—Ñ"
    }

    if txt not in valid_commands:
        return
    
    if await antispam(client, message):
        await app.send_message(message.chat.id, f" {message.from_user.first_name} –Ω–µ —Å–ø–∞–º—å!")
        return

    user_id = message.from_user.id
    username = message.from_user.username or f"User_{user_id}"
    first_name = message.from_user.first_name or "NoName"

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not await check_user(user_id):
        if txt in ['ss', '—Ä–µ–≥']:
            await register_command(client, message)
        elif txt == 'start':
            await start_handler(client, message)
        else:
            await message.reply_text("<b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/ss</code> –∏–ª–∏ <code>/—Ä–µ–≥</code>.")
        return
    else:
        await update_user_data(user_id, username, first_name)

    if await is_banned_user(user_id):
        await message.reply_text("–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return

    try:
        member = await client.get_chat_member(channel_url, message.from_user.id)
        if member.status not in [ChatMemberStatus.MEMBER, ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]:
            btn = InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{tt}")]]
            )
            await message.reply_text(
                "–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá",
                reply_markup=btn
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        if "ChatAdminRequired" in str(e):
            btn = InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{tt}")]]
            )
            await message.reply_text(
                "–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá",
                reply_markup=btn
            )
            return
        else:
            btn = InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{tt}")]]
            )
            await message.reply_text(
                "–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá",
                reply_markup=btn
            )
            return
    if message.forward_from:
        return

    log_msgs = {
        "chat_id": message.chat.id,
        "message_id": message.id,
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "text": message.text,
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    await save_log(log_msgs)

    # –º–µ–Ω—è—è–µ–º —ë –Ω–∞ –µ
    txt = txt.replace('—ë', '–µ') 
    txt = txt.replace('–Å', '–ï')
    command_map = {
        ('start',): start_handler,
        ('—Å–ø–∏—Å–æ–∫', '–ø–æ–º–æ—â—å', 'hb'): help_command,
        ('–∫–æ—Å—Ç–∏',): dice_command,
        ('–±–æ–Ω—É—Å',): bonus_command,
        ('–∫—É–ø–∏—Ç—å', 'bb'): buy_status_command,
        ('—Ä—É–ª', "—Ä—É–ª–µ—Ç–∫–∞"): roulette_command,
        ('–ø–µ—Ä–µ–≤–µ—Å—Ç–∏', 'pay',): transfer_command,
        ('—Ç–æ–ø', 'tb'): top_balance_command,
        ('ss', '—Ä–µ–≥'): register_command,
        ('–º–∏–Ω–µ—Ä', "miner", "–º–∏–Ω–µ—Ä—ã"): mines_command,
        ('—è', 'meb'): profile_command_short,
        ('pr',): activate_promo_command,
        ('–∫—Ä–∞—à',): crash_command,
        ('duel', '–¥—É—ç–ª—å', '–¥—É–µ–ª—å'): duel_command,
        ('inv', '–∏–Ω–≤', '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'): show_inventory,
        ('market', '–º–∞—Ä–∫–µ—Ç'): view_market,
        ('shop', '—à–æ–ø', "–º–∞–≥–∞–∑–∏–Ω"): show_shop,
        ('sell', '–ø—Ä–æ–¥–∞—Ç—å'): sell_item,
        ('–±–∞—à–Ω—è',): start_tower,
        ('–±–∞–Ω–∫', "bank"): bank_command,
        ("new_promo"): create_promo_command,
        ('qu', 'quests', '–∫–≤–µ—Å—Ç—ã'): show_quests,
        ('my_ref', '—Ä–µ—Ñ'): my_refs_handler,
        ('ref', '—Ä–µ—Ñ—ã'): my_refs_handler,

        ('st', '—Å–∫—Ä—ã—Ç—å'): toggle_top_status,
    }

    for keys, func in command_map.items():
        if txt in keys:
            await func(client, message)
            break   





from random import random, uniform

config = {
    "hard_crash_chance": 0.5,  # 30% —à–∞–Ω—Å –Ω–∞ –∂–µ—Å—Ç–∫–∏–π —Å–ª–∏–≤
    "hard_crash_multiplier_min": 2.41,  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∂–µ—Å—Ç–∫–æ–≥–æ —Å–ª–∏–≤–∞
    "hard_crash_max_sub": 1.59,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–ª—è –∂–µ—Å—Ç–∫–æ–≥–æ —Å–ª–∏–≤–∞
    "r_adjustment": {
        2: 0.05,
        3: 0.1,
        4: 0.15,
        5: 0.2
    }
}

# async def get_crash_point(multiplier: float, config=None):
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–∫—É –∫—Ä–∞—à–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
#     - 60% —à–∞–Ω—Å –Ω–∞ "–∂—ë—Å—Ç–∫–∏–π —Å–ª–∏–≤" (–Ω–∏–∑–∫–∏–π crash) –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ.
#     - –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –≤–µ—Å–∞–º: —á–∞—â–µ –¥–∞—ë—Ç x2‚Äìx3, —Ä–µ–∂–µ x5+, –ø–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞ x10+.
#     """

#     # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
#     if config is None:
#         config = {
#             'hard_crash_multiplier_min': 2.41,
#             'hard_crash_chance': 0.6,
#             'hard_crash_max_sub': 1.59,
#         }

#     chance = random()

#     if multiplier < 2.41:
#         rr = random()
#         if rr < 0.7:
#             return round(uniform(1.00, 2.50), 2)
#         else:
#             return round(uniform(1.00, 2.1  ), 2)
#     # üìâ –ñ—ë—Å—Ç–∫–∏–π —Å–ª–∏–≤
#     if multiplier >= config['hard_crash_multiplier_min']:
#         if chance < config['hard_crash_chance']:
#             max_crash = multiplier - config['hard_crash_max_sub']
#             return round(uniform(1.00, max_crash), 2) if max_crash > 1.01 else round(uniform(1.00, 1.20), 2)

#     # üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–Ω—Å–æ–≤ (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –±–µ–∑ –∂–∏—Ä–Ω—ã—Ö x)
#     r = random()
#     crash_tiers = [
#         (1.0, 0.1),               # 10% –∞–≤—Ç–æ–∫—Ä–∞—à
#         (uniform(1.5, 2.5), 0.5), # 50% –ø–æ–±–µ–¥–∞ x2
#         (uniform(2.51, 3.5), 0.2),# 20% –ø–æ–±–µ–¥–∞ x3
#         (uniform(3.51, 5.0), 0.1),# 10% x4‚Äìx5
#         (uniform(5.01, 7.0), 0.07),# 7% x6‚Äìx7
#         (uniform(7.01, 10.0), 0.03)# 3% —ç–ø–∏–∫ x8‚Äìx10
#     ]

#     cumulative = 0
#     for value, weight in crash_tiers:
#         cumulative += weight
#         if r < cumulative:
#             return round(value, 2)

#     # fallback –Ω–∞ –≤—Å—è–∫–∏–π
#     return round(uniform(1.0, 2.0), 2)


async def generate_crash_point():
    rand = random()
    if rand <= 0.10:
        return 1.00
    elif rand <= 0.66:
        return round(uniform(1.01, 2.00), 2)
    elif rand <= 0.89:
        return round(uniform(2.01, 5.00), 2)
    elif rand <= 0.96:
        return round(uniform(5.01, 8.00), 2)
    else:
        return round(uniform(8.01, 15.00), 2)

async def crash_command(client, message):
    """–ò–≥—Ä–∞ –≤ –∫—Ä–∞—à —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è."""
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.reply_text("<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—Ä–∞—à (—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏) (–∏–∫—Å)</i>\n–ü—Ä–∏–º–µ—Ä: –∫—Ä–∞—à 100–∫ 2.5")
            return

        bet_amount_str, multiplier_str = parts[1], parts[2]
        if not re.match(r"^\d+(\.\d{1,2})?$", multiplier_str):
            await message.reply_text("<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5).</i>")
            return

        multiplier = float(multiplier_str)
        if not 1.01 <= multiplier <= 15.00:
            await message.reply_text("<i>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1.01 –¥–æ 15.00.</i>")
            return

        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        bet_amount = parse_bet_amount(bet_amount_str, user_data['money'])

        if bet_amount is None:
            await message.reply_text("<i>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏.</i>")
            return
        if bet_amount < 10:
            await message.reply_text("<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç.</i>")
            return
        if user_data['money'] < bet_amount:
            await message.reply_text("<i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.</i>")
            return

        crash_point = await generate_crash_point()

        with sqlite3.connect(DBB) as db:
            cursor = db.cursor()
            if crash_point >= multiplier:
                win_amount = int(bet_amount * multiplier)
                cursor.execute("UPDATE crash SET money = money + ? WHERE id = ?", (float(win_amount - bet_amount), user_id))
                db.commit()
                await set_win_monet(user_id, bet_amount)
                mmoney = format_balance(user_data['money'] - bet_amount)
                bet_amount1 = format_balance(bet_amount)
                await message.reply_text(
                    f"üéâ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏</b> <code>{format_balance(win_amount)}</code> <b>–º–æ–Ω–µ—Ç</b>\n"
                    f"üìà <b>–¢–æ—á–∫–∞ –∫—Ä–∞—à–∞:</b> <code>{crash_point:.2f}</code>\n"
                    f"üéØ <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>{multiplier:.2f}</code>\n"
                    f"üí∏ <b>–°—Ç–∞–≤–∫–∞:</b> <code>{bet_amount1}</code>\n"
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{format_balance(user_data['money'] + win_amount - bet_amount)}</code>"
                )
            else:
                cursor.execute("UPDATE crash SET money = money - ? WHERE id = ?", (float(bet_amount), user_id))
                db.commit()
                await set_lose_monet(user_id, bet_amount)
                bet_amount1 = format_balance(bet_amount)
                
                await message.reply_text(
                    f"üòî <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b>\n"
                    f"üìà <b>–¢–æ—á–∫–∞ –∫—Ä–∞—à–∞:</b> <code>{crash_point:.2f}</code>\n"
                    f"üéØ <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> <code>{multiplier:.2f}</code>\n"
                    f"üí∏ <b>–°—Ç–∞–≤–∫–∞:</b> <code>{bet_amount1}</code>\n"
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{format_balance(user_data['money'] - bet_amount)}</code>"
                )
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

from datetime import datetime, timedelta
import asyncio

async def update_bank_interest():
    moscow_tz = pytz.timezone('Europe/Moscow')
    while True:
        now = datetime.now(moscow_tz)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –∏ –≤—Ä–µ–º—è 00:00 –ø–æ –ú–°–ö
        if now.weekday() == 0 and now.hour == 0 and now.minute == 0:
            with sqlite3.connect(DBB) as db:
                cursor = db.cursor()
                cursor.execute("SELECT deposit_id, current_amount FROM bank_deposits WHERE is_active = 1")
                deposits = cursor.fetchall()
                for deposit_id, current_amount in deposits:
                    new_amount = int(current_amount * 1.05)  # +5%
                    cursor.execute("UPDATE bank_deposits SET current_amount = ? WHERE deposit_id = ?",
                                  (new_amount, deposit_id))
                db.commit()
            print(f"[BANK] –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è {len(deposits)} –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ {now.strftime('%Y-%m-%d %H:%M:%S %Z')}")
        # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60)


async def on_startup():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.create_task(update_bank_interest()) 

app.startup_function = on_startup

app.run()
